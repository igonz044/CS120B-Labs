
igonz044_lab4_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a3  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	23 d1       	rcall	.+582    	; 0x2f0 <main>
  aa:	3e c1       	rjmp	.+636    	; 0x328 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
unsigned char GetBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
}
*/
void tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch(state)//Transitions
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <tick+0x18>
  c4:	43 c0       	rjmp	.+134    	; 0x14c <tick+0x9e>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	91 05       	cpc	r25, r1
  ca:	28 f4       	brcc	.+10     	; 0xd6 <tick+0x28>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	59 f0       	breq	.+22     	; 0xe6 <tick+0x38>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	81 f0       	breq	.+32     	; 0xf4 <tick+0x46>
				state = Wait2;
			}
		break;

		default: 
		break;
  d4:	d9 c0       	rjmp	.+434    	; 0x288 <tick+0x1da>
	return ((x & (0x01 << k)) != 0);
}
*/
void tick()
{
	switch(state)//Transitions
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <tick+0x30>
  dc:	70 c0       	rjmp	.+224    	; 0x1be <tick+0x110>
  de:	04 97       	sbiw	r24, 0x04	; 4
  e0:	09 f4       	brne	.+2      	; 0xe4 <tick+0x36>
  e2:	a6 c0       	rjmp	.+332    	; 0x230 <tick+0x182>
				state = Wait2;
			}
		break;

		default: 
		break;
  e4:	d1 c0       	rjmp	.+418    	; 0x288 <tick+0x1da>
void tick()
{
	switch(state)//Transitions
	{
		case Init:
		state = Locked;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
  f2:	ca c0       	rjmp	.+404    	; 0x288 <tick+0x1da>
		
			case Locked:
			if(A2 && !A0 && !A1)
  f4:	80 e2       	ldi	r24, 0x20	; 32
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	80 81       	ld	r24, Z
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	84 70       	andi	r24, 0x04	; 4
 102:	99 27       	eor	r25, r25
 104:	89 2b       	or	r24, r25
 106:	d9 f0       	breq	.+54     	; 0x13e <tick+0x90>
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	81 70       	andi	r24, 0x01	; 1
 116:	99 27       	eor	r25, r25
 118:	89 2b       	or	r24, r25
 11a:	89 f4       	brne	.+34     	; 0x13e <tick+0x90>
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	88 2f       	mov	r24, r24
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	82 70       	andi	r24, 0x02	; 2
 12a:	99 27       	eor	r25, r25
 12c:	89 2b       	or	r24, r25
 12e:	39 f4       	brne	.+14     	; 0x13e <tick+0x90>
			{
				state = Wait;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Locked;
			}
		break;
 13c:	a5 c0       	rjmp	.+330    	; 0x288 <tick+0x1da>
			{
				state = Wait;
			}
			else
			{
				state = Locked;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		break;
 14a:	9e c0       	rjmp	.+316    	; 0x288 <tick+0x1da>
		
		case Wait:
			if(A1 && !A0 && !A2)
 14c:	80 e2       	ldi	r24, 0x20	; 32
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	82 70       	andi	r24, 0x02	; 2
 15a:	99 27       	eor	r25, r25
 15c:	89 2b       	or	r24, r25
 15e:	d9 f0       	breq	.+54     	; 0x196 <tick+0xe8>
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	99 27       	eor	r25, r25
 170:	89 2b       	or	r24, r25
 172:	89 f4       	brne	.+34     	; 0x196 <tick+0xe8>
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	80 81       	ld	r24, Z
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	84 70       	andi	r24, 0x04	; 4
 182:	99 27       	eor	r25, r25
 184:	89 2b       	or	r24, r25
 186:	39 f4       	brne	.+14     	; 0x196 <tick+0xe8>
			{
				state = Unlocked;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Wait;
			}
		break;
 194:	79 c0       	rjmp	.+242    	; 0x288 <tick+0x1da>
		case Wait:
			if(A1 && !A0 && !A2)
			{
				state = Unlocked;
			}
			else if(A7)
 196:	80 e2       	ldi	r24, 0x20	; 32
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	3c f4       	brge	.+14     	; 0x1b0 <tick+0x102>
			{
				state = Locked;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Wait;
			}
		break;
 1ae:	6c c0       	rjmp	.+216    	; 0x288 <tick+0x1da>
			{
				state = Locked;
			}
			else
			{
				state = Wait;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		break;
 1bc:	65 c0       	rjmp	.+202    	; 0x288 <tick+0x1da>
		
		case Unlocked://opens vault
		if(A7)// to lock it back up
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	3c f4       	brge	.+14     	; 0x1d8 <tick+0x12a>
		{
			state = Locked;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		else
		{
			state = Unlocked;
		}
		break;
 1d6:	58 c0       	rjmp	.+176    	; 0x288 <tick+0x1da>
		case Unlocked://opens vault
		if(A7)// to lock it back up
		{
			state = Locked;
		}
		else if(A2 && !A0 && !A1)
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	84 70       	andi	r24, 0x04	; 4
 1e6:	99 27       	eor	r25, r25
 1e8:	89 2b       	or	r24, r25
 1ea:	d9 f0       	breq	.+54     	; 0x222 <tick+0x174>
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 2f       	mov	r24, r24
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	81 70       	andi	r24, 0x01	; 1
 1fa:	99 27       	eor	r25, r25
 1fc:	89 2b       	or	r24, r25
 1fe:	89 f4       	brne	.+34     	; 0x222 <tick+0x174>
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	80 81       	ld	r24, Z
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	82 70       	andi	r24, 0x02	; 2
 20e:	99 27       	eor	r25, r25
 210:	89 2b       	or	r24, r25
 212:	39 f4       	brne	.+14     	; 0x222 <tick+0x174>
		{
			state = Wait2;
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 21c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		else
		{
			state = Unlocked;
		}
		break;
 220:	33 c0       	rjmp	.+102    	; 0x288 <tick+0x1da>
		{
			state = Wait2;
		}
		else
		{
			state = Unlocked;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		break;
 22e:	2c c0       	rjmp	.+88     	; 0x288 <tick+0x1da>
		
		case Wait2:
			if(A1 && !A0 && !A2)
 230:	80 e2       	ldi	r24, 0x20	; 32
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	fc 01       	movw	r30, r24
 236:	80 81       	ld	r24, Z
 238:	88 2f       	mov	r24, r24
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	82 70       	andi	r24, 0x02	; 2
 23e:	99 27       	eor	r25, r25
 240:	89 2b       	or	r24, r25
 242:	d9 f0       	breq	.+54     	; 0x27a <tick+0x1cc>
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	88 2f       	mov	r24, r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	81 70       	andi	r24, 0x01	; 1
 252:	99 27       	eor	r25, r25
 254:	89 2b       	or	r24, r25
 256:	89 f4       	brne	.+34     	; 0x27a <tick+0x1cc>
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	80 81       	ld	r24, Z
 260:	88 2f       	mov	r24, r24
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	84 70       	andi	r24, 0x04	; 4
 266:	99 27       	eor	r25, r25
 268:	89 2b       	or	r24, r25
 26a:	39 f4       	brne	.+14     	; 0x27a <tick+0x1cc>
			{
				state = Locked;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Wait2;
			}
		break;
 278:	06 c0       	rjmp	.+12     	; 0x286 <tick+0x1d8>
			{
				state = Locked;
			}
			else
			{
				state = Wait2;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 282:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		break;
 286:	00 00       	nop

		default: 
		break;
	}	
	switch (state) { //State Actions
 288:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 28c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	91 05       	cpc	r25, r1
 294:	c1 f0       	breq	.+48     	; 0x2c6 <tick+0x218>
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	91 05       	cpc	r25, r1
 29a:	28 f4       	brcc	.+10     	; 0x2a6 <tick+0x1f8>
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	49 f0       	breq	.+18     	; 0x2b2 <tick+0x204>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	61 f0       	breq	.+24     	; 0x2bc <tick+0x20e>
			PORTB = 0x01;
		break;
		

		default: 
		break;
 2a4:	21 c0       	rjmp	.+66     	; 0x2e8 <tick+0x23a>
		break;

		default: 
		break;
	}	
	switch (state) { //State Actions
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	c1 f0       	breq	.+48     	; 0x2dc <tick+0x22e>
 2ac:	04 97       	sbiw	r24, 0x04	; 4
 2ae:	81 f0       	breq	.+32     	; 0x2d0 <tick+0x222>
			PORTB = 0x01;
		break;
		

		default: 
		break;
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <tick+0x23a>
		default: 
		break;
	}	
	switch (state) { //State Actions
		case Init:
		PORTB = 0x00;
 2b2:	85 e2       	ldi	r24, 0x25	; 37
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	10 82       	st	Z, r1
		break;
 2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <tick+0x23a>
		
		case Locked:
			PORTB = 0x00;
 2bc:	85 e2       	ldi	r24, 0x25	; 37
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	fc 01       	movw	r30, r24
 2c2:	10 82       	st	Z, r1
		break;
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <tick+0x23a>
		
		case Wait:
			PORTB = 0x00;
 2c6:	85 e2       	ldi	r24, 0x25	; 37
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	10 82       	st	Z, r1
		break;
 2ce:	0c c0       	rjmp	.+24     	; 0x2e8 <tick+0x23a>
		
		case Wait2:
		PORTB = 0x01;
 2d0:	85 e2       	ldi	r24, 0x25	; 37
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
		break;
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <tick+0x23a>
		
		case Unlocked://opens vault
			PORTB = 0x01;
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
		break;
 2e6:	00 00       	nop
		

		default: 
		break;
	}
}
 2e8:	00 00       	nop
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <main>:
int main(void)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; //inputs, 2 buttons
 2f8:	81 e2       	ldi	r24, 0x21	; 33
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	fc 01       	movw	r30, r24
 2fe:	10 82       	st	Z, r1
 300:	82 e2       	ldi	r24, 0x22	; 34
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //outputs
 30a:	84 e2       	ldi	r24, 0x24	; 36
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
 314:	85 e2       	ldi	r24, 0x25	; 37
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	10 82       	st	Z, r1
	
	state = Init;//initialize state
 31c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 320:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	while(1) { tick(); }
 324:	c4 de       	rcall	.-632    	; 0xae <tick>
 326:	fe cf       	rjmp	.-4      	; 0x324 <main+0x34>

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
