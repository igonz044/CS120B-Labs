
igonz044_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000881  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003eb  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
   6:	00 00       	nop
   8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
   a:	00 00       	nop
   c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
   e:	00 00       	nop
  10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
  12:	00 00       	nop
  14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
  16:	00 00       	nop
  18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
  1a:	00 00       	nop
  1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
  1e:	00 00       	nop
  20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
  22:	00 00       	nop
  24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
  26:	00 00       	nop
  28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
  2e:	00 00       	nop
  30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
  32:	00 00       	nop
  34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
  36:	00 00       	nop
  38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
  3a:	00 00       	nop
  3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
  3e:	00 00       	nop
  40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
  42:	00 00       	nop
  44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
  46:	00 00       	nop
  48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
  4e:	00 00       	nop
  50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
  52:	00 00       	nop
  54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
  56:	00 00       	nop
  58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
  5a:	00 00       	nop
  5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
  5e:	00 00       	nop
  60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
  62:	00 00       	nop
  64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
  66:	00 00       	nop
  68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
  6e:	00 00       	nop
  70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
  72:	00 00       	nop
  74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
  76:	00 00       	nop
  78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
  7a:	00 00       	nop
  7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
  7e:	00 00       	nop
  80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
  82:	00 00       	nop
  84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
  86:	00 00       	nop
  88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7f 00       	.word	0x007f	; ????
  8e:	86 00       	.word	0x0086	; ????
  90:	8d 00       	.word	0x008d	; ????
  92:	fc 00       	.word	0x00fc	; ????
  94:	03 01       	movw	r0, r6
  96:	0a 01       	movw	r0, r20
  98:	48 01       	movw	r8, r16
  9a:	85 01       	movw	r16, r10
  9c:	aa 01       	movw	r20, r20
  9e:	d7 01       	movw	r26, r14
  a0:	b0 01       	movw	r22, r0
  a2:	c0 01       	movw	r24, r0
  a4:	d7 01       	movw	r26, r14
  a6:	d7 01       	movw	r26, r14
  a8:	d0 01       	movw	r26, r0

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	a2 30       	cpi	r26, 0x02	; 2
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	7c d1       	rcall	.+760    	; 0x3c0 <main>
  c8:	a5 c1       	rjmp	.+842    	; 0x414 <_exit>

000000ca <__bad_interrupt>:
  ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <TickFct_LED>:

#define A0 (~PINA & 0x01)
#define A1 (~PINA & 0x02)

void TickFct_LED()
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	switch(LA_State) {   // Transitions
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  dc:	cc 01       	movw	r24, r24
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	27 e0       	ldi	r18, 0x07	; 7
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	84 1b       	sub	r24, r20
  ec:	95 0b       	sbc	r25, r21
  ee:	28 17       	cp	r18, r24
  f0:	39 07       	cpc	r19, r25
  f2:	08 f4       	brcc	.+2      	; 0xf6 <TickFct_LED+0x2a>
  f4:	11 c1       	rjmp	.+546    	; 0x318 <TickFct_LED+0x24c>
  f6:	8a 5b       	subi	r24, 0xBA	; 186
  f8:	9f 4f       	sbci	r25, 0xFF	; 255
  fa:	fc 01       	movw	r30, r24
  fc:	82 c1       	rjmp	.+772    	; 0x402 <__tablejump2__>
		case LA_SMStart:  // Initial transition
		LA_State = init;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 10a:	10 c1       	rjmp	.+544    	; 0x32c <TickFct_LED+0x260>

		case init:
		LA_State = check;
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 118:	09 c1       	rjmp	.+530    	; 0x32c <TickFct_LED+0x260>
		
		case check:
		if(!A0 && !A1){
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	81 70       	andi	r24, 0x01	; 1
 128:	99 27       	eor	r25, r25
 12a:	89 2b       	or	r24, r25
 12c:	89 f0       	breq	.+34     	; 0x150 <TickFct_LED+0x84>
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	82 70       	andi	r24, 0x02	; 2
 13c:	99 27       	eor	r25, r25
 13e:	89 2b       	or	r24, r25
 140:	39 f0       	breq	.+14     	; 0x150 <TickFct_LED+0x84>
			LA_State = check;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 14e:	53 c0       	rjmp	.+166    	; 0x1f6 <TickFct_LED+0x12a>
			}else if(A0 && !A1){
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	80 81       	ld	r24, Z
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	81 70       	andi	r24, 0x01	; 1
 15e:	99 27       	eor	r25, r25
 160:	89 2b       	or	r24, r25
 162:	89 f4       	brne	.+34     	; 0x186 <TickFct_LED+0xba>
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	82 70       	andi	r24, 0x02	; 2
 172:	99 27       	eor	r25, r25
 174:	89 2b       	or	r24, r25
 176:	39 f0       	breq	.+14     	; 0x186 <TickFct_LED+0xba>
			LA_State = increment;
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 180:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 184:	38 c0       	rjmp	.+112    	; 0x1f6 <TickFct_LED+0x12a>
			}else if(!A0 && A1){
 186:	80 e2       	ldi	r24, 0x20	; 32
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	81 70       	andi	r24, 0x01	; 1
 194:	99 27       	eor	r25, r25
 196:	89 2b       	or	r24, r25
 198:	89 f0       	breq	.+34     	; 0x1bc <TickFct_LED+0xf0>
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	82 70       	andi	r24, 0x02	; 2
 1a8:	99 27       	eor	r25, r25
 1aa:	89 2b       	or	r24, r25
 1ac:	39 f4       	brne	.+14     	; 0x1bc <TickFct_LED+0xf0>
			LA_State = decrement;
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ba:	1d c0       	rjmp	.+58     	; 0x1f6 <TickFct_LED+0x12a>
			}else if(A0 && A1){
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	88 2f       	mov	r24, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	81 70       	andi	r24, 0x01	; 1
 1ca:	99 27       	eor	r25, r25
 1cc:	89 2b       	or	r24, r25
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <TickFct_LED+0x106>
 1d0:	a8 c0       	rjmp	.+336    	; 0x322 <TickFct_LED+0x256>
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	82 70       	andi	r24, 0x02	; 2
 1e0:	99 27       	eor	r25, r25
 1e2:	89 2b       	or	r24, r25
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <TickFct_LED+0x11c>
 1e6:	9d c0       	rjmp	.+314    	; 0x322 <TickFct_LED+0x256>
			LA_State = reset;
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		break;
 1f4:	96 c0       	rjmp	.+300    	; 0x322 <TickFct_LED+0x256>
 1f6:	95 c0       	rjmp	.+298    	; 0x322 <TickFct_LED+0x256>
		
		case increment:
		LA_State = wait;
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 204:	93 c0       	rjmp	.+294    	; 0x32c <TickFct_LED+0x260>
		
		case decrement:
		LA_State = wait1;
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 212:	8c c0       	rjmp	.+280    	; 0x32c <TickFct_LED+0x260>
		
		case wait:
		if(A0 && A1){
 214:	80 e2       	ldi	r24, 0x20	; 32
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	80 81       	ld	r24, Z
 21c:	88 2f       	mov	r24, r24
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	81 70       	andi	r24, 0x01	; 1
 222:	99 27       	eor	r25, r25
 224:	89 2b       	or	r24, r25
 226:	89 f4       	brne	.+34     	; 0x24a <TickFct_LED+0x17e>
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	80 81       	ld	r24, Z
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	82 70       	andi	r24, 0x02	; 2
 236:	99 27       	eor	r25, r25
 238:	89 2b       	or	r24, r25
 23a:	39 f4       	brne	.+14     	; 0x24a <TickFct_LED+0x17e>
			LA_State = reset;
 23c:	87 e0       	ldi	r24, 0x07	; 7
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}else if(!A0 ){ //&& !A1
			LA_State = check;
			}else if (A0 ){//&& !A1
			LA_State = wait;
		}
		break;
 248:	6e c0       	rjmp	.+220    	; 0x326 <TickFct_LED+0x25a>
		break;
		
		case wait:
		if(A0 && A1){
			LA_State = reset;
			}else if(!A0 ){ //&& !A1
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	81 70       	andi	r24, 0x01	; 1
 258:	99 27       	eor	r25, r25
 25a:	89 2b       	or	r24, r25
 25c:	39 f0       	breq	.+14     	; 0x26c <TickFct_LED+0x1a0>
			LA_State = check;
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 266:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}else if (A0 ){//&& !A1
			LA_State = wait;
		}
		break;
 26a:	5d c0       	rjmp	.+186    	; 0x326 <TickFct_LED+0x25a>
		case wait:
		if(A0 && A1){
			LA_State = reset;
			}else if(!A0 ){ //&& !A1
			LA_State = check;
			}else if (A0 ){//&& !A1
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	80 81       	ld	r24, Z
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	99 27       	eor	r25, r25
 27c:	89 2b       	or	r24, r25
 27e:	09 f0       	breq	.+2      	; 0x282 <TickFct_LED+0x1b6>
 280:	52 c0       	rjmp	.+164    	; 0x326 <TickFct_LED+0x25a>
			LA_State = wait;
 282:	85 e0       	ldi	r24, 0x05	; 5
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		break;
 28e:	4b c0       	rjmp	.+150    	; 0x326 <TickFct_LED+0x25a>
		
		case wait1:
		if(A0 && A1){
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	88 2f       	mov	r24, r24
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	99 27       	eor	r25, r25
 2a0:	89 2b       	or	r24, r25
 2a2:	89 f4       	brne	.+34     	; 0x2c6 <TickFct_LED+0x1fa>
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	88 2f       	mov	r24, r24
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	82 70       	andi	r24, 0x02	; 2
 2b2:	99 27       	eor	r25, r25
 2b4:	89 2b       	or	r24, r25
 2b6:	39 f4       	brne	.+14     	; 0x2c6 <TickFct_LED+0x1fa>
			LA_State = reset;
 2b8:	87 e0       	ldi	r24, 0x07	; 7
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}else if(!A1){
			LA_State = check;
			}else if(A1){
			LA_State = wait1;
		}
		break;
 2c4:	32 c0       	rjmp	.+100    	; 0x32a <TickFct_LED+0x25e>
		break;
		
		case wait1:
		if(A0 && A1){
			LA_State = reset;
			}else if(!A1){
 2c6:	80 e2       	ldi	r24, 0x20	; 32
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	80 81       	ld	r24, Z
 2ce:	88 2f       	mov	r24, r24
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	82 70       	andi	r24, 0x02	; 2
 2d4:	99 27       	eor	r25, r25
 2d6:	89 2b       	or	r24, r25
 2d8:	39 f0       	breq	.+14     	; 0x2e8 <TickFct_LED+0x21c>
			LA_State = check;
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}else if(A1){
			LA_State = wait1;
		}
		break;
 2e6:	21 c0       	rjmp	.+66     	; 0x32a <TickFct_LED+0x25e>
		case wait1:
		if(A0 && A1){
			LA_State = reset;
			}else if(!A1){
			LA_State = check;
			}else if(A1){
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 70       	andi	r24, 0x02	; 2
 2f6:	99 27       	eor	r25, r25
 2f8:	89 2b       	or	r24, r25
 2fa:	b9 f4       	brne	.+46     	; 0x32a <TickFct_LED+0x25e>
			LA_State = wait1;
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		break;
 308:	10 c0       	rjmp	.+32     	; 0x32a <TickFct_LED+0x25e>
		
		case reset:
		LA_State = check;
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 316:	0a c0       	rjmp	.+20     	; 0x32c <TickFct_LED+0x260>

		default:
		LA_State = LA_SMStart;
 318:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 31c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
 320:	05 c0       	rjmp	.+10     	; 0x32c <TickFct_LED+0x260>
			}else if(!A0 && A1){
			LA_State = decrement;
			}else if(A0 && A1){
			LA_State = reset;
		}
		break;
 322:	00 00       	nop
 324:	03 c0       	rjmp	.+6      	; 0x32c <TickFct_LED+0x260>
			}else if(!A0 ){ //&& !A1
			LA_State = check;
			}else if (A0 ){//&& !A1
			LA_State = wait;
		}
		break;
 326:	00 00       	nop
 328:	01 c0       	rjmp	.+2      	; 0x32c <TickFct_LED+0x260>
			}else if(!A1){
			LA_State = check;
			}else if(A1){
			LA_State = wait1;
		}
		break;
 32a:	00 00       	nop
		default:
		LA_State = LA_SMStart;
		break;
	} // Transitions

	switch(LA_State) {   // State actions
 32c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 330:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 334:	cc 01       	movw	r24, r24
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	26 e0       	ldi	r18, 0x06	; 6
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	84 1b       	sub	r24, r20
 344:	95 0b       	sbc	r25, r21
 346:	28 17       	cp	r18, r24
 348:	39 07       	cpc	r19, r25
 34a:	78 f1       	brcs	.+94     	; 0x3aa <TickFct_LED+0x2de>
 34c:	82 5b       	subi	r24, 0xB2	; 178
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	fc 01       	movw	r30, r24
 352:	57 c0       	rjmp	.+174    	; 0x402 <__tablejump2__>
		case init:
		PORTB = 0x07;
 354:	85 e2       	ldi	r24, 0x25	; 37
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	27 e0       	ldi	r18, 0x07	; 7
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
		break;
 35e:	2c c0       	rjmp	.+88     	; 0x3b8 <TickFct_LED+0x2ec>

		case check:
		break;
		
		case increment:
		if( PORTB < 9 ){
 360:	85 e2       	ldi	r24, 0x25	; 37
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	fc 01       	movw	r30, r24
 366:	80 81       	ld	r24, Z
 368:	89 30       	cpi	r24, 0x09	; 9
 36a:	18 f5       	brcc	.+70     	; 0x3b2 <TickFct_LED+0x2e6>
			PORTB = PORTB + 1;
 36c:	85 e2       	ldi	r24, 0x25	; 37
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	25 e2       	ldi	r18, 0x25	; 37
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	f9 01       	movw	r30, r18
 376:	20 81       	ld	r18, Z
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	fc 01       	movw	r30, r24
 37c:	20 83       	st	Z, r18
		}
		break;
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <TickFct_LED+0x2e6>
		
		case decrement:
		if( PORTB > 0 ){
 380:	85 e2       	ldi	r24, 0x25	; 37
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	fc 01       	movw	r30, r24
 386:	80 81       	ld	r24, Z
 388:	88 23       	and	r24, r24
 38a:	a9 f0       	breq	.+42     	; 0x3b6 <TickFct_LED+0x2ea>
			PORTB = PORTB - 1;
 38c:	85 e2       	ldi	r24, 0x25	; 37
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	25 e2       	ldi	r18, 0x25	; 37
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	20 81       	ld	r18, Z
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
		}
		break;
 39e:	0b c0       	rjmp	.+22     	; 0x3b6 <TickFct_LED+0x2ea>
		
		case wait1:
		break;
		
		case reset:
		PORTB = 0x00;
 3a0:	85 e2       	ldi	r24, 0x25	; 37
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	fc 01       	movw	r30, r24
 3a6:	10 82       	st	Z, r1
		break;
 3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <TickFct_LED+0x2ec>

		default:
		break;
 3aa:	00 00       	nop
 3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <TickFct_LED+0x2ec>
		case init:
		PORTB = 0x07;
		break;

		case check:
		break;
 3ae:	00 00       	nop
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <TickFct_LED+0x2ec>
		
		case increment:
		if( PORTB < 9 ){
			PORTB = PORTB + 1;
		}
		break;
 3b2:	00 00       	nop
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <TickFct_LED+0x2ec>
		
		case decrement:
		if( PORTB > 0 ){
			PORTB = PORTB - 1;
		}
		break;
 3b6:	00 00       	nop
		break;

		default:
		break;
	} // State actions
}
 3b8:	00 00       	nop
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <main>:

int main(void) {
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x00; PORTA=0xFF;
 3c8:	81 e2       	ldi	r24, 0x21	; 33
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	10 82       	st	Z, r1
 3d0:	82 e2       	ldi	r24, 0x22	; 34
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	2f ef       	ldi	r18, 0xFF	; 255
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 83       	st	Z, r18
	DDRB=0xFF; PORTB=0x00;
 3da:	84 e2       	ldi	r24, 0x24	; 36
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	85 e2       	ldi	r24, 0x25	; 37
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	fc 01       	movw	r30, r24
 3ea:	10 82       	st	Z, r1
	PORTB = 0x07;              // Initialize outputs
 3ec:	85 e2       	ldi	r24, 0x25	; 37
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	27 e0       	ldi	r18, 0x07	; 7
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
	
	LA_State = LA_SMStart; // Indicates initial call
 3f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 3fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	while(1) {
		TickFct_LED();
 3fe:	66 de       	rcall	.-820    	; 0xcc <TickFct_LED>
	}
 400:	fe cf       	rjmp	.-4      	; 0x3fe <main+0x3e>

00000402 <__tablejump2__>:
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	00 24       	eor	r0, r0
 408:	00 1c       	adc	r0, r0
 40a:	0b be       	out	0x3b, r0	; 59
 40c:	07 90       	elpm	r0, Z+
 40e:	f6 91       	elpm	r31, Z
 410:	e0 2d       	mov	r30, r0
 412:	09 94       	ijmp

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
