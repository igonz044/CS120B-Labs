
igonz044_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000863  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032b  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	db d0       	rcall	.+438    	; 0x260 <main>
  aa:	f6 c0       	rjmp	.+492    	; 0x298 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
unsigned char GetBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
}
*/
void tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch(state)//Transitions
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	89 f1       	breq	.+98     	; 0x126 <tick+0x78>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 05       	cpc	r25, r1
  c8:	20 f0       	brcs	.+8      	; 0xd2 <tick+0x24>
  ca:	02 97       	sbiw	r24, 0x02	; 2
  cc:	09 f4       	brne	.+2      	; 0xd0 <tick+0x22>
  ce:	7d c0       	rjmp	.+250    	; 0x1ca <tick+0x11c>
			state = Unlocked;
		}
		break;

		default: 
		break;
  d0:	a6 c0       	rjmp	.+332    	; 0x21e <tick+0x170>
void tick()
{
	switch(state)//Transitions
	{
		case Locked:
			if(A2 && !A0 && !A1)
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	84 70       	andi	r24, 0x04	; 4
  e0:	99 27       	eor	r25, r25
  e2:	89 2b       	or	r24, r25
  e4:	d9 f0       	breq	.+54     	; 0x11c <tick+0x6e>
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	81 70       	andi	r24, 0x01	; 1
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	89 f4       	brne	.+34     	; 0x11c <tick+0x6e>
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	80 81       	ld	r24, Z
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	82 70       	andi	r24, 0x02	; 2
 108:	99 27       	eor	r25, r25
 10a:	89 2b       	or	r24, r25
 10c:	39 f4       	brne	.+14     	; 0x11c <tick+0x6e>
			{
				state = Wait;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Locked;
			}
		break;
 11a:	81 c0       	rjmp	.+258    	; 0x21e <tick+0x170>
			{
				state = Wait;
			}
			else
			{
				state = Locked;
 11c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
		break;
 124:	7c c0       	rjmp	.+248    	; 0x21e <tick+0x170>
		
		case Wait:
			if(A1 && !A0 && !A2)
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	82 70       	andi	r24, 0x02	; 2
 134:	99 27       	eor	r25, r25
 136:	89 2b       	or	r24, r25
 138:	d9 f0       	breq	.+54     	; 0x170 <tick+0xc2>
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	88 2f       	mov	r24, r24
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	81 70       	andi	r24, 0x01	; 1
 148:	99 27       	eor	r25, r25
 14a:	89 2b       	or	r24, r25
 14c:	89 f4       	brne	.+34     	; 0x170 <tick+0xc2>
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	80 81       	ld	r24, Z
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	84 70       	andi	r24, 0x04	; 4
 15c:	99 27       	eor	r25, r25
 15e:	89 2b       	or	r24, r25
 160:	39 f4       	brne	.+14     	; 0x170 <tick+0xc2>
			{
				state = Unlocked;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16e:	2c c0       	rjmp	.+88     	; 0x1c8 <tick+0x11a>
			}
			else if(!A1 && !A0 && !A2)
 170:	80 e2       	ldi	r24, 0x20	; 32
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	82 70       	andi	r24, 0x02	; 2
 17e:	99 27       	eor	r25, r25
 180:	89 2b       	or	r24, r25
 182:	d9 f4       	brne	.+54     	; 0x1ba <tick+0x10c>
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	80 81       	ld	r24, Z
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	81 70       	andi	r24, 0x01	; 1
 192:	99 27       	eor	r25, r25
 194:	89 2b       	or	r24, r25
 196:	89 f4       	brne	.+34     	; 0x1ba <tick+0x10c>
 198:	80 e2       	ldi	r24, 0x20	; 32
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	80 81       	ld	r24, Z
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	84 70       	andi	r24, 0x04	; 4
 1a6:	99 27       	eor	r25, r25
 1a8:	89 2b       	or	r24, r25
 1aa:	39 f4       	brne	.+14     	; 0x1ba <tick+0x10c>
			{
				state = Wait;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <tick+0x11a>
			}
			else
			{
				state = Wait;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		break;
 1c6:	2b c0       	rjmp	.+86     	; 0x21e <tick+0x170>
 1c8:	2a c0       	rjmp	.+84     	; 0x21e <tick+0x170>
		
		case Unlocked://opens vault
		if(A0 && A1 && A2)// to lock it back up
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	99 27       	eor	r25, r25
 1da:	89 2b       	or	r24, r25
 1dc:	c9 f0       	breq	.+50     	; 0x210 <tick+0x162>
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	82 70       	andi	r24, 0x02	; 2
 1ec:	99 27       	eor	r25, r25
 1ee:	89 2b       	or	r24, r25
 1f0:	79 f0       	breq	.+30     	; 0x210 <tick+0x162>
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	84 70       	andi	r24, 0x04	; 4
 200:	99 27       	eor	r25, r25
 202:	89 2b       	or	r24, r25
 204:	29 f0       	breq	.+10     	; 0x210 <tick+0x162>
		{
			state = Locked;
 206:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 20a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
		else
		{
			state = Unlocked;
		}
		break;
 20e:	06 c0       	rjmp	.+12     	; 0x21c <tick+0x16e>
		{
			state = Locked;
		}
		else
		{
			state = Unlocked;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 218:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		break;
 21c:	00 00       	nop

		default: 
		break;
	}
	//////////////////////////////////////////
	switch (state) { //State Actions
 21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 222:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 05       	cpc	r25, r1
 22a:	59 f0       	breq	.+22     	; 0x242 <tick+0x194>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	91 05       	cpc	r25, r1
 230:	18 f0       	brcs	.+6      	; 0x238 <tick+0x18a>
 232:	02 97       	sbiw	r24, 0x02	; 2
 234:	59 f0       	breq	.+22     	; 0x24c <tick+0x19e>
		case Unlocked://opens vault
			PORTB = 0x01;
		break;

		default: 
		break;
 236:	10 c0       	rjmp	.+32     	; 0x258 <tick+0x1aa>
		break;
	}
	//////////////////////////////////////////
	switch (state) { //State Actions
		case Locked:
			PORTB = 0x00;
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	10 82       	st	Z, r1
		break;
 240:	0b c0       	rjmp	.+22     	; 0x258 <tick+0x1aa>
		
		case Wait:
			PORTB = 0x00;
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	fc 01       	movw	r30, r24
 248:	10 82       	st	Z, r1
		break;
 24a:	06 c0       	rjmp	.+12     	; 0x258 <tick+0x1aa>
		
		case Unlocked://opens vault
			PORTB = 0x01;
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
		break;
 256:	00 00       	nop

		default: 
		break;
	}
}
 258:	00 00       	nop
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <main>:
int main(void)
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; //inputs, 2 buttons
 268:	81 e2       	ldi	r24, 0x21	; 33
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	10 82       	st	Z, r1
 270:	82 e2       	ldi	r24, 0x22	; 34
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //outputs
 27a:	84 e2       	ldi	r24, 0x24	; 36
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	10 82       	st	Z, r1
	
	state = Locked;//initialize state
 28c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 290:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	while(1) {tick();}
 294:	0c df       	rcall	.-488    	; 0xae <tick>
 296:	fe cf       	rjmp	.-4      	; 0x294 <main+0x34>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
