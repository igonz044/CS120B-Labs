
igonz044_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000004c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000951  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000433  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  0000200d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000021bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
   6:	00 00       	nop
   8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
   a:	00 00       	nop
   c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
   e:	00 00       	nop
  10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
  12:	00 00       	nop
  14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
  16:	00 00       	nop
  18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
  1e:	00 00       	nop
  20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
  22:	00 00       	nop
  24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
  26:	00 00       	nop
  28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
  2e:	00 00       	nop
  30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
  32:	00 00       	nop
  34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
  36:	00 00       	nop
  38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
  3e:	00 00       	nop
  40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
  42:	00 00       	nop
  44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
  46:	00 00       	nop
  48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
  4e:	00 00       	nop
  50:	3d c0       	rjmp	.+122    	; 0xcc <__bad_interrupt>
  52:	00 00       	nop
  54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
  56:	00 00       	nop
  58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
  5e:	00 00       	nop
  60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
  62:	00 00       	nop
  64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
  66:	00 00       	nop
  68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
  6e:	00 00       	nop
  70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
  72:	00 00       	nop
  74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
  76:	00 00       	nop
  78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	27 c0       	rjmp	.+78     	; 0xcc <__bad_interrupt>
  7e:	00 00       	nop
  80:	25 c0       	rjmp	.+74     	; 0xcc <__bad_interrupt>
  82:	00 00       	nop
  84:	23 c0       	rjmp	.+70     	; 0xcc <__bad_interrupt>
  86:	00 00       	nop
  88:	21 c0       	rjmp	.+66     	; 0xcc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9e 00       	.word	0x009e	; ????
  8e:	a5 00       	.word	0x00a5	; ????
  90:	ac 00       	.word	0x00ac	; ????
  92:	20 01       	movw	r4, r0
  94:	27 01       	movw	r4, r14
  96:	a6 01       	movw	r20, r12
  98:	2e 01       	movw	r4, r28
  9a:	6a 01       	movw	r12, r20
  9c:	c7 01       	movw	r24, r14
  9e:	f3 01       	movw	r30, r6
  a0:	f3 01       	movw	r30, r6
  a2:	cd 01       	movw	r24, r26
  a4:	dd 01       	movw	r26, r26
  a6:	ed 01       	movw	r28, r26
  a8:	f3 01       	movw	r30, r6
  aa:	f3 01       	movw	r30, r6

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	99 d1       	rcall	.+818    	; 0x3fc <main>
  ca:	c2 c1       	rjmp	.+900    	; 0x450 <_exit>

000000cc <__bad_interrupt>:
  cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <Increment>:
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k){
	return ((x & (0x01 << k)) != 0);
}
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	1f 92       	push	r1
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	0f 90       	pop	r0
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <Decrement>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	1f 92       	push	r1
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	0f 90       	pop	r0
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <tick>:
#define A1 (~PINA & 0x02)



void tick()
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	switch (state) { //Transitions
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11a:	cc 01       	movw	r24, r24
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	27 e0       	ldi	r18, 0x07	; 7
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	84 1b       	sub	r24, r20
 12a:	95 0b       	sbc	r25, r21
 12c:	28 17       	cp	r18, r24
 12e:	39 07       	cpc	r19, r25
 130:	08 f4       	brcc	.+2      	; 0x134 <tick+0x2e>
 132:	13 c1       	rjmp	.+550    	; 0x35a <tick+0x254>
 134:	8a 5b       	subi	r24, 0xBA	; 186
 136:	9f 4f       	sbci	r25, 0xFF	; 255
 138:	fc 01       	movw	r30, r24
 13a:	81 c1       	rjmp	.+770    	; 0x43e <__tablejump2__>
		case Start:
			state = bla;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 148:	0e c1       	rjmp	.+540    	; 0x366 <tick+0x260>
case bla: 
state =Init; 
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
break; 
 156:	07 c1       	rjmp	.+526    	; 0x366 <tick+0x260>
		
		case Init:
		if(A0 && !A1)
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	81 70       	andi	r24, 0x01	; 1
 166:	99 27       	eor	r25, r25
 168:	89 2b       	or	r24, r25
 16a:	89 f4       	brne	.+34     	; 0x18e <tick+0x88>
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	82 70       	andi	r24, 0x02	; 2
 17a:	99 27       	eor	r25, r25
 17c:	89 2b       	or	r24, r25
 17e:	39 f0       	breq	.+14     	; 0x18e <tick+0x88>
         {
              state = Inc;
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 18c:	58 c0       	rjmp	.+176    	; 0x23e <tick+0x138>
              
         }
       else if(!A0 && A1)
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	88 2f       	mov	r24, r24
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	99 27       	eor	r25, r25
 19e:	89 2b       	or	r24, r25
 1a0:	89 f0       	breq	.+34     	; 0x1c4 <tick+0xbe>
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	82 70       	andi	r24, 0x02	; 2
 1b0:	99 27       	eor	r25, r25
 1b2:	89 2b       	or	r24, r25
 1b4:	39 f4       	brne	.+14     	; 0x1c4 <tick+0xbe>
         {
              state = Dec;
 1b6:	84 e0       	ldi	r24, 0x04	; 4
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1c2:	3d c0       	rjmp	.+122    	; 0x23e <tick+0x138>
               
         }

		else if(!A0 && !A1)
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	80 81       	ld	r24, Z
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	99 27       	eor	r25, r25
 1d4:	89 2b       	or	r24, r25
 1d6:	89 f0       	breq	.+34     	; 0x1fa <tick+0xf4>
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	82 70       	andi	r24, 0x02	; 2
 1e6:	99 27       	eor	r25, r25
 1e8:	89 2b       	or	r24, r25
 1ea:	39 f0       	breq	.+14     	; 0x1fa <tick+0xf4>
         {
              state = Init;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1f8:	22 c0       	rjmp	.+68     	; 0x23e <tick+0x138>
               
         }
        else if(A0 && A1)
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	80 81       	ld	r24, Z
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	81 70       	andi	r24, 0x01	; 1
 208:	99 27       	eor	r25, r25
 20a:	89 2b       	or	r24, r25
 20c:	89 f4       	brne	.+34     	; 0x230 <tick+0x12a>
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	fc 01       	movw	r30, r24
 214:	80 81       	ld	r24, Z
 216:	88 2f       	mov	r24, r24
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	82 70       	andi	r24, 0x02	; 2
 21c:	99 27       	eor	r25, r25
 21e:	89 2b       	or	r24, r25
 220:	39 f4       	brne	.+14     	; 0x230 <tick+0x12a>
         {
              state = Reset;
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 22e:	07 c0       	rjmp	.+14     	; 0x23e <tick+0x138>
              
         }
        else{state = Init;}
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 238:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        break;
 23c:	94 c0       	rjmp	.+296    	; 0x366 <tick+0x260>
 23e:	93 c0       	rjmp	.+294    	; 0x366 <tick+0x260>

        case Inc:
          state = Wait1; 
 240:	86 e0       	ldi	r24, 0x06	; 6
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 248:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        break;
 24c:	8c c0       	rjmp	.+280    	; 0x366 <tick+0x260>
        
        case Dec:
           state = Wait2; 
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        break;
 25a:	85 c0       	rjmp	.+266    	; 0x366 <tick+0x260>
        
        case Wait1://check if buttons have been released
            //not pressed, count stays the same
if(A0 && A1)
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	fc 01       	movw	r30, r24
 262:	80 81       	ld	r24, Z
 264:	88 2f       	mov	r24, r24
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	99 27       	eor	r25, r25
 26c:	89 2b       	or	r24, r25
 26e:	81 f4       	brne	.+32     	; 0x290 <tick+0x18a>
 270:	80 e2       	ldi	r24, 0x20	; 32
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	82 70       	andi	r24, 0x02	; 2
 27e:	99 27       	eor	r25, r25
 280:	89 2b       	or	r24, r25
 282:	31 f4       	brne	.+12     	; 0x290 <tick+0x18a>
         {
              state = Reset;
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 28c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
              
         }
        if (A0){state = Wait1;}
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	88 2f       	mov	r24, r24
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	81 70       	andi	r24, 0x01	; 1
 29e:	99 27       	eor	r25, r25
 2a0:	89 2b       	or	r24, r25
 2a2:	31 f4       	brne	.+12     	; 0x2b0 <tick+0x1aa>
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        if (!A0){state = Init; }
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	88 2f       	mov	r24, r24
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	81 70       	andi	r24, 0x01	; 1
 2be:	99 27       	eor	r25, r25
 2c0:	89 2b       	or	r24, r25
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <tick+0x1c0>
 2c4:	4f c0       	rjmp	.+158    	; 0x364 <tick+0x25e>
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        break;
 2d2:	48 c0       	rjmp	.+144    	; 0x364 <tick+0x25e>

        case Wait2:
if(A0 && A1)
 2d4:	80 e2       	ldi	r24, 0x20	; 32
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	99 27       	eor	r25, r25
 2e4:	89 2b       	or	r24, r25
 2e6:	89 f4       	brne	.+34     	; 0x30a <tick+0x204>
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 70       	andi	r24, 0x02	; 2
 2f6:	99 27       	eor	r25, r25
 2f8:	89 2b       	or	r24, r25
 2fa:	39 f4       	brne	.+14     	; 0x30a <tick+0x204>
         {
              state = Reset;
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 308:	21 c0       	rjmp	.+66     	; 0x34c <tick+0x246>
              
         }
            else if (A1)
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	fc 01       	movw	r30, r24
 310:	80 81       	ld	r24, Z
 312:	88 2f       	mov	r24, r24
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	82 70       	andi	r24, 0x02	; 2
 318:	99 27       	eor	r25, r25
 31a:	89 2b       	or	r24, r25
 31c:	39 f4       	brne	.+14     	; 0x32c <tick+0x226>
            {state = Wait2;}
 31e:	87 e0       	ldi	r24, 0x07	; 7
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 32a:	10 c0       	rjmp	.+32     	; 0x34c <tick+0x246>
else if (!A1)
 32c:	80 e2       	ldi	r24, 0x20	; 32
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	80 81       	ld	r24, Z
 334:	88 2f       	mov	r24, r24
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	82 70       	andi	r24, 0x02	; 2
 33a:	99 27       	eor	r25, r25
 33c:	89 2b       	or	r24, r25
 33e:	31 f0       	breq	.+12     	; 0x34c <tick+0x246>
{state = Init; }
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 348:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        
        case Reset:
         state = Init; 
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 354:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        break;
 358:	06 c0       	rjmp	.+12     	; 0x366 <tick+0x260>

		default:
state = Start; 
 35a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 35e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
 362:	01 c0       	rjmp	.+2      	; 0x366 <tick+0x260>
              state = Reset;
              
         }
        if (A0){state = Wait1;}
        if (!A0){state = Init; }
        break;
 364:	00 00       	nop
		default:
state = Start; 
		break;
	}
	
	switch (state) { //State Actions
 366:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 36a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 36e:	cc 01       	movw	r24, r24
 370:	a0 e0       	ldi	r26, 0x00	; 0
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	27 e0       	ldi	r18, 0x07	; 7
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	84 1b       	sub	r24, r20
 37e:	95 0b       	sbc	r25, r21
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	80 f1       	brcs	.+96     	; 0x3e6 <tick+0x2e0>
 386:	82 5b       	subi	r24, 0xB2	; 178
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	fc 01       	movw	r30, r24
 38c:	58 c0       	rjmp	.+176    	; 0x43e <__tablejump2__>
		case Start:
		    PORTB = 0x07; 
 38e:	85 e2       	ldi	r24, 0x25	; 37
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	27 e0       	ldi	r18, 0x07	; 7
 394:	fc 01       	movw	r30, r24
 396:	20 83       	st	Z, r18
        break;
 398:	2b c0       	rjmp	.+86     	; 0x3f0 <tick+0x2ea>
				
		case Init:
			break;

		case Inc:
            if(PORTB<9)
 39a:	85 e2       	ldi	r24, 0x25	; 37
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	fc 01       	movw	r30, r24
 3a0:	80 81       	ld	r24, Z
 3a2:	89 30       	cpi	r24, 0x09	; 9
 3a4:	10 f5       	brcc	.+68     	; 0x3ea <tick+0x2e4>
             PORTB= Increment(PORTB); break;
 3a6:	05 e2       	ldi	r16, 0x25	; 37
 3a8:	10 e0       	ldi	r17, 0x00	; 0
 3aa:	85 e2       	ldi	r24, 0x25	; 37
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	8d de       	rcall	.-742    	; 0xce <Increment>
 3b4:	f8 01       	movw	r30, r16
 3b6:	80 83       	st	Z, r24
 3b8:	18 c0       	rjmp	.+48     	; 0x3ea <tick+0x2e4>
		
		case Dec:
             if(PORTB>0)
 3ba:	85 e2       	ldi	r24, 0x25	; 37
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	fc 01       	movw	r30, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	88 23       	and	r24, r24
 3c4:	a1 f0       	breq	.+40     	; 0x3ee <tick+0x2e8>
               PORTB =Decrement(PORTB) ; break;
 3c6:	05 e2       	ldi	r16, 0x25	; 37
 3c8:	10 e0       	ldi	r17, 0x00	; 0
 3ca:	85 e2       	ldi	r24, 0x25	; 37
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	8b de       	rcall	.-746    	; 0xea <Decrement>
 3d4:	f8 01       	movw	r30, r16
 3d6:	80 83       	st	Z, r24
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <tick+0x2e8>
case Wait1: break;
case Wait2: break;
		
		case Reset:
		    PORTB = 0x07; break;
 3da:	85 e2       	ldi	r24, 0x25	; 37
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	27 e0       	ldi	r18, 0x07	; 7
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <tick+0x2ea>

		default:
		break;	
 3e6:	00 00       	nop
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <tick+0x2ea>
		case Init:
			break;

		case Inc:
            if(PORTB<9)
             PORTB= Increment(PORTB); break;
 3ea:	00 00       	nop
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <tick+0x2ea>
		
		case Dec:
             if(PORTB>0)
               PORTB =Decrement(PORTB) ; break;
 3ee:	00 00       	nop
		    PORTB = 0x07; break;

		default:
		break;	
	}
}
 3f0:	00 00       	nop
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <main>:
int main(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; //inputs, 2 buttons
 404:	81 e2       	ldi	r24, 0x21	; 33
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	10 82       	st	Z, r1
 40c:	82 e2       	ldi	r24, 0x22	; 34
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //outputs 
 416:	84 e2       	ldi	r24, 0x24	; 36
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
 420:	85 e2       	ldi	r24, 0x25	; 37
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	10 82       	st	Z, r1
	PORTB = 0x07;
 428:	85 e2       	ldi	r24, 0x25	; 37
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	27 e0       	ldi	r18, 0x07	; 7
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
	state = Start;//initialize state
 432:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 436:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	
 	while(1) { tick(); }
 43a:	65 de       	rcall	.-822    	; 0x106 <tick>
 43c:	fe cf       	rjmp	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

0000043e <__tablejump2__>:
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	00 24       	eor	r0, r0
 444:	00 1c       	adc	r0, r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	07 90       	elpm	r0, Z+
 44a:	f6 91       	elpm	r31, Z
 44c:	e0 2d       	mov	r30, r0
 44e:	09 94       	ijmp

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
