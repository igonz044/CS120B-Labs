
igonz044_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000066e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000945  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ad  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  00002312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8a d2       	rcall	.+1300   	; 0x5be <main>
  aa:	a5 c2       	rjmp	.+1354   	; 0x5f6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <GetBit>:
unsigned char Decrement(unsigned char x){ return x -= 1;}

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <GetBit+0x6>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	88 2f       	mov	r24, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2a 81       	ldd	r18, Y+2	; 0x02
  c4:	22 2f       	mov	r18, r18
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <GetBit+0x20>
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	2a 95       	dec	r18
  d0:	e2 f7       	brpl	.-8      	; 0xca <GetBit+0x1c>
  d2:	81 70       	andi	r24, 0x01	; 1
  d4:	99 27       	eor	r25, r25
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	89 2b       	or	r24, r25
  da:	09 f4       	brne	.+2      	; 0xde <GetBit+0x30>
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	82 2f       	mov	r24, r18
}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <tick>:


void tick()
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
 	switch (state) { //Transitions
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	91 05       	cpc	r25, r1
  fe:	09 f4       	brne	.+2      	; 0x102 <tick+0x18>
 100:	c1 c0       	rjmp	.+386    	; 0x284 <tick+0x19a>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	91 05       	cpc	r25, r1
 106:	30 f4       	brcc	.+12     	; 0x114 <tick+0x2a>
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	81 f0       	breq	.+32     	; 0x12c <tick+0x42>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	09 f4       	brne	.+2      	; 0x112 <tick+0x28>
 110:	62 c0       	rjmp	.+196    	; 0x1d6 <tick+0xec>
				state = Reset;
			}
        break;

		default:
		break;
 112:	14 c2       	rjmp	.+1064   	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
}


void tick()
{
 	switch (state) { //Transitions
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	91 05       	cpc	r25, r1
 118:	09 f4       	brne	.+2      	; 0x11c <tick+0x32>
 11a:	0b c1       	rjmp	.+534    	; 0x332 <tick+0x248>
 11c:	84 30       	cpi	r24, 0x04	; 4
 11e:	91 05       	cpc	r25, r1
 120:	08 f4       	brcc	.+2      	; 0x124 <tick+0x3a>
 122:	b5 c1       	rjmp	.+874    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 124:	05 97       	sbiw	r24, 0x05	; 5
 126:	09 f4       	brne	.+2      	; 0x12a <tick+0x40>
 128:	5b c1       	rjmp	.+694    	; 0x3e0 <tick+0x2f6>
				state = Reset;
			}
        break;

		default:
		break;
 12a:	08 c2       	rjmp	.+1040   	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
void tick()
{
 	switch (state) { //Transitions
		case Init:
		//In this state you can dec, incr, or reset from here
			if(GetBit(PINA, 0) && !GetBit(PINA, 1) && PORTB <= 0x09)
 12c:	80 e2       	ldi	r24, 0x20	; 32
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	bb df       	rcall	.-138    	; 0xae <GetBit>
 138:	88 23       	and	r24, r24
 13a:	a9 f0       	breq	.+42     	; 0x166 <tick+0x7c>
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	b3 df       	rcall	.-154    	; 0xae <GetBit>
 148:	88 23       	and	r24, r24
 14a:	69 f4       	brne	.+26     	; 0x166 <tick+0x7c>
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	38 f4       	brcc	.+14     	; 0x166 <tick+0x7c>
			{
				state = Inc;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 164:	37 c0       	rjmp	.+110    	; 0x1d4 <tick+0xea>
			}
			else if(GetBit(PINA, 1) && !GetBit(PINA, 0) && PORTB >= 0x00)
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	9e df       	rcall	.-196    	; 0xae <GetBit>
 172:	88 23       	and	r24, r24
 174:	99 f0       	breq	.+38     	; 0x19c <tick+0xb2>
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	fc 01       	movw	r30, r24
 17c:	80 81       	ld	r24, Z
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	96 df       	rcall	.-212    	; 0xae <GetBit>
 182:	88 23       	and	r24, r24
 184:	59 f4       	brne	.+22     	; 0x19c <tick+0xb2>
 186:	85 e2       	ldi	r24, 0x25	; 37
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	80 81       	ld	r24, Z
			{
				state = Dec;
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 19a:	1c c0       	rjmp	.+56     	; 0x1d4 <tick+0xea>
			}
			else if(GetBit(PINA, 0) && GetBit(PINA, 1))
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	83 df       	rcall	.-250    	; 0xae <GetBit>
 1a8:	88 23       	and	r24, r24
 1aa:	79 f0       	breq	.+30     	; 0x1ca <tick+0xe0>
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	80 81       	ld	r24, Z
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	7b df       	rcall	.-266    	; 0xae <GetBit>
 1b8:	88 23       	and	r24, r24
 1ba:	39 f0       	breq	.+14     	; 0x1ca <tick+0xe0>
			{
				state = Reset;
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <tick+0xea>
			}
			else
			{
				state = Init;
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
		break;
 1d2:	b4 c1       	rjmp	.+872    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        
        case Inc:
			if(GetBit(PINA, 0) && !GetBit(PINA, 1) && PORTB <= 0x09)
 1d4:	b3 c1       	rjmp	.+870    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 1d6:	80 e2       	ldi	r24, 0x20	; 32
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	66 df       	rcall	.-308    	; 0xae <GetBit>
 1e2:	88 23       	and	r24, r24
 1e4:	a9 f0       	breq	.+42     	; 0x210 <tick+0x126>
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	5e df       	rcall	.-324    	; 0xae <GetBit>
 1f2:	88 23       	and	r24, r24
 1f4:	69 f4       	brne	.+26     	; 0x210 <tick+0x126>
 1f6:	85 e2       	ldi	r24, 0x25	; 37
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	fc 01       	movw	r30, r24
 1fc:	80 81       	ld	r24, Z
 1fe:	8a 30       	cpi	r24, 0x0A	; 10
 200:	38 f4       	brcc	.+14     	; 0x210 <tick+0x126>
			{
				state = Stay;
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 1) && !GetBit(PINA, 0) && PORTB >= 0x00)
 20e:	39 c0       	rjmp	.+114    	; 0x282 <tick+0x198>
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	80 81       	ld	r24, Z
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	49 df       	rcall	.-366    	; 0xae <GetBit>
 21c:	88 23       	and	r24, r24
 21e:	99 f0       	breq	.+38     	; 0x246 <tick+0x15c>
 220:	80 e2       	ldi	r24, 0x20	; 32
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	80 81       	ld	r24, Z
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	41 df       	rcall	.-382    	; 0xae <GetBit>
 22c:	88 23       	and	r24, r24
 22e:	59 f4       	brne	.+22     	; 0x246 <tick+0x15c>
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	fc 01       	movw	r30, r24
 236:	80 81       	ld	r24, Z
			{
				state = Dec;
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 0) && GetBit(PINA, 1))
 244:	1e c0       	rjmp	.+60     	; 0x282 <tick+0x198>
 246:	80 e2       	ldi	r24, 0x20	; 32
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	2e df       	rcall	.-420    	; 0xae <GetBit>
 252:	88 23       	and	r24, r24
 254:	79 f0       	breq	.+30     	; 0x274 <tick+0x18a>
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	26 df       	rcall	.-436    	; 0xae <GetBit>
 262:	88 23       	and	r24, r24
 264:	39 f0       	breq	.+14     	; 0x274 <tick+0x18a>
			{
				state = Reset;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 272:	07 c0       	rjmp	.+14     	; 0x282 <tick+0x198>
			}
			else
			{
				state = Stay;
 274:	84 e0       	ldi	r24, 0x04	; 4
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
        break;
 280:	5d c1       	rjmp	.+698    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        
        case Dec:
			if(GetBit(PINA, 0) && !GetBit(PINA, 1) && PORTB <= 0x09)
 282:	5c c1       	rjmp	.+696    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	0f df       	rcall	.-482    	; 0xae <GetBit>
 290:	88 23       	and	r24, r24
 292:	a9 f0       	breq	.+42     	; 0x2be <tick+0x1d4>
 294:	80 e2       	ldi	r24, 0x20	; 32
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	fc 01       	movw	r30, r24
 29a:	80 81       	ld	r24, Z
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	07 df       	rcall	.-498    	; 0xae <GetBit>
 2a0:	88 23       	and	r24, r24
 2a2:	69 f4       	brne	.+26     	; 0x2be <tick+0x1d4>
 2a4:	85 e2       	ldi	r24, 0x25	; 37
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	80 81       	ld	r24, Z
 2ac:	8a 30       	cpi	r24, 0x0A	; 10
			{
				state = Inc;
 2ae:	38 f4       	brcc	.+14     	; 0x2be <tick+0x1d4>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 1) && !GetBit(PINA, 0) && PORTB >= 0x00)
 2bc:	39 c0       	rjmp	.+114    	; 0x330 <tick+0x246>
 2be:	80 e2       	ldi	r24, 0x20	; 32
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	f2 de       	rcall	.-540    	; 0xae <GetBit>
 2ca:	88 23       	and	r24, r24
 2cc:	99 f0       	breq	.+38     	; 0x2f4 <tick+0x20a>
 2ce:	80 e2       	ldi	r24, 0x20	; 32
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	80 81       	ld	r24, Z
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	ea de       	rcall	.-556    	; 0xae <GetBit>
 2da:	88 23       	and	r24, r24
 2dc:	59 f4       	brne	.+22     	; 0x2f4 <tick+0x20a>
 2de:	85 e2       	ldi	r24, 0x25	; 37
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
			{
				state = Stay2;
 2e4:	80 81       	ld	r24, Z
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 0) && GetBit(PINA, 1))
 2f2:	1e c0       	rjmp	.+60     	; 0x330 <tick+0x246>
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	d7 de       	rcall	.-594    	; 0xae <GetBit>
 300:	88 23       	and	r24, r24
 302:	79 f0       	breq	.+30     	; 0x322 <tick+0x238>
 304:	80 e2       	ldi	r24, 0x20	; 32
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	cf de       	rcall	.-610    	; 0xae <GetBit>
 310:	88 23       	and	r24, r24
 312:	39 f0       	breq	.+14     	; 0x322 <tick+0x238>
			{
				state = Reset;
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 31c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Stay2;
 320:	07 c0       	rjmp	.+14     	; 0x330 <tick+0x246>
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
			}
        break;
 32a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
        
        case Stay:
			if(GetBit(PINA, 0) && !GetBit(PINA, 1) && PORTB <= 0x09)
 32e:	06 c1       	rjmp	.+524    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 330:	05 c1       	rjmp	.+522    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 332:	80 e2       	ldi	r24, 0x20	; 32
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	fc 01       	movw	r30, r24
 338:	80 81       	ld	r24, Z
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	b8 de       	rcall	.-656    	; 0xae <GetBit>
 33e:	88 23       	and	r24, r24
 340:	a9 f0       	breq	.+42     	; 0x36c <tick+0x282>
 342:	80 e2       	ldi	r24, 0x20	; 32
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	80 81       	ld	r24, Z
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	b0 de       	rcall	.-672    	; 0xae <GetBit>
 34e:	88 23       	and	r24, r24
 350:	69 f4       	brne	.+26     	; 0x36c <tick+0x282>
 352:	85 e2       	ldi	r24, 0x25	; 37
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	fc 01       	movw	r30, r24
 358:	80 81       	ld	r24, Z
 35a:	8a 30       	cpi	r24, 0x0A	; 10
			{
				state = Stay;
 35c:	38 f4       	brcc	.+14     	; 0x36c <tick+0x282>
 35e:	84 e0       	ldi	r24, 0x04	; 4
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 366:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 1) && !GetBit(PINA, 0) && PORTB >= 0x00)
 36a:	39 c0       	rjmp	.+114    	; 0x3de <tick+0x2f4>
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	9b de       	rcall	.-714    	; 0xae <GetBit>
 378:	88 23       	and	r24, r24
 37a:	99 f0       	breq	.+38     	; 0x3a2 <tick+0x2b8>
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	93 de       	rcall	.-730    	; 0xae <GetBit>
 388:	88 23       	and	r24, r24
 38a:	59 f4       	brne	.+22     	; 0x3a2 <tick+0x2b8>
 38c:	85 e2       	ldi	r24, 0x25	; 37
 38e:	90 e0       	ldi	r25, 0x00	; 0
			{
				state = Dec;
 390:	fc 01       	movw	r30, r24
 392:	80 81       	ld	r24, Z
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 0) && GetBit(PINA, 1))
 3a0:	1e c0       	rjmp	.+60     	; 0x3de <tick+0x2f4>
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	fc 01       	movw	r30, r24
 3a8:	80 81       	ld	r24, Z
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	80 de       	rcall	.-768    	; 0xae <GetBit>
 3ae:	88 23       	and	r24, r24
 3b0:	79 f0       	breq	.+30     	; 0x3d0 <tick+0x2e6>
 3b2:	80 e2       	ldi	r24, 0x20	; 32
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	fc 01       	movw	r30, r24
 3b8:	80 81       	ld	r24, Z
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	78 de       	rcall	.-784    	; 0xae <GetBit>
 3be:	88 23       	and	r24, r24
			{
				state = Reset;
 3c0:	39 f0       	breq	.+14     	; 0x3d0 <tick+0x2e6>
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Stay;
 3ce:	07 c0       	rjmp	.+14     	; 0x3de <tick+0x2f4>
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
			}
        break;
 3d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		case Stay2:
			if(GetBit(PINA, 0) && !GetBit(PINA, 1) && PORTB <= 0x09)
 3dc:	af c0       	rjmp	.+350    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 3de:	ae c0       	rjmp	.+348    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	fc 01       	movw	r30, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	61 de       	rcall	.-830    	; 0xae <GetBit>
 3ec:	88 23       	and	r24, r24
 3ee:	a9 f0       	breq	.+42     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f0:	80 e2       	ldi	r24, 0x20	; 32
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	80 81       	ld	r24, Z
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	59 de       	rcall	.-846    	; 0xae <GetBit>
 3fc:	88 23       	and	r24, r24
 3fe:	69 f4       	brne	.+26     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 400:	85 e2       	ldi	r24, 0x25	; 37
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	80 81       	ld	r24, Z
			{
				state = Inc;
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	38 f4       	brcc	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 1) && !GetBit(PINA, 0) && PORTB >= 0x00)
 418:	39 c0       	rjmp	.+114    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 41a:	80 e2       	ldi	r24, 0x20	; 32
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	fc 01       	movw	r30, r24
 420:	80 81       	ld	r24, Z
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	44 de       	rcall	.-888    	; 0xae <GetBit>
 426:	88 23       	and	r24, r24
 428:	99 f0       	breq	.+38     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	80 81       	ld	r24, Z
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	3c de       	rcall	.-904    	; 0xae <GetBit>
 436:	88 23       	and	r24, r24
 438:	59 f4       	brne	.+22     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 43a:	85 e2       	ldi	r24, 0x25	; 37
 43c:	90 e0       	ldi	r25, 0x00	; 0
			{
				state = Stay2;
 43e:	fc 01       	movw	r30, r24
 440:	80 81       	ld	r24, Z
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 44a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 0) && GetBit(PINA, 1))
 44e:	1e c0       	rjmp	.+60     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 450:	80 e2       	ldi	r24, 0x20	; 32
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	fc 01       	movw	r30, r24
 456:	80 81       	ld	r24, Z
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	29 de       	rcall	.-942    	; 0xae <GetBit>
 45c:	88 23       	and	r24, r24
 45e:	79 f0       	breq	.+30     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 460:	80 e2       	ldi	r24, 0x20	; 32
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	80 81       	ld	r24, Z
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	21 de       	rcall	.-958    	; 0xae <GetBit>
			{
				state = Reset;
 46c:	88 23       	and	r24, r24
 46e:	39 f0       	breq	.+14     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 478:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else
			{
				state = Stay2;
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 47e:	85 e0       	ldi	r24, 0x05	; 5
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
			}
        break;
 486:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
        case Reset:
			if(GetBit(PINA, 0) && !GetBit(PINA, 1) && PORTB <= 0x09)
 48a:	58 c0       	rjmp	.+176    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 48c:	57 c0       	rjmp	.+174    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	fc 01       	movw	r30, r24
 494:	80 81       	ld	r24, Z
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	0a de       	rcall	.-1004   	; 0xae <GetBit>
 49a:	88 23       	and	r24, r24
 49c:	a9 f0       	breq	.+42     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 49e:	80 e2       	ldi	r24, 0x20	; 32
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	02 de       	rcall	.-1020   	; 0xae <GetBit>
 4aa:	88 23       	and	r24, r24
 4ac:	69 f4       	brne	.+26     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4ae:	85 e2       	ldi	r24, 0x25	; 37
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	fc 01       	movw	r30, r24
 4b4:	80 81       	ld	r24, Z
			{
 				state = Inc;
 4b6:	8a 30       	cpi	r24, 0x0A	; 10
 4b8:	38 f4       	brcc	.+14     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 1) && !GetBit(PINA, 0) && PORTB >= 0x00)
 4c6:	39 c0       	rjmp	.+114    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 4c8:	80 e2       	ldi	r24, 0x20	; 32
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	80 81       	ld	r24, Z
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	ed dd       	rcall	.-1062   	; 0xae <GetBit>
 4d4:	88 23       	and	r24, r24
 4d6:	99 f0       	breq	.+38     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4d8:	80 e2       	ldi	r24, 0x20	; 32
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	80 81       	ld	r24, Z
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	e5 dd       	rcall	.-1078   	; 0xae <GetBit>
 4e4:	88 23       	and	r24, r24
 4e6:	59 f4       	brne	.+22     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4e8:	85 e2       	ldi	r24, 0x25	; 37
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	fc 01       	movw	r30, r24
			{
				state = Dec;
 4ee:	80 81       	ld	r24, Z
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else if(GetBit(PINA, 0) && GetBit(PINA, 1))
 4fc:	1e c0       	rjmp	.+60     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 4fe:	80 e2       	ldi	r24, 0x20	; 32
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	fc 01       	movw	r30, r24
 504:	80 81       	ld	r24, Z
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	d2 dd       	rcall	.-1116   	; 0xae <GetBit>
 50a:	88 23       	and	r24, r24
 50c:	79 f0       	breq	.+30     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 50e:	80 e2       	ldi	r24, 0x20	; 32
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	fc 01       	movw	r30, r24
 514:	80 81       	ld	r24, Z
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	ca dd       	rcall	.-1132   	; 0xae <GetBit>
 51a:	88 23       	and	r24, r24
 51c:	39 f0       	breq	.+14     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 51e:	83 e0       	ldi	r24, 0x03	; 3
			{
				state = Reset;
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 526:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 52a:	07 c0       	rjmp	.+14     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 52c:	83 e0       	ldi	r24, 0x03	; 3
			}
			else
			{
				state = Reset;
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 534:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 538:	00 c0       	rjmp	.+0      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
			}
        break;
 53a:	00 00       	nop
 53c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>

		default:
		break;
	}
	//////////////////////////////////////////////////////
	switch (state) { //State Actions		
 540:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 544:	82 30       	cpi	r24, 0x02	; 2
 546:	91 05       	cpc	r25, r1
 548:	f1 f0       	breq	.+60     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 54a:	83 30       	cpi	r24, 0x03	; 3
 54c:	91 05       	cpc	r25, r1
 54e:	28 f4       	brcc	.+10     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 550:	00 97       	sbiw	r24, 0x00	; 0
 552:	49 f0       	breq	.+18     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	69 f0       	breq	.+26     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 558:	2e c0       	rjmp	.+92     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		case Reset:
		    PORTB = 0x00; 
			break;

		default:
		break;	
 55a:	83 30       	cpi	r24, 0x03	; 3

		default:
		break;
	}
	//////////////////////////////////////////////////////
	switch (state) { //State Actions		
 55c:	91 05       	cpc	r25, r1
 55e:	31 f1       	breq	.+76     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
 560:	04 97       	sbiw	r24, 0x04	; 4
 562:	d9 f0       	breq	.+54     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 564:	28 c0       	rjmp	.+80     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		case Reset:
		    PORTB = 0x00; 
			break;

		default:
		break;	
 566:	85 e2       	ldi	r24, 0x25	; 37
		break;
	}
	//////////////////////////////////////////////////////
	switch (state) { //State Actions		
		case Init:
			PORTB = 0x07;
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	27 e0       	ldi	r18, 0x07	; 7
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
 570:	22 c0       	rjmp	.+68     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			break;
 572:	85 e2       	ldi	r24, 0x25	; 37

		case Inc:
            PORTB = PORTB+1; 
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	25 e2       	ldi	r18, 0x25	; 37
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	f9 01       	movw	r30, r18
 57c:	20 81       	ld	r18, Z
 57e:	2f 5f       	subi	r18, 0xFF	; 255
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
 584:	18 c0       	rjmp	.+48     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			break;
 586:	85 e2       	ldi	r24, 0x25	; 37
		
		case Dec:
            PORTB = PORTB-1; 
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	25 e2       	ldi	r18, 0x25	; 37
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	f9 01       	movw	r30, r18
 590:	20 81       	ld	r18, Z
 592:	21 50       	subi	r18, 0x01	; 1
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
 598:	0e c0       	rjmp	.+28     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			break;
 59a:	85 e2       	ldi	r24, 0x25	; 37

        case Stay://do not change portB
			PORTB = PORTB;
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	25 e2       	ldi	r18, 0x25	; 37
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
 5aa:	05 c0       	rjmp	.+10     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			break;
 5ac:	85 e2       	ldi	r24, 0x25	; 37

		case Reset:
		    PORTB = 0x00; 
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	10 82       	st	Z, r1
 5b4:	00 00       	nop
			break;
 5b6:	00 00       	nop

		default:
		break;	
	}
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <main>:
 5be:	cf 93       	push	r28
int main(void)
{
 5c0:	df 93       	push	r29
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; //inputs, 2 buttons
 5c6:	81 e2       	ldi	r24, 0x21	; 33
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	fc 01       	movw	r30, r24
 5cc:	10 82       	st	Z, r1
 5ce:	82 e2       	ldi	r24, 0x22	; 34
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	2f ef       	ldi	r18, 0xFF	; 255
 5d4:	fc 01       	movw	r30, r24
 5d6:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //outputs 
 5d8:	84 e2       	ldi	r24, 0x24	; 36
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
 5e2:	85 e2       	ldi	r24, 0x25	; 37
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	fc 01       	movw	r30, r24
 5e8:	10 82       	st	Z, r1
	
	state = Init;//initialize state
 5ea:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 5ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	while(1) { tick();}
 5f2:	7b dd       	rcall	.-1290   	; 0xea <tick>
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <main+0x34>

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
