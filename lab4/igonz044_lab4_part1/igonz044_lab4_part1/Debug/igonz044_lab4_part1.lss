
igonz044_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e9  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e8  00000000  00000000  00000d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	38 d1       	rcall	.+624    	; 0x31a <main>
  aa:	53 c1       	rjmp	.+678    	; 0x352 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SetBit>:
enum States {Start, Init, PressOn, Stay, PressOff} state;
//press2, release2
//Global variables here


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <SetBit+0x6>
  b4:	1f 92       	push	r1
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	6a 83       	std	Y+2, r22	; 0x02
  be:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	88 23       	and	r24, r24
  c4:	71 f0       	breq	.+28     	; 0xe2 <SetBit+0x34>
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SetBit+0x28>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	2a 95       	dec	r18
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <SetBit+0x24>
  da:	98 2f       	mov	r25, r24
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	89 2b       	or	r24, r25
  e0:	0e c0       	rjmp	.+28     	; 0xfe <SetBit+0x50>
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <SetBit+0x44>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <SetBit+0x40>
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <GetBit+0x6>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2a 81       	ldd	r18, Y+2	; 0x02
 120:	22 2f       	mov	r18, r18
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <GetBit+0x20>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GetBit+0x1c>
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	99 27       	eor	r25, r25
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	89 2b       	or	r24, r25
 136:	09 f4       	brne	.+2      	; 0x13a <GetBit+0x30>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	82 2f       	mov	r24, r18
}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <tick>:


void tick()
{
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	switch (state) { //Transitions
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	91 05       	cpc	r25, r1
 15e:	61 f1       	breq	.+88     	; 0x1b8 <tick+0x72>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	91 05       	cpc	r25, r1
 164:	28 f4       	brcc	.+10     	; 0x170 <tick+0x2a>
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	51 f0       	breq	.+20     	; 0x17e <tick+0x38>
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	79 f0       	breq	.+30     	; 0x18c <tick+0x46>
			{ state = PressOff; }//still pressed, stay in PressOff
			else {state = Init;}//pressed, go to back to Init 
		break;
			
		default:
		break;
 16e:	66 c0       	rjmp	.+204    	; 0x23c <tick+0xf6>
}


void tick()
{
	switch (state) { //Transitions
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	91 05       	cpc	r25, r1
 174:	b9 f1       	breq	.+110    	; 0x1e4 <tick+0x9e>
 176:	04 97       	sbiw	r24, 0x04	; 4
 178:	09 f4       	brne	.+2      	; 0x17c <tick+0x36>
 17a:	4a c0       	rjmp	.+148    	; 0x210 <tick+0xca>
			{ state = PressOff; }//still pressed, stay in PressOff
			else {state = Init;}//pressed, go to back to Init 
		break;
			
		default:
		break;
 17c:	5f c0       	rjmp	.+190    	; 0x23c <tick+0xf6>

void tick()
{
	switch (state) { //Transitions
		case Start:
			state = Init;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 18a:	58 c0       	rjmp	.+176    	; 0x23c <tick+0xf6>
		
		case Init:
		//Check if button has been pressed
			if(GetBit(PINA, 0))
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	b9 df       	rcall	.-142    	; 0x10a <GetBit>
 198:	88 23       	and	r24, r24
 19a:	39 f0       	breq	.+14     	; 0x1aa <tick+0x64>
			{ state = PressOn; }//pressed, go to next state 
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Init; }//not pressed, stay in Init
		break;
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <tick+0xf6>
		
		case Init:
		//Check if button has been pressed
			if(GetBit(PINA, 0))
			{ state = PressOn; }//pressed, go to next state 
			else {state = Init; }//not pressed, stay in Init
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 1b6:	42 c0       	rjmp	.+132    	; 0x23c <tick+0xf6>
			
		case PressOn: //turn on led
			if(GetBit(PINA, 0))
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	a3 df       	rcall	.-186    	; 0x10a <GetBit>
 1c4:	88 23       	and	r24, r24
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <tick+0x90>
			{ state = PressOn; } //next state
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Stay; }//still pressed stay 
		break;
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <tick+0xf6>
		break;
			
		case PressOn: //turn on led
			if(GetBit(PINA, 0))
			{ state = PressOn; } //next state
			else {state = Stay; }//still pressed stay 
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 1e2:	2c c0       	rjmp	.+88     	; 0x23c <tick+0xf6>
			
		case Stay:
		//Check if button has been released
			if(GetBit(PINA, 0))
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	8d df       	rcall	.-230    	; 0x10a <GetBit>
 1f0:	88 23       	and	r24, r24
 1f2:	39 f0       	breq	.+14     	; 0x202 <tick+0xbc>
			{ state = PressOff; }//not pressed, LED stays on
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Stay; }//pressed, go to next state
		break;
 200:	1d c0       	rjmp	.+58     	; 0x23c <tick+0xf6>
			
		case Stay:
		//Check if button has been released
			if(GetBit(PINA, 0))
			{ state = PressOff; }//not pressed, LED stays on
			else {state = Stay; }//pressed, go to next state
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 20e:	16 c0       	rjmp	.+44     	; 0x23c <tick+0xf6>
		
		case PressOff:
		//Check if button has been pressed
			if(GetBit(PINA, 0))
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	80 81       	ld	r24, Z
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	77 df       	rcall	.-274    	; 0x10a <GetBit>
 21c:	88 23       	and	r24, r24
 21e:	39 f0       	breq	.+14     	; 0x22e <tick+0xe8>
			{ state = PressOff; }//still pressed, stay in PressOff
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else {state = Init;}//pressed, go to back to Init 
		break;
 22c:	06 c0       	rjmp	.+12     	; 0x23a <tick+0xf4>
		
		case PressOff:
		//Check if button has been pressed
			if(GetBit(PINA, 0))
			{ state = PressOff; }//still pressed, stay in PressOff
			else {state = Init;}//pressed, go to back to Init 
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 236:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 23a:	00 00       	nop
			
		default:
		break;
	}
	
	switch (state) { //State Actions
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 240:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	91 05       	cpc	r25, r1
 248:	e1 f0       	breq	.+56     	; 0x282 <tick+0x13c>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	91 05       	cpc	r25, r1
 24e:	30 f4       	brcc	.+12     	; 0x25c <tick+0x116>
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	09 f4       	brne	.+2      	; 0x256 <tick+0x110>
 254:	5b c0       	rjmp	.+182    	; 0x30c <tick+0x1c6>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	41 f0       	breq	.+16     	; 0x26a <tick+0x124>
			PORTB = SetBit(PORTB, 1, 0);
			PORTB = SetBit(PORTB, 0, 1);
		break;

		default:
		break;	
 25a:	59 c0       	rjmp	.+178    	; 0x30e <tick+0x1c8>
			
		default:
		break;
	}
	
	switch (state) { //State Actions
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	91 05       	cpc	r25, r1
 260:	39 f1       	breq	.+78     	; 0x2b0 <tick+0x16a>
 262:	04 97       	sbiw	r24, 0x04	; 4
 264:	09 f4       	brne	.+2      	; 0x268 <tick+0x122>
 266:	3b c0       	rjmp	.+118    	; 0x2de <tick+0x198>
			PORTB = SetBit(PORTB, 1, 0);
			PORTB = SetBit(PORTB, 0, 1);
		break;

		default:
		break;	
 268:	52 c0       	rjmp	.+164    	; 0x30e <tick+0x1c8>
		case Start:
		break;
				
		case Init:
		//Set PB0 LED to On initially
			PORTB = SetBit(PORTB, 0, 1);
 26a:	05 e2       	ldi	r16, 0x25	; 37
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	85 e2       	ldi	r24, 0x25	; 37
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	80 81       	ld	r24, Z
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	19 df       	rcall	.-462    	; 0xae <SetBit>
 27c:	f8 01       	movw	r30, r16
 27e:	80 83       	st	Z, r24
		break;
 280:	46 c0       	rjmp	.+140    	; 0x30e <tick+0x1c8>

		case PressOn: 
		//Set PB1 LED On & PB0 Off
			PORTB = SetBit(PORTB, 0, 0);
 282:	05 e2       	ldi	r16, 0x25	; 37
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	85 e2       	ldi	r24, 0x25	; 37
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	80 81       	ld	r24, Z
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	0d df       	rcall	.-486    	; 0xae <SetBit>
 294:	f8 01       	movw	r30, r16
 296:	80 83       	st	Z, r24
			PORTB = SetBit(PORTB, 1, 1);
 298:	05 e2       	ldi	r16, 0x25	; 37
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	85 e2       	ldi	r24, 0x25	; 37
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	02 df       	rcall	.-508    	; 0xae <SetBit>
 2aa:	f8 01       	movw	r30, r16
 2ac:	80 83       	st	Z, r24
		break;
 2ae:	2f c0       	rjmp	.+94     	; 0x30e <tick+0x1c8>

		case Stay:
		//Leave PB1 LED On 
			PORTB = SetBit(PORTB, 0, 0);
 2b0:	05 e2       	ldi	r16, 0x25	; 37
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	85 e2       	ldi	r24, 0x25	; 37
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	f6 de       	rcall	.-532    	; 0xae <SetBit>
 2c2:	f8 01       	movw	r30, r16
 2c4:	80 83       	st	Z, r24
			PORTB = SetBit(PORTB, 1, 1);
 2c6:	05 e2       	ldi	r16, 0x25	; 37
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	eb de       	rcall	.-554    	; 0xae <SetBit>
 2d8:	f8 01       	movw	r30, r16
 2da:	80 83       	st	Z, r24
		break;

		case PressOff:
		//Turn PB1 LED Off and Set PB0 On
			PORTB = SetBit(PORTB, 1, 0);
 2dc:	18 c0       	rjmp	.+48     	; 0x30e <tick+0x1c8>
 2de:	05 e2       	ldi	r16, 0x25	; 37
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	85 e2       	ldi	r24, 0x25	; 37
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	df de       	rcall	.-578    	; 0xae <SetBit>
 2f0:	f8 01       	movw	r30, r16
			PORTB = SetBit(PORTB, 0, 1);
 2f2:	80 83       	st	Z, r24
 2f4:	05 e2       	ldi	r16, 0x25	; 37
 2f6:	10 e0       	ldi	r17, 0x00	; 0
 2f8:	85 e2       	ldi	r24, 0x25	; 37
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	fc 01       	movw	r30, r24
 2fe:	80 81       	ld	r24, Z
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	d4 de       	rcall	.-600    	; 0xae <SetBit>
 306:	f8 01       	movw	r30, r16
 308:	80 83       	st	Z, r24
		break;
 30a:	01 c0       	rjmp	.+2      	; 0x30e <tick+0x1c8>
		break;
	}
	
	switch (state) { //State Actions
		case Start:
		break;
 30c:	00 00       	nop
		break;

		default:
		break;	
	}
}
 30e:	00 00       	nop
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	0f 91       	pop	r16
 318:	08 95       	ret

0000031a <main>:
int main(void)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 322:	81 e2       	ldi	r24, 0x21	; 33
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	fc 01       	movw	r30, r24
 328:	10 82       	st	Z, r1
 32a:	82 e2       	ldi	r24, 0x22	; 34
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 334:	84 e2       	ldi	r24, 0x24	; 36
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
 33e:	85 e2       	ldi	r24, 0x25	; 37
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	fc 01       	movw	r30, r24
 344:	10 82       	st	Z, r1
	
	state = Start;//initialize state
 346:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 34a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	while(1) { tick(); }
 34e:	fb de       	rcall	.-522    	; 0x146 <tick>
 350:	fe cf       	rjmp	.-4      	; 0x34e <main+0x34>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
