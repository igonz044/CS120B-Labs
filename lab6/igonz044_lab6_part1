#include <avr/io.h>
#include <avr/interrupt.h>

enum States{Start,first,second,third} state;

volatile unsigned char TimerFlag = 0;

unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;

void TimerOn(){
	TCCR1B = 0x0B;
	OCR1A = 125;
	TIMSK1 = 0x02;
	TCNT1 = 0;
	
	_avr_timer_cntcurr = _avr_timer_M;
	
	SREG |= 0x80;
}
/*
void TimerOff(){
	TCCR1B = 0x00;
}
*/
void TimerISR(){
	TimerFlag = 1;
}

ISR(TIMER1_COMPA_vect){
	_avr_timer_cntcurr--;
	if(_avr_timer_cntcurr == 0){
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

void TimerSet(unsigned long M){
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}
void synchSM(){
	switch(state){
		case Start: state = first; break;
		case first: state = second; break;
		case second: state = third; break;
		case third: state = first; break;
	};
	switch(state){
		case Start: break;
		case first: PORTB = 0x01; break;
		case second: PORTB = 0x08; break;
		case third: PORTB = 0x40; break;
	};
}

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
	state = Start;
	TimerSet(125);
	TimerOn();

    /* Replace with your application code */
    while (1){
		synchSM();
		
		while(!TimerFlag){}
		TimerFlag = 0;
    }
}
