/*
 * jpedr010_jchie008_lab09_part1.c
 *
 * Created: 2/15/2018 11:32:21 AM
 *  Author: Joshua Pedron, Jonathan Chiem
 */ 


#include <avr/io.h>

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
		
		// prevents OCR0A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }

		TCNT3 = 0; // resets counter
		current_frequency = frequency; // Updates the current frequency
	}
}

void PWM_on() {
	TCCR3A = (1 << COM3A0);
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}

enum Beep_States{SMstart, wait, change_wait, change} Beep_State;
enum Change_States{SMstart2, wait2, change_wait2, change2} Change_State;
	
unsigned char button1 = 0x00;
unsigned char button2 = 0x00;
unsigned char button3 = 0x00;
unsigned char check = 0;
unsigned char status = 0;
unsigned char updown = 0;
double freq[8] = {261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25};
	
void Change_Tick()
{
	button1 = ~PINA & 0x01;
	button2 = ~PINA & 0x02;
	
	switch (Change_State) //transitions
	{
		case SMstart2:
			Change_State = wait2;
			break;
			
		case wait2:
			if (status == 1)
			{
				if (button1)
				{
					updown = 1;
					Change_State = change_wait2;
				}
				else if (button2)
				{
					updown = 2;
					Change_State = change_wait2;
				}
				else
				{
					Change_State = wait2;
				}
			}
			else
			{
				Change_State = wait2;
			}
			break;
		
		case change_wait2:
			if (button1 || button2)
			{
				Change_State = change_wait2;
			}
			else
			{
				Change_State = change2;
			}
			break;
			
		case change2:
			Change_State = wait2;
			break;
			
		default:
			Change_State = SMstart2;
			break;
	}
	
	switch (Change_State) //actions
	{
		case SMstart2:
			break;
		
		case wait2:
			break;
		
		case change_wait2:
			break;
		
		case change2:
			if (updown == 1)
			{
				updown = 0;
				if (check != 7)
				{
					check++;
					set_PWM(freq[check]);
				}
			}
			else if (updown == 2)
			{
				updown = 0;
				if (check != 0)
				{
					check--;
					set_PWM(freq[check]);
				}
			}
			break;
		
		default:
			break;
	}
}

void Beep_Tick()
{
	button3 = ~PINA & 0x04;
	
	switch(Beep_State) //Transitions
	{
		case SMstart:
			Beep_State = wait;
			break;
		
		case wait:
			if (button3)
			{
				Beep_State = change_wait;
			}
			else
			{
				Beep_State = wait;
			}
			break;
			
		case change_wait:
			if (button3)
			{
				Beep_State = change_wait;
			}
			else
			{
				Beep_State = change;
			}
			break;
			
		case change:
			Beep_State = wait;
			break;
			
		default:
			Beep_State = SMstart;
			break;
		
	}
	switch(Beep_State) //Actions
	{
		case SMstart:
			break;
		
		case wait:
			break;
		
		case change_wait:
			break;
		
		case change:
			if (status == 0)
			{
				status =  1;
			}
			else if (status == 1)
			{
				status = 0;
			}
			
			if (status == 1)
			{
				set_PWM(freq[check]);
			}
			else if(status == 0)
			{
				set_PWM(0);
			}
			break;
		
		default:
			break;

	}
}

int main(void)
{
	DDRA = 0x00;
	PORTA = 0xFF;
	
	DDRB = 0xFF;
	PORTB = 0x00;
	
	Beep_State = SMstart;
	Change_State = SMstart2;
	
	PWM_on();
	
    while(1)
    {
		Beep_Tick();
		Change_Tick();
	}
}
