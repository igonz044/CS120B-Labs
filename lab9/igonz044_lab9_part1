/*
 * Name & Email: Itzel G. igonz044@ucr.edu
 * Lab Section: 026
 * Created: 5/5/2019 10:03:48 PM
 * Author : ucrcse
 * Exercise Description: Tone Selector
 *
 * I acknowledge all content contained herein, excluding template or example
 * code, is my own original work.
 */

 #include <avr/io.h>
 #include <avr/interrupt.h>

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter

		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }

		// prevents OCR0A from underflowing, using prescaler 64
    // 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }

		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }

		TCNT3 = 0; // resets counter
		current_frequency = frequency; // Updates the current frequency
	}
}

void PWM_on() {
	TCCR3A = (1 << COM3A0);
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}

enum States{start, off, on} state;

unsigned char button1 = 0x00;
unsigned char button2 = 0x00;
unsigned char button3 = 0x00;
unsigned char check = 0;

void Tick()
{
	button1 = ~PINA & 0x01;
	button2 = ~PINA & 0x02;
	button3 = ~PINA & 0x04;

	switch(state)
	{
		case start:
			state = off;
			break;

		case off:
			if (button1)
			{
				check = 1;
				state = on;
			}
			else if (button2)
			{
				check = 2;
				state = on;
			}
			else if (button3)
			{
				check = 3;
				state = on;
			}
			else
			{
				check = 0;
				state = off;
			}
			break;

		case on:
			if (!button1 && !button2 && !button3)
			{
				state = off;
			}
			else
			{
				state = on;
			}
			break;

		default:
			state = start;
			break;

	}
	switch(state)
	{
		case start:
			break;

		case off:
			set_PWM(0);
			break;

		case on:
			if (check == 1)
			{
				set_PWM(261.63);
			}
			else if (check == 2)
			{
				set_PWM(293.66);

			}
			else if (check == 3)
			{
				set_PWM(329.63);
			}

			break;

		default:
			break;
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;

	state = start;

	PWM_on();

    while(1){Tick();}
}
