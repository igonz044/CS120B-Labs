/*
 * itzel_lab9_part1.c
 *
 * Created: 5/6/2019 11:08:10 PM
 * Author : shado
 */ 
#include <avr/io.h>
// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound

#define A0 ((~PINA)&0x01)
#define A1 ((~PINA)&0x02)
#define A2 ((~PINA)&0x04)

void set_PWM(double frequency) {
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
		
		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }

		TCNT3 = 0; // resets counter
		current_frequency = frequency; // Updates the current frequency
	}
}

void PWM_on() {
	TCCR3A = (1 << COM3A0);
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}
enum States{Start, Off, On, Incr, Decr} state;
unsigned char i = 0;
unsigned char count = 0;
unsigned char freq[8] = {
	261.63, 293.66, 329.63, 349.23,
	392.00, 440.00, 493.88, 523.25};
	
void Tick()
{
	switch(state)//State Transitions
	{
		case(Start):
			state = Off;
		break;
		
		case(Off):
			if(A0){ state = On; }
			else{ state = Off; }
		break;
		
		case(On):
			if(A0){ state = Off; }
			else if(A1 && !A0 && !A2){ state = Incr; }
			else if(A2 && !A0 && !A1){ state = Decr; }
			else{ state = On; }
		break;
		
		case(Incr):
			if(A0){ state = Off; }
			else if(A1){ state = Incr; }
			else{ state = On; }
		break;
		
		case(Decr):
			if(A0){ state = Off; }
			else if(A2){ state = Decr; }
			else{ state = On; }
		break;
	}
	
	switch(state)//State Actions
	{
		case(Start):
		set_PWM(0);
		count = 0;
		break;
		
		case(Off):
		set_PWM(0);
		count = 0;
		break;
		
		case(On):
		count = 0;
		set_PWM(freq[i]);
		break;
		
		case(Incr):
		if(count == 0)
		{
			if (i<8)
			{
				i++;
			}
			else
			{
				i = 8;
			}
		}
		
		set_PWM(freq[i]);
		count++;			
		break;
		
		case(Decr):
		if(count == 0)
		{
			if (i>0)
			{
				i--;
			}
			else
			{
				i = 0;
			}
		}
		set_PWM(freq[i]);
		
		count++;
		break;
	}
}
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
	DDRB = 0xFF; PORTB = 0x00; //outputs

	PWM_on();
    /* Replace with your application code */
    while (1) 
    {	
		Tick();
	}
}
