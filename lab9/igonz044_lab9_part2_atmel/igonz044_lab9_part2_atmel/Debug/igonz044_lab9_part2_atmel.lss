
igonz044_lab9_part2_atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800124  00800124  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dae  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000902  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000705  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030a  00000000  00000000  00002e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000313b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e8 c0       	rjmp	.+464    	; 0x206 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 33       	cpi	r26, 0x31	; 49
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bf d1       	rcall	.+894    	; 0x442 <main>
  c4:	5f c3       	rjmp	.+1726   	; 0x784 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	6b 01       	movw	r12, r22
  d2:	7c 01       	movw	r14, r24
  d4:	9b 01       	movw	r18, r22
  d6:	ac 01       	movw	r20, r24
  d8:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <__data_end>
  dc:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <__data_end+0x1>
  e0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end+0x2>
  e4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x3>
  e8:	d4 d1       	rcall	.+936    	; 0x492 <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_PWM+0x28>
  ee:	52 c0       	rjmp	.+164    	; 0x194 <set_PWM+0xcc>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	cb d1       	rcall	.+918    	; 0x492 <__cmpsf2>
  fc:	81 11       	cpse	r24, r1
  fe:	06 c0       	rjmp	.+12     	; 0x10c <set_PWM+0x44>
 100:	e1 e9       	ldi	r30, 0x91	; 145
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 70       	andi	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	05 c0       	rjmp	.+10     	; 0x116 <set_PWM+0x4e>
 10c:	e1 e9       	ldi	r30, 0x91	; 145
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
 116:	28 e5       	ldi	r18, 0x58	; 88
 118:	39 e3       	ldi	r19, 0x39	; 57
 11a:	44 e7       	ldi	r20, 0x74	; 116
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	b7 d1       	rcall	.+878    	; 0x492 <__cmpsf2>
 124:	88 23       	and	r24, r24
 126:	3c f4       	brge	.+14     	; 0x136 <set_PWM+0x6e>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 130:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 134:	23 c0       	rjmp	.+70     	; 0x17c <set_PWM+0xb4>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	34 e2       	ldi	r19, 0x24	; 36
 13a:	44 ef       	ldi	r20, 0xF4	; 244
 13c:	56 e4       	ldi	r21, 0x46	; 70
 13e:	c7 01       	movw	r24, r14
 140:	b6 01       	movw	r22, r12
 142:	b9 d2       	rcall	.+1394   	; 0x6b6 <__gesf2>
 144:	18 16       	cp	r1, r24
 146:	2c f4       	brge	.+10     	; 0x152 <set_PWM+0x8a>
 148:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 14c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 150:	15 c0       	rjmp	.+42     	; 0x17c <set_PWM+0xb4>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	af d2       	rcall	.+1374   	; 0x6be <__mulsf3>
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	74 e2       	ldi	r23, 0x24	; 36
 168:	84 ef       	ldi	r24, 0xF4	; 244
 16a:	9a e4       	ldi	r25, 0x4A	; 74
 16c:	96 d1       	rcall	.+812    	; 0x49a <__divsf3>
 16e:	fd d1       	rcall	.+1018   	; 0x56a <__fixsfsi>
 170:	61 50       	subi	r22, 0x01	; 1
 172:	71 09       	sbc	r23, r1
 174:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 178:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 17c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 180:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 184:	c0 92 24 01 	sts	0x0124, r12	; 0x800124 <__data_end>
 188:	d0 92 25 01 	sts	0x0125, r13	; 0x800125 <__data_end+0x1>
 18c:	e0 92 26 01 	sts	0x0126, r14	; 0x800126 <__data_end+0x2>
 190:	f0 92 27 01 	sts	0x0127, r15	; 0x800127 <__data_end+0x3>
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <PWM_on>:
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	cb 01       	movw	r24, r22
 1b0:	8b cf       	rjmp	.-234    	; 0xc8 <set_PWM>
 1b2:	08 95       	ret

000001b4 <PWM_off>:
 1b4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 1b8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1bc:	08 95       	ret

000001be <TimerOn>:
 1be:	8b e0       	ldi	r24, 0x0B	; 11
 1c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1c4:	8d e7       	ldi	r24, 0x7D	; 125
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1de:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_M>
 1e2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_M+0x1>
 1e6:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_M+0x2>
 1ea:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_M+0x3>
 1ee:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 1f2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 1f6:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 1fa:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 1fe:	8f b7       	in	r24, 0x3f	; 63
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8f bf       	out	0x3f, r24	; 63
 204:	08 95       	ret

00000206 <__vector_13>:
}
//void TimerISR() {TimerFlag = 1;}
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 218:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_avr_timer_cntcurr>
 21c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x1>
 220:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x2>
 224:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x3>
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	a1 09       	sbc	r26, r1
 22c:	b1 09       	sbc	r27, r1
 22e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 232:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 236:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 23a:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 23e:	89 2b       	or	r24, r25
 240:	8a 2b       	or	r24, r26
 242:	8b 2b       	or	r24, r27
 244:	99 f4       	brne	.+38     	; 0x26c <__vector_13+0x66>
unsigned char SIZE = 8;

double freq[8] = {261.63, 293.66, 329.63, 349.23,
				  392.00, 440.00, 493.88, 523.25};

void TimerISR(){TimerFlag = 1;}
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 24c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <_avr_timer_M>
 250:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <_avr_timer_M+0x1>
 254:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <_avr_timer_M+0x2>
 258:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <_avr_timer_M+0x3>
 25c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 260:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 264:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 268:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
	}
}
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <TimerSet>:
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 27e:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <_avr_timer_M>
 282:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <_avr_timer_M+0x1>
 286:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_avr_timer_M+0x2>
 28a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 28e:	60 93 2b 01 	sts	0x012B, r22	; 0x80012b <_avr_timer_cntcurr>
 292:	70 93 2c 01 	sts	0x012C, r23	; 0x80012c <_avr_timer_cntcurr+0x1>
 296:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_avr_timer_cntcurr+0x2>
 29a:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_avr_timer_cntcurr+0x3>
 29e:	08 95       	ret

000002a0 <ToggleOnOff>:
	}
}

void ToggleOnOff()
{
	switch(state)//State Transitions 
 2a0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <state>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	41 f0       	breq	.+16     	; 0x2b8 <ToggleOnOff+0x18>
 2a8:	18 f0       	brcs	.+6      	; 0x2b0 <ToggleOnOff+0x10>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	59 f0       	breq	.+22     	; 0x2c4 <ToggleOnOff+0x24>
 2ae:	10 c0       	rjmp	.+32     	; 0x2d0 <ToggleOnOff+0x30>
	{
		case Start:
		state = Off;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
		break;
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <ToggleOnOff+0x36>
		
		case Off:
		if(A0 == 0x01){state = On;}
 2b8:	00 99       	sbic	0x00, 0	; 0
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <ToggleOnOff+0x36>
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
 2c2:	0c c0       	rjmp	.+24     	; 0x2dc <ToggleOnOff+0x3c>
		else {state = Off;}
		break;
		
		case On:
		if(A0 == 0x01){state = Off;}
 2c4:	00 99       	sbic	0x00, 0	; 0
 2c6:	0a c0       	rjmp	.+20     	; 0x2dc <ToggleOnOff+0x3c>
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <ToggleOnOff+0x36>
		else {state = On;}
		break;
		
		default:
		state = Off;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <state>
	{
		case Start:
		break;
		
		case Off:
		toggle = 0;
 2d6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <toggle>
		break;
 2da:	08 95       	ret
		
		case On:
		toggle = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <toggle>
 2e2:	08 95       	ret

000002e4 <ChangeNotes>:
		break;
	}
}
void ChangeNotes()
{
	switch(state2)//State Transitions
 2e4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <state2>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	01 f1       	breq	.+64     	; 0x32c <ChangeNotes+0x48>
 2ec:	28 f4       	brcc	.+10     	; 0x2f8 <ChangeNotes+0x14>
 2ee:	88 23       	and	r24, r24
 2f0:	49 f0       	breq	.+18     	; 0x304 <ChangeNotes+0x20>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	59 f0       	breq	.+22     	; 0x30c <ChangeNotes+0x28>
 2f6:	5b c0       	rjmp	.+182    	; 0x3ae <ChangeNotes+0xca>
 2f8:	84 30       	cpi	r24, 0x04	; 4
 2fa:	b9 f1       	breq	.+110    	; 0x36a <ChangeNotes+0x86>
 2fc:	d8 f0       	brcs	.+54     	; 0x334 <ChangeNotes+0x50>
 2fe:	85 30       	cpi	r24, 0x05	; 5
 300:	c1 f1       	breq	.+112    	; 0x372 <ChangeNotes+0x8e>
 302:	55 c0       	rjmp	.+170    	; 0x3ae <ChangeNotes+0xca>
	{
		case Init:
			state2 = Base;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
			break;
 30a:	5d c0       	rjmp	.+186    	; 0x3c6 <ChangeNotes+0xe2>
			
		case Base:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
 30c:	01 99       	sbic	0x00, 1	; 0
 30e:	5b c0       	rjmp	.+182    	; 0x3c6 <ChangeNotes+0xe2>
 310:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <toggle>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	09 f0       	breq	.+2      	; 0x31a <ChangeNotes+0x36>
 318:	56 c0       	rjmp	.+172    	; 0x3c6 <ChangeNotes+0xe2>
 31a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <index>
 31e:	88 30       	cpi	r24, 0x08	; 8
 320:	08 f0       	brcs	.+2      	; 0x324 <ChangeNotes+0x40>
 322:	51 c0       	rjmp	.+162    	; 0x3c6 <ChangeNotes+0xe2>
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
 32a:	87 c0       	rjmp	.+270    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			else{state2 = Base; }
			break;
		
		case Incr:
			state2 = Rel1;
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
			break;
 332:	08 95       	ret
		
		case Rel1:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
 334:	01 99       	sbic	0x00, 1	; 0
 336:	0e c0       	rjmp	.+28     	; 0x354 <ChangeNotes+0x70>
 338:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <toggle>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	09 f0       	breq	.+2      	; 0x342 <ChangeNotes+0x5e>
 340:	75 c0       	rjmp	.+234    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 342:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <index>
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	08 f0       	brcs	.+2      	; 0x34c <ChangeNotes+0x68>
 34a:	6d c0       	rjmp	.+218    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
 352:	73 c0       	rjmp	.+230    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 354:	02 99       	sbic	0x00, 2	; 0
 356:	74 c0       	rjmp	.+232    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 358:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <toggle>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	09 f0       	breq	.+2      	; 0x362 <ChangeNotes+0x7e>
 360:	6f c0       	rjmp	.+222    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
 368:	4c c0       	rjmp	.+152    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			else{state2 = Rel1; }
			break;
		
		case Decr:
			state2 = Rel2;
 36a:	85 e0       	ldi	r24, 0x05	; 5
 36c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
			break;
 370:	08 95       	ret
		
		case Rel2:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
 372:	01 99       	sbic	0x00, 1	; 0
 374:	0e c0       	rjmp	.+28     	; 0x392 <ChangeNotes+0xae>
 376:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <toggle>
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	09 f0       	breq	.+2      	; 0x380 <ChangeNotes+0x9c>
 37e:	5b c0       	rjmp	.+182    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 380:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <index>
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	08 f0       	brcs	.+2      	; 0x38a <ChangeNotes+0xa6>
 388:	53 c0       	rjmp	.+166    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
 390:	54 c0       	rjmp	.+168    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 392:	02 99       	sbic	0x00, 2	; 0
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <ChangeNotes+0xc2>
 396:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <toggle>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	21 f4       	brne	.+8      	; 0x3a6 <ChangeNotes+0xc2>
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
 3a4:	2e c0       	rjmp	.+92     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			else{state2 = Base; }
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
 3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <ChangeNotes+0xe2>
			break;
	}//State Transitions
	
	switch(state2)//State Actions
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	51 f0       	breq	.+20     	; 0x3c6 <ChangeNotes+0xe2>
 3b2:	28 f0       	brcs	.+10     	; 0x3be <ChangeNotes+0xda>
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	69 f0       	breq	.+26     	; 0x3d2 <ChangeNotes+0xee>
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	19 f1       	breq	.+70     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3bc:	08 95       	ret
	{
		case Init:
			index = 0;
 3be:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <index>
			PWM_off();
 3c2:	f8 ce       	rjmp	.-528    	; 0x1b4 <PWM_off>
			break;
		
		case Base:
			PWM_on();
 3c4:	08 95       	ret
 3c6:	eb de       	rcall	.-554    	; 0x19e <PWM_on>
			set_PWM(0);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	cb 01       	movw	r24, r22
 3ce:	7c ce       	rjmp	.-776    	; 0xc8 <set_PWM>
			break;
 3d0:	08 95       	ret
		
		case Incr:
			if(index <=7){index++; set_PWM(freq[index]);}
 3d2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <index>
 3d6:	e8 30       	cpi	r30, 0x08	; 8
 3d8:	80 f4       	brcc	.+32     	; 0x3fa <ChangeNotes+0x116>
 3da:	ef 5f       	subi	r30, 0xFF	; 255
 3dc:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <index>
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e0 50       	subi	r30, 0x00	; 0
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	60 81       	ld	r22, Z
 3f0:	71 81       	ldd	r23, Z+1	; 0x01
 3f2:	82 81       	ldd	r24, Z+2	; 0x02
 3f4:	93 81       	ldd	r25, Z+3	; 0x03
 3f6:	68 ce       	rjmp	.-816    	; 0xc8 <set_PWM>
 3f8:	08 95       	ret
			else{index = 8;}
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <index>
 400:	08 95       	ret
		case Rel1:
		
			break;
		
		case Decr:
			if(index >=0){index--; set_PWM(freq[index]);}
 402:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <index>
 406:	e1 50       	subi	r30, 0x01	; 1
 408:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <index>
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e0 50       	subi	r30, 0x00	; 0
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	60 81       	ld	r22, Z
 41c:	71 81       	ldd	r23, Z+1	; 0x01
 41e:	82 81       	ldd	r24, Z+2	; 0x02
 420:	93 81       	ldd	r25, Z+3	; 0x03
 422:	52 ce       	rjmp	.-860    	; 0xc8 <set_PWM>
		
		case Rel2:
		
			break;
	}//State Actions
 424:	08 95       	ret
			state2 = Rel1;
			break;
		
		case Rel1:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 426:	02 9b       	sbis	0x00, 2	; 0
 428:	9c cf       	rjmp	.-200    	; 0x362 <ChangeNotes+0x7e>
 42a:	08 95       	ret
 42c:	80 b1       	in	r24, 0x00	; 0
 42e:	08 95       	ret
			state2 = Rel2;
			break;
		
		case Rel2:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 430:	02 9b       	sbis	0x00, 2	; 0
 432:	b5 cf       	rjmp	.-150    	; 0x39e <ChangeNotes+0xba>
 434:	b8 cf       	rjmp	.-144    	; 0x3a6 <ChangeNotes+0xc2>
 436:	80 b1       	in	r24, 0x00	; 0
 438:	b6 cf       	rjmp	.-148    	; 0x3a6 <ChangeNotes+0xc2>
			PWM_on();
			set_PWM(0);
			break;
		
		case Incr:
			if(index <=7){index++; set_PWM(freq[index]);}
 43a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <index>
 43e:	cd cf       	rjmp	.-102    	; 0x3da <ChangeNotes+0xf6>
 440:	08 95       	ret

00000442 <main>:
	_avr_timer_cntcurr = _avr_timer_M;
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
 442:	11 b8       	out	0x01, r1	; 1
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //outputs
 448:	84 b9       	out	0x04, r24	; 4
 44a:	15 b8       	out	0x05, r1	; 5
    
	state = Start;
 44c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <state>
	state2 = Base;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <state2>
	
	TimerSet(timerPeriod);
 456:	64 ef       	ldi	r22, 0xF4	; 244
 458:	71 e0       	ldi	r23, 0x01	; 1
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0f df       	rcall	.-482    	; 0x27e <TimerSet>
	TimerOn();
 460:	ae de       	rcall	.-676    	; 0x1be <TimerOn>
	PWM_on();
 462:	9d de       	rcall	.-710    	; 0x19e <PWM_on>
    while (1){
		ToggleOnOff();
 464:	1d df       	rcall	.-454    	; 0x2a0 <ToggleOnOff>
 466:	3e df       	rcall	.-388    	; 0x2e4 <ChangeNotes>
		ChangeNotes();
 468:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <index>
		set_PWM(freq[index]);
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	e0 50       	subi	r30, 0x00	; 0
 478:	ff 4f       	sbci	r31, 0xFF	; 255
 47a:	60 81       	ld	r22, Z
 47c:	71 81       	ldd	r23, Z+1	; 0x01
 47e:	82 81       	ldd	r24, Z+2	; 0x02
 480:	93 81       	ldd	r25, Z+3	; 0x03
 482:	22 de       	rcall	.-956    	; 0xc8 <set_PWM>
 484:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <TimerFlag>
		while(!TimerFlag){}
 488:	88 23       	and	r24, r24
 48a:	e1 f3       	breq	.-8      	; 0x484 <main+0x42>
 48c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <TimerFlag>
		TimerFlag = 0;
 490:	e9 cf       	rjmp	.-46     	; 0x464 <main+0x22>

00000492 <__cmpsf2>:
 492:	9c d0       	rcall	.+312    	; 0x5cc <__fp_cmp>
	}
 494:	08 f4       	brcc	.+2      	; 0x498 <__cmpsf2+0x6>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret

0000049a <__divsf3>:
 49a:	0c d0       	rcall	.+24     	; 0x4b4 <__divsf3x>
 49c:	d2 c0       	rjmp	.+420    	; 0x642 <__fp_round>
 49e:	ca d0       	rcall	.+404    	; 0x634 <__fp_pscB>
 4a0:	40 f0       	brcs	.+16     	; 0x4b2 <__divsf3+0x18>
 4a2:	c1 d0       	rcall	.+386    	; 0x626 <__fp_pscA>
 4a4:	30 f0       	brcs	.+12     	; 0x4b2 <__divsf3+0x18>
 4a6:	21 f4       	brne	.+8      	; 0x4b0 <__divsf3+0x16>
 4a8:	5f 3f       	cpi	r21, 0xFF	; 255
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <__divsf3+0x18>
 4ac:	b3 c0       	rjmp	.+358    	; 0x614 <__fp_inf>
 4ae:	51 11       	cpse	r21, r1
 4b0:	fc c0       	rjmp	.+504    	; 0x6aa <__fp_szero>
 4b2:	b6 c0       	rjmp	.+364    	; 0x620 <__fp_nan>

000004b4 <__divsf3x>:
 4b4:	d7 d0       	rcall	.+430    	; 0x664 <__fp_split3>
 4b6:	98 f3       	brcs	.-26     	; 0x49e <__divsf3+0x4>

000004b8 <__divsf3_pse>:
 4b8:	99 23       	and	r25, r25
 4ba:	c9 f3       	breq	.-14     	; 0x4ae <__divsf3+0x14>
 4bc:	55 23       	and	r21, r21
 4be:	b1 f3       	breq	.-20     	; 0x4ac <__divsf3+0x12>
 4c0:	95 1b       	sub	r25, r21
 4c2:	55 0b       	sbc	r21, r21
 4c4:	bb 27       	eor	r27, r27
 4c6:	aa 27       	eor	r26, r26
 4c8:	62 17       	cp	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	38 f0       	brcs	.+14     	; 0x4de <__divsf3_pse+0x26>
 4d0:	9f 5f       	subi	r25, 0xFF	; 255
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	22 0f       	add	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	44 1f       	adc	r20, r20
 4da:	aa 1f       	adc	r26, r26
 4dc:	a9 f3       	breq	.-22     	; 0x4c8 <__divsf3_pse+0x10>
 4de:	33 d0       	rcall	.+102    	; 0x546 <__divsf3_pse+0x8e>
 4e0:	0e 2e       	mov	r0, r30
 4e2:	3a f0       	brmi	.+14     	; 0x4f2 <__divsf3_pse+0x3a>
 4e4:	e0 e8       	ldi	r30, 0x80	; 128
 4e6:	30 d0       	rcall	.+96     	; 0x548 <__divsf3_pse+0x90>
 4e8:	91 50       	subi	r25, 0x01	; 1
 4ea:	50 40       	sbci	r21, 0x00	; 0
 4ec:	e6 95       	lsr	r30
 4ee:	00 1c       	adc	r0, r0
 4f0:	ca f7       	brpl	.-14     	; 0x4e4 <__divsf3_pse+0x2c>
 4f2:	29 d0       	rcall	.+82     	; 0x546 <__divsf3_pse+0x8e>
 4f4:	fe 2f       	mov	r31, r30
 4f6:	27 d0       	rcall	.+78     	; 0x546 <__divsf3_pse+0x8e>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	bb 1f       	adc	r27, r27
 500:	26 17       	cp	r18, r22
 502:	37 07       	cpc	r19, r23
 504:	48 07       	cpc	r20, r24
 506:	ab 07       	cpc	r26, r27
 508:	b0 e8       	ldi	r27, 0x80	; 128
 50a:	09 f0       	breq	.+2      	; 0x50e <__divsf3_pse+0x56>
 50c:	bb 0b       	sbc	r27, r27
 50e:	80 2d       	mov	r24, r0
 510:	bf 01       	movw	r22, r30
 512:	ff 27       	eor	r31, r31
 514:	93 58       	subi	r25, 0x83	; 131
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	2a f0       	brmi	.+10     	; 0x524 <__divsf3_pse+0x6c>
 51a:	9e 3f       	cpi	r25, 0xFE	; 254
 51c:	51 05       	cpc	r21, r1
 51e:	68 f0       	brcs	.+26     	; 0x53a <__divsf3_pse+0x82>
 520:	79 c0       	rjmp	.+242    	; 0x614 <__fp_inf>
 522:	c3 c0       	rjmp	.+390    	; 0x6aa <__fp_szero>
 524:	5f 3f       	cpi	r21, 0xFF	; 255
 526:	ec f3       	brlt	.-6      	; 0x522 <__divsf3_pse+0x6a>
 528:	98 3e       	cpi	r25, 0xE8	; 232
 52a:	dc f3       	brlt	.-10     	; 0x522 <__divsf3_pse+0x6a>
 52c:	86 95       	lsr	r24
 52e:	77 95       	ror	r23
 530:	67 95       	ror	r22
 532:	b7 95       	ror	r27
 534:	f7 95       	ror	r31
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	c9 f7       	brne	.-14     	; 0x52c <__divsf3_pse+0x74>
 53a:	88 0f       	add	r24, r24
 53c:	91 1d       	adc	r25, r1
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret
 546:	e1 e0       	ldi	r30, 0x01	; 1
 548:	66 0f       	add	r22, r22
 54a:	77 1f       	adc	r23, r23
 54c:	88 1f       	adc	r24, r24
 54e:	bb 1f       	adc	r27, r27
 550:	62 17       	cp	r22, r18
 552:	73 07       	cpc	r23, r19
 554:	84 07       	cpc	r24, r20
 556:	ba 07       	cpc	r27, r26
 558:	20 f0       	brcs	.+8      	; 0x562 <__divsf3_pse+0xaa>
 55a:	62 1b       	sub	r22, r18
 55c:	73 0b       	sbc	r23, r19
 55e:	84 0b       	sbc	r24, r20
 560:	ba 0b       	sbc	r27, r26
 562:	ee 1f       	adc	r30, r30
 564:	88 f7       	brcc	.-30     	; 0x548 <__divsf3_pse+0x90>
 566:	e0 95       	com	r30
 568:	08 95       	ret

0000056a <__fixsfsi>:
 56a:	04 d0       	rcall	.+8      	; 0x574 <__fixunssfsi>
 56c:	68 94       	set
 56e:	b1 11       	cpse	r27, r1
 570:	9c c0       	rjmp	.+312    	; 0x6aa <__fp_szero>
 572:	08 95       	ret

00000574 <__fixunssfsi>:
 574:	7f d0       	rcall	.+254    	; 0x674 <__fp_splitA>
 576:	88 f0       	brcs	.+34     	; 0x59a <__fixunssfsi+0x26>
 578:	9f 57       	subi	r25, 0x7F	; 127
 57a:	90 f0       	brcs	.+36     	; 0x5a0 <__fixunssfsi+0x2c>
 57c:	b9 2f       	mov	r27, r25
 57e:	99 27       	eor	r25, r25
 580:	b7 51       	subi	r27, 0x17	; 23
 582:	a0 f0       	brcs	.+40     	; 0x5ac <__fixunssfsi+0x38>
 584:	d1 f0       	breq	.+52     	; 0x5ba <__fixunssfsi+0x46>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	1a f0       	brmi	.+6      	; 0x596 <__fixunssfsi+0x22>
 590:	ba 95       	dec	r27
 592:	c9 f7       	brne	.-14     	; 0x586 <__fixunssfsi+0x12>
 594:	12 c0       	rjmp	.+36     	; 0x5ba <__fixunssfsi+0x46>
 596:	b1 30       	cpi	r27, 0x01	; 1
 598:	81 f0       	breq	.+32     	; 0x5ba <__fixunssfsi+0x46>
 59a:	86 d0       	rcall	.+268    	; 0x6a8 <__fp_zero>
 59c:	b1 e0       	ldi	r27, 0x01	; 1
 59e:	08 95       	ret
 5a0:	83 c0       	rjmp	.+262    	; 0x6a8 <__fp_zero>
 5a2:	67 2f       	mov	r22, r23
 5a4:	78 2f       	mov	r23, r24
 5a6:	88 27       	eor	r24, r24
 5a8:	b8 5f       	subi	r27, 0xF8	; 248
 5aa:	39 f0       	breq	.+14     	; 0x5ba <__fixunssfsi+0x46>
 5ac:	b9 3f       	cpi	r27, 0xF9	; 249
 5ae:	cc f3       	brlt	.-14     	; 0x5a2 <__fixunssfsi+0x2e>
 5b0:	86 95       	lsr	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b3 95       	inc	r27
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__fixunssfsi+0x3c>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__fixunssfsi+0x56>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__fp_cmp>:
 5cc:	99 0f       	add	r25, r25
 5ce:	00 08       	sbc	r0, r0
 5d0:	55 0f       	add	r21, r21
 5d2:	aa 0b       	sbc	r26, r26
 5d4:	e0 e8       	ldi	r30, 0x80	; 128
 5d6:	fe ef       	ldi	r31, 0xFE	; 254
 5d8:	16 16       	cp	r1, r22
 5da:	17 06       	cpc	r1, r23
 5dc:	e8 07       	cpc	r30, r24
 5de:	f9 07       	cpc	r31, r25
 5e0:	c0 f0       	brcs	.+48     	; 0x612 <__fp_cmp+0x46>
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	e4 07       	cpc	r30, r20
 5e8:	f5 07       	cpc	r31, r21
 5ea:	98 f0       	brcs	.+38     	; 0x612 <__fp_cmp+0x46>
 5ec:	62 1b       	sub	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	95 0b       	sbc	r25, r21
 5f4:	39 f4       	brne	.+14     	; 0x604 <__fp_cmp+0x38>
 5f6:	0a 26       	eor	r0, r26
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_cmp+0x46>
 5fa:	23 2b       	or	r18, r19
 5fc:	24 2b       	or	r18, r20
 5fe:	25 2b       	or	r18, r21
 600:	21 f4       	brne	.+8      	; 0x60a <__fp_cmp+0x3e>
 602:	08 95       	ret
 604:	0a 26       	eor	r0, r26
 606:	09 f4       	brne	.+2      	; 0x60a <__fp_cmp+0x3e>
 608:	a1 40       	sbci	r26, 0x01	; 1
 60a:	a6 95       	lsr	r26
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	81 1d       	adc	r24, r1
 610:	81 1d       	adc	r24, r1
 612:	08 95       	ret

00000614 <__fp_inf>:
 614:	97 f9       	bld	r25, 7
 616:	9f 67       	ori	r25, 0x7F	; 127
 618:	80 e8       	ldi	r24, 0x80	; 128
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	08 95       	ret

00000620 <__fp_nan>:
 620:	9f ef       	ldi	r25, 0xFF	; 255
 622:	80 ec       	ldi	r24, 0xC0	; 192
 624:	08 95       	ret

00000626 <__fp_pscA>:
 626:	00 24       	eor	r0, r0
 628:	0a 94       	dec	r0
 62a:	16 16       	cp	r1, r22
 62c:	17 06       	cpc	r1, r23
 62e:	18 06       	cpc	r1, r24
 630:	09 06       	cpc	r0, r25
 632:	08 95       	ret

00000634 <__fp_pscB>:
 634:	00 24       	eor	r0, r0
 636:	0a 94       	dec	r0
 638:	12 16       	cp	r1, r18
 63a:	13 06       	cpc	r1, r19
 63c:	14 06       	cpc	r1, r20
 63e:	05 06       	cpc	r0, r21
 640:	08 95       	ret

00000642 <__fp_round>:
 642:	09 2e       	mov	r0, r25
 644:	03 94       	inc	r0
 646:	00 0c       	add	r0, r0
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_round+0xc>
 64a:	88 23       	and	r24, r24
 64c:	52 f0       	brmi	.+20     	; 0x662 <__fp_round+0x20>
 64e:	bb 0f       	add	r27, r27
 650:	40 f4       	brcc	.+16     	; 0x662 <__fp_round+0x20>
 652:	bf 2b       	or	r27, r31
 654:	11 f4       	brne	.+4      	; 0x65a <__fp_round+0x18>
 656:	60 ff       	sbrs	r22, 0
 658:	04 c0       	rjmp	.+8      	; 0x662 <__fp_round+0x20>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	08 95       	ret

00000664 <__fp_split3>:
 664:	57 fd       	sbrc	r21, 7
 666:	90 58       	subi	r25, 0x80	; 128
 668:	44 0f       	add	r20, r20
 66a:	55 1f       	adc	r21, r21
 66c:	59 f0       	breq	.+22     	; 0x684 <__fp_splitA+0x10>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	71 f0       	breq	.+28     	; 0x68e <__fp_splitA+0x1a>
 672:	47 95       	ror	r20

00000674 <__fp_splitA>:
 674:	88 0f       	add	r24, r24
 676:	97 fb       	bst	r25, 7
 678:	99 1f       	adc	r25, r25
 67a:	61 f0       	breq	.+24     	; 0x694 <__fp_splitA+0x20>
 67c:	9f 3f       	cpi	r25, 0xFF	; 255
 67e:	79 f0       	breq	.+30     	; 0x69e <__fp_splitA+0x2a>
 680:	87 95       	ror	r24
 682:	08 95       	ret
 684:	12 16       	cp	r1, r18
 686:	13 06       	cpc	r1, r19
 688:	14 06       	cpc	r1, r20
 68a:	55 1f       	adc	r21, r21
 68c:	f2 cf       	rjmp	.-28     	; 0x672 <__fp_split3+0xe>
 68e:	46 95       	lsr	r20
 690:	f1 df       	rcall	.-30     	; 0x674 <__fp_splitA>
 692:	08 c0       	rjmp	.+16     	; 0x6a4 <__fp_splitA+0x30>
 694:	16 16       	cp	r1, r22
 696:	17 06       	cpc	r1, r23
 698:	18 06       	cpc	r1, r24
 69a:	99 1f       	adc	r25, r25
 69c:	f1 cf       	rjmp	.-30     	; 0x680 <__fp_splitA+0xc>
 69e:	86 95       	lsr	r24
 6a0:	71 05       	cpc	r23, r1
 6a2:	61 05       	cpc	r22, r1
 6a4:	08 94       	sec
 6a6:	08 95       	ret

000006a8 <__fp_zero>:
 6a8:	e8 94       	clt

000006aa <__fp_szero>:
 6aa:	bb 27       	eor	r27, r27
 6ac:	66 27       	eor	r22, r22
 6ae:	77 27       	eor	r23, r23
 6b0:	cb 01       	movw	r24, r22
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__gesf2>:
 6b6:	8a df       	rcall	.-236    	; 0x5cc <__fp_cmp>
 6b8:	08 f4       	brcc	.+2      	; 0x6bc <__gesf2+0x6>
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	08 95       	ret

000006be <__mulsf3>:
 6be:	0b d0       	rcall	.+22     	; 0x6d6 <__mulsf3x>
 6c0:	c0 cf       	rjmp	.-128    	; 0x642 <__fp_round>
 6c2:	b1 df       	rcall	.-158    	; 0x626 <__fp_pscA>
 6c4:	28 f0       	brcs	.+10     	; 0x6d0 <__mulsf3+0x12>
 6c6:	b6 df       	rcall	.-148    	; 0x634 <__fp_pscB>
 6c8:	18 f0       	brcs	.+6      	; 0x6d0 <__mulsf3+0x12>
 6ca:	95 23       	and	r25, r21
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__mulsf3+0x12>
 6ce:	a2 cf       	rjmp	.-188    	; 0x614 <__fp_inf>
 6d0:	a7 cf       	rjmp	.-178    	; 0x620 <__fp_nan>
 6d2:	11 24       	eor	r1, r1
 6d4:	ea cf       	rjmp	.-44     	; 0x6aa <__fp_szero>

000006d6 <__mulsf3x>:
 6d6:	c6 df       	rcall	.-116    	; 0x664 <__fp_split3>
 6d8:	a0 f3       	brcs	.-24     	; 0x6c2 <__mulsf3+0x4>

000006da <__mulsf3_pse>:
 6da:	95 9f       	mul	r25, r21
 6dc:	d1 f3       	breq	.-12     	; 0x6d2 <__mulsf3+0x14>
 6de:	95 0f       	add	r25, r21
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	55 1f       	adc	r21, r21
 6e4:	62 9f       	mul	r22, r18
 6e6:	f0 01       	movw	r30, r0
 6e8:	72 9f       	mul	r23, r18
 6ea:	bb 27       	eor	r27, r27
 6ec:	f0 0d       	add	r31, r0
 6ee:	b1 1d       	adc	r27, r1
 6f0:	63 9f       	mul	r22, r19
 6f2:	aa 27       	eor	r26, r26
 6f4:	f0 0d       	add	r31, r0
 6f6:	b1 1d       	adc	r27, r1
 6f8:	aa 1f       	adc	r26, r26
 6fa:	64 9f       	mul	r22, r20
 6fc:	66 27       	eor	r22, r22
 6fe:	b0 0d       	add	r27, r0
 700:	a1 1d       	adc	r26, r1
 702:	66 1f       	adc	r22, r22
 704:	82 9f       	mul	r24, r18
 706:	22 27       	eor	r18, r18
 708:	b0 0d       	add	r27, r0
 70a:	a1 1d       	adc	r26, r1
 70c:	62 1f       	adc	r22, r18
 70e:	73 9f       	mul	r23, r19
 710:	b0 0d       	add	r27, r0
 712:	a1 1d       	adc	r26, r1
 714:	62 1f       	adc	r22, r18
 716:	83 9f       	mul	r24, r19
 718:	a0 0d       	add	r26, r0
 71a:	61 1d       	adc	r22, r1
 71c:	22 1f       	adc	r18, r18
 71e:	74 9f       	mul	r23, r20
 720:	33 27       	eor	r19, r19
 722:	a0 0d       	add	r26, r0
 724:	61 1d       	adc	r22, r1
 726:	23 1f       	adc	r18, r19
 728:	84 9f       	mul	r24, r20
 72a:	60 0d       	add	r22, r0
 72c:	21 1d       	adc	r18, r1
 72e:	82 2f       	mov	r24, r18
 730:	76 2f       	mov	r23, r22
 732:	6a 2f       	mov	r22, r26
 734:	11 24       	eor	r1, r1
 736:	9f 57       	subi	r25, 0x7F	; 127
 738:	50 40       	sbci	r21, 0x00	; 0
 73a:	8a f0       	brmi	.+34     	; 0x75e <__mulsf3_pse+0x84>
 73c:	e1 f0       	breq	.+56     	; 0x776 <__mulsf3_pse+0x9c>
 73e:	88 23       	and	r24, r24
 740:	4a f0       	brmi	.+18     	; 0x754 <__mulsf3_pse+0x7a>
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	bb 1f       	adc	r27, r27
 748:	66 1f       	adc	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	91 50       	subi	r25, 0x01	; 1
 750:	50 40       	sbci	r21, 0x00	; 0
 752:	a9 f7       	brne	.-22     	; 0x73e <__mulsf3_pse+0x64>
 754:	9e 3f       	cpi	r25, 0xFE	; 254
 756:	51 05       	cpc	r21, r1
 758:	70 f0       	brcs	.+28     	; 0x776 <__mulsf3_pse+0x9c>
 75a:	5c cf       	rjmp	.-328    	; 0x614 <__fp_inf>
 75c:	a6 cf       	rjmp	.-180    	; 0x6aa <__fp_szero>
 75e:	5f 3f       	cpi	r21, 0xFF	; 255
 760:	ec f3       	brlt	.-6      	; 0x75c <__mulsf3_pse+0x82>
 762:	98 3e       	cpi	r25, 0xE8	; 232
 764:	dc f3       	brlt	.-10     	; 0x75c <__mulsf3_pse+0x82>
 766:	86 95       	lsr	r24
 768:	77 95       	ror	r23
 76a:	67 95       	ror	r22
 76c:	b7 95       	ror	r27
 76e:	f7 95       	ror	r31
 770:	e7 95       	ror	r30
 772:	9f 5f       	subi	r25, 0xFF	; 255
 774:	c1 f7       	brne	.-16     	; 0x766 <__mulsf3_pse+0x8c>
 776:	fe 2b       	or	r31, r30
 778:	88 0f       	add	r24, r24
 77a:	91 1d       	adc	r25, r1
 77c:	96 95       	lsr	r25
 77e:	87 95       	ror	r24
 780:	97 f9       	bld	r25, 7
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
