
igonz044_lab9_part2_atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000068e  00000722  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800120  00800120  00000742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8c  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008be  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000634  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000023b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052d  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a7  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002c94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4e d1       	rcall	.+668    	; 0x360 <main>
  c4:	e2 c2       	rjmp	.+1476   	; 0x68a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:
void ChangeNotes();

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	6b 01       	movw	r12, r22
  d2:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
  d4:	9b 01       	movw	r18, r22
  d6:	ac 01       	movw	r20, r24
  d8:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
  dc:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x1>
  e0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end+0x2>
  e4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x3>
  e8:	57 d1       	rcall	.+686    	; 0x398 <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_PWM+0x28>
  ee:	52 c0       	rjmp	.+164    	; 0x194 <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	4e d1       	rcall	.+668    	; 0x398 <__cmpsf2>
  fc:	81 11       	cpse	r24, r1
  fe:	06 c0       	rjmp	.+12     	; 0x10c <set_PWM+0x44>
 100:	e1 e9       	ldi	r30, 0x91	; 145
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 70       	andi	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	05 c0       	rjmp	.+10     	; 0x116 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 10c:	e1 e9       	ldi	r30, 0x91	; 145
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 116:	28 e5       	ldi	r18, 0x58	; 88
 118:	39 e3       	ldi	r19, 0x39	; 57
 11a:	44 e7       	ldi	r20, 0x74	; 116
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	3a d1       	rcall	.+628    	; 0x398 <__cmpsf2>
 124:	88 23       	and	r24, r24
 126:	3c f4       	brge	.+14     	; 0x136 <set_PWM+0x6e>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 130:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 134:	23 c0       	rjmp	.+70     	; 0x17c <set_PWM+0xb4>
		
		// prevents OCR3A from underflowing, using prescaler 64					
		else if (frequency > 31250) { OCR3A = 0x0000; }// 31250 is largest frequency that will not result in underflow
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	34 e2       	ldi	r19, 0x24	; 36
 13a:	44 ef       	ldi	r20, 0xF4	; 244
 13c:	56 e4       	ldi	r21, 0x46	; 70
 13e:	c7 01       	movw	r24, r14
 140:	b6 01       	movw	r22, r12
 142:	3c d2       	rcall	.+1144   	; 0x5bc <__gesf2>
 144:	18 16       	cp	r1, r24
 146:	2c f4       	brge	.+10     	; 0x152 <set_PWM+0x8a>
 148:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 14c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 150:	15 c0       	rjmp	.+42     	; 0x17c <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	32 d2       	rcall	.+1124   	; 0x5c4 <__mulsf3>
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	74 e2       	ldi	r23, 0x24	; 36
 168:	84 ef       	ldi	r24, 0xF4	; 244
 16a:	9a e4       	ldi	r25, 0x4A	; 74
 16c:	19 d1       	rcall	.+562    	; 0x3a0 <__divsf3>
 16e:	80 d1       	rcall	.+768    	; 0x470 <__fixsfsi>
 170:	61 50       	subi	r22, 0x01	; 1
 172:	71 09       	sbc	r23, r1
 174:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 178:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
 17c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 180:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
 184:	c0 92 20 01 	sts	0x0120, r12	; 0x800120 <__data_end>
 188:	d0 92 21 01 	sts	0x0121, r13	; 0x800121 <__data_end+0x1>
 18c:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <__data_end+0x2>
 190:	f0 92 23 01 	sts	0x0123, r15	; 0x800123 <__data_end+0x3>
	}
}
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <PWM_on>:
void PWM_on() {
	TCCR3A = (1 << COM0A0);
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM02) | (1 << CS01) | (1 << CS30);
 1a4:	8b e0       	ldi	r24, 0x0B	; 11
 1a6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	cb 01       	movw	r24, r22
 1b0:	8b cf       	rjmp	.-234    	; 0xc8 <set_PWM>
 1b2:	08 95       	ret

000001b4 <PWM_off>:
}
void PWM_off() {
	TCCR3A = 0x00;
 1b4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
 1b8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1bc:	08 95       	ret

000001be <ToggleOnOff>:
	}
}

void ToggleOnOff()
{
	switch(state)//State Transitions 
 1be:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <state>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	41 f0       	breq	.+16     	; 0x1d6 <ToggleOnOff+0x18>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <ToggleOnOff+0x10>
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	59 f0       	breq	.+22     	; 0x1e2 <ToggleOnOff+0x24>
 1cc:	10 c0       	rjmp	.+32     	; 0x1ee <ToggleOnOff+0x30>
	{
		case Start:
		state = Off;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
		break;
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <ToggleOnOff+0x36>
		
		case Off:
		if(A0 == 0x01){state = On;}
 1d6:	00 99       	sbic	0x00, 0	; 0
 1d8:	0d c0       	rjmp	.+26     	; 0x1f4 <ToggleOnOff+0x36>
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <ToggleOnOff+0x3c>
		else {state = Off;}
		break;
		
		case On:
		if(A0 == 0x01){state = Off;}
 1e2:	00 99       	sbic	0x00, 0	; 0
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <ToggleOnOff+0x3c>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <ToggleOnOff+0x36>
		else {state = On;}
		break;
		
		default:
		state = Off;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <state>
	{
		case Start:
		break;
		
		case Off:
		toggle = 0;
 1f4:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <toggle>
		break;
 1f8:	08 95       	ret
		
		case On:
		toggle = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <toggle>
 200:	08 95       	ret

00000202 <ChangeNotes>:
		break;
	}
}
void ChangeNotes()
{
	switch(state2)//State Transitions
 202:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <state2>
 206:	82 30       	cpi	r24, 0x02	; 2
 208:	01 f1       	breq	.+64     	; 0x24a <ChangeNotes+0x48>
 20a:	28 f4       	brcc	.+10     	; 0x216 <ChangeNotes+0x14>
 20c:	88 23       	and	r24, r24
 20e:	49 f0       	breq	.+18     	; 0x222 <ChangeNotes+0x20>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	59 f0       	breq	.+22     	; 0x22a <ChangeNotes+0x28>
 214:	5b c0       	rjmp	.+182    	; 0x2cc <ChangeNotes+0xca>
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	b9 f1       	breq	.+110    	; 0x288 <ChangeNotes+0x86>
 21a:	d8 f0       	brcs	.+54     	; 0x252 <ChangeNotes+0x50>
 21c:	85 30       	cpi	r24, 0x05	; 5
 21e:	c1 f1       	breq	.+112    	; 0x290 <ChangeNotes+0x8e>
 220:	55 c0       	rjmp	.+170    	; 0x2cc <ChangeNotes+0xca>
	{
		case Init:
			state2 = Base;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
			break;
 228:	5d c0       	rjmp	.+186    	; 0x2e4 <ChangeNotes+0xe2>
			
		case Base:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
 22a:	01 99       	sbic	0x00, 1	; 0
 22c:	5b c0       	rjmp	.+182    	; 0x2e4 <ChangeNotes+0xe2>
 22e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <toggle>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	09 f0       	breq	.+2      	; 0x238 <ChangeNotes+0x36>
 236:	56 c0       	rjmp	.+172    	; 0x2e4 <ChangeNotes+0xe2>
 238:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <index>
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	08 f0       	brcs	.+2      	; 0x242 <ChangeNotes+0x40>
 240:	51 c0       	rjmp	.+162    	; 0x2e4 <ChangeNotes+0xe2>
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
 248:	87 c0       	rjmp	.+270    	; 0x358 <ChangeNotes+0x156>
			else{state2 = Base; }
			break;
		
		case Incr:
			state2 = Rel1;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
			break;
 250:	08 95       	ret
		
		case Rel1:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
 252:	01 99       	sbic	0x00, 1	; 0
 254:	0e c0       	rjmp	.+28     	; 0x272 <ChangeNotes+0x70>
 256:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <toggle>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	09 f0       	breq	.+2      	; 0x260 <ChangeNotes+0x5e>
 25e:	75 c0       	rjmp	.+234    	; 0x34a <ChangeNotes+0x148>
 260:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <index>
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	08 f0       	brcs	.+2      	; 0x26a <ChangeNotes+0x68>
 268:	6d c0       	rjmp	.+218    	; 0x344 <ChangeNotes+0x142>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
 270:	73 c0       	rjmp	.+230    	; 0x358 <ChangeNotes+0x156>
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 272:	02 99       	sbic	0x00, 2	; 0
 274:	74 c0       	rjmp	.+232    	; 0x35e <ChangeNotes+0x15c>
 276:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <toggle>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	09 f0       	breq	.+2      	; 0x280 <ChangeNotes+0x7e>
 27e:	6f c0       	rjmp	.+222    	; 0x35e <ChangeNotes+0x15c>
 280:	84 e0       	ldi	r24, 0x04	; 4
 282:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
 286:	4c c0       	rjmp	.+152    	; 0x320 <ChangeNotes+0x11e>
			else{state2 = Rel1; }
			break;
		
		case Decr:
			state2 = Rel2;
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
			break;
 28e:	08 95       	ret
		
		case Rel2:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
 290:	01 99       	sbic	0x00, 1	; 0
 292:	0e c0       	rjmp	.+28     	; 0x2b0 <ChangeNotes+0xae>
 294:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <toggle>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <ChangeNotes+0x9c>
 29c:	5b c0       	rjmp	.+182    	; 0x354 <ChangeNotes+0x152>
 29e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <index>
 2a2:	88 30       	cpi	r24, 0x08	; 8
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <ChangeNotes+0xa6>
 2a6:	53 c0       	rjmp	.+166    	; 0x34e <ChangeNotes+0x14c>
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
 2ae:	54 c0       	rjmp	.+168    	; 0x358 <ChangeNotes+0x156>
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 2b0:	02 99       	sbic	0x00, 2	; 0
 2b2:	08 c0       	rjmp	.+16     	; 0x2c4 <ChangeNotes+0xc2>
 2b4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <toggle>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <ChangeNotes+0xc2>
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
 2c2:	2e c0       	rjmp	.+92     	; 0x320 <ChangeNotes+0x11e>
			else{state2 = Base; }
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <ChangeNotes+0xe2>
			break;
	}//State Transitions
	
	switch(state2)//State Actions
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	51 f0       	breq	.+20     	; 0x2e4 <ChangeNotes+0xe2>
 2d0:	28 f0       	brcs	.+10     	; 0x2dc <ChangeNotes+0xda>
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <ChangeNotes+0xee>
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	19 f1       	breq	.+70     	; 0x320 <ChangeNotes+0x11e>
 2da:	08 95       	ret
	{
		case Init:
			index = 0;
 2dc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <index>
			PWM_off();
 2e0:	69 cf       	rjmp	.-302    	; 0x1b4 <PWM_off>
			break;
		
		case Base:
			PWM_on();
 2e2:	08 95       	ret
 2e4:	5c df       	rcall	.-328    	; 0x19e <PWM_on>
			set_PWM(0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	cb 01       	movw	r24, r22
 2ec:	ed ce       	rjmp	.-550    	; 0xc8 <set_PWM>
			break;
 2ee:	08 95       	ret
		
		case Incr:
			if(index <=7){index++; set_PWM(freq[index]);}
 2f0:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <index>
 2f4:	e8 30       	cpi	r30, 0x08	; 8
 2f6:	80 f4       	brcc	.+32     	; 0x318 <ChangeNotes+0x116>
 2f8:	ef 5f       	subi	r30, 0xFF	; 255
 2fa:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <index>
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	e0 50       	subi	r30, 0x00	; 0
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	60 81       	ld	r22, Z
 30e:	71 81       	ldd	r23, Z+1	; 0x01
 310:	82 81       	ldd	r24, Z+2	; 0x02
 312:	93 81       	ldd	r25, Z+3	; 0x03
 314:	d9 ce       	rjmp	.-590    	; 0xc8 <set_PWM>
 316:	08 95       	ret
			else{index = 8;}
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <index>
 31e:	08 95       	ret
		case Rel1:
		
			break;
		
		case Decr:
			if(index >=0){index--; set_PWM(freq[index]);}
 320:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <index>
 324:	e1 50       	subi	r30, 0x01	; 1
 326:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <index>
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	60 81       	ld	r22, Z
 33a:	71 81       	ldd	r23, Z+1	; 0x01
 33c:	82 81       	ldd	r24, Z+2	; 0x02
 33e:	93 81       	ldd	r25, Z+3	; 0x03
 340:	c3 ce       	rjmp	.-634    	; 0xc8 <set_PWM>
		
		case Rel2:
		
			break;
	}//State Actions
 342:	08 95       	ret
			state2 = Rel1;
			break;
		
		case Rel1:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 344:	02 9b       	sbis	0x00, 2	; 0
 346:	9c cf       	rjmp	.-200    	; 0x280 <ChangeNotes+0x7e>
 348:	08 95       	ret
 34a:	80 b1       	in	r24, 0x00	; 0
 34c:	08 95       	ret
			state2 = Rel2;
			break;
		
		case Rel2:
			if(A1 && toggle == 1 && index <= 7){state2 = Incr; }
			else if(A2 && toggle == 1 && index >= 0){state2 = Decr; }
 34e:	02 9b       	sbis	0x00, 2	; 0
 350:	b5 cf       	rjmp	.-150    	; 0x2bc <ChangeNotes+0xba>
 352:	b8 cf       	rjmp	.-144    	; 0x2c4 <ChangeNotes+0xc2>
 354:	80 b1       	in	r24, 0x00	; 0
 356:	b6 cf       	rjmp	.-148    	; 0x2c4 <ChangeNotes+0xc2>
			PWM_on();
			set_PWM(0);
			break;
		
		case Incr:
			if(index <=7){index++; set_PWM(freq[index]);}
 358:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <index>
 35c:	cd cf       	rjmp	.-102    	; 0x2f8 <ChangeNotes+0xf6>
 35e:	08 95       	ret

00000360 <main>:
	_avr_timer_cntcurr = _avr_timer_M;
}*/

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //inputs
 360:	11 b8       	out	0x01, r1	; 1
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //outputs
 366:	84 b9       	out	0x04, r24	; 4
 368:	15 b8       	out	0x05, r1	; 5
    
	state = Start;
 36a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <state>
	state2 = Base;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <state2>
	
	/*TimerSet(timerPeriod);
	TimerOn();*/
	PWM_on();
 374:	14 df       	rcall	.-472    	; 0x19e <PWM_on>
    while (1){
		ToggleOnOff();
 376:	23 df       	rcall	.-442    	; 0x1be <ToggleOnOff>
		ChangeNotes();
 378:	44 df       	rcall	.-376    	; 0x202 <ChangeNotes>
 37a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <index>
		set_PWM(freq[index]);
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	e0 50       	subi	r30, 0x00	; 0
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	60 81       	ld	r22, Z
 38e:	71 81       	ldd	r23, Z+1	; 0x01
 390:	82 81       	ldd	r24, Z+2	; 0x02
 392:	93 81       	ldd	r25, Z+3	; 0x03
 394:	99 de       	rcall	.-718    	; 0xc8 <set_PWM>
 396:	ef cf       	rjmp	.-34     	; 0x376 <main+0x16>

00000398 <__cmpsf2>:
 398:	9c d0       	rcall	.+312    	; 0x4d2 <__fp_cmp>
 39a:	08 f4       	brcc	.+2      	; 0x39e <__cmpsf2+0x6>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	08 95       	ret

000003a0 <__divsf3>:
 3a0:	0c d0       	rcall	.+24     	; 0x3ba <__divsf3x>
 3a2:	d2 c0       	rjmp	.+420    	; 0x548 <__fp_round>
 3a4:	ca d0       	rcall	.+404    	; 0x53a <__fp_pscB>
 3a6:	40 f0       	brcs	.+16     	; 0x3b8 <__divsf3+0x18>
 3a8:	c1 d0       	rcall	.+386    	; 0x52c <__fp_pscA>
 3aa:	30 f0       	brcs	.+12     	; 0x3b8 <__divsf3+0x18>
 3ac:	21 f4       	brne	.+8      	; 0x3b6 <__divsf3+0x16>
 3ae:	5f 3f       	cpi	r21, 0xFF	; 255
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <__divsf3+0x18>
 3b2:	b3 c0       	rjmp	.+358    	; 0x51a <__fp_inf>
 3b4:	51 11       	cpse	r21, r1
 3b6:	fc c0       	rjmp	.+504    	; 0x5b0 <__fp_szero>
 3b8:	b6 c0       	rjmp	.+364    	; 0x526 <__fp_nan>

000003ba <__divsf3x>:
 3ba:	d7 d0       	rcall	.+430    	; 0x56a <__fp_split3>
 3bc:	98 f3       	brcs	.-26     	; 0x3a4 <__divsf3+0x4>

000003be <__divsf3_pse>:
 3be:	99 23       	and	r25, r25
 3c0:	c9 f3       	breq	.-14     	; 0x3b4 <__divsf3+0x14>
 3c2:	55 23       	and	r21, r21
 3c4:	b1 f3       	breq	.-20     	; 0x3b2 <__divsf3+0x12>
 3c6:	95 1b       	sub	r25, r21
 3c8:	55 0b       	sbc	r21, r21
 3ca:	bb 27       	eor	r27, r27
 3cc:	aa 27       	eor	r26, r26
 3ce:	62 17       	cp	r22, r18
 3d0:	73 07       	cpc	r23, r19
 3d2:	84 07       	cpc	r24, r20
 3d4:	38 f0       	brcs	.+14     	; 0x3e4 <__divsf3_pse+0x26>
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	44 1f       	adc	r20, r20
 3e0:	aa 1f       	adc	r26, r26
 3e2:	a9 f3       	breq	.-22     	; 0x3ce <__divsf3_pse+0x10>
 3e4:	33 d0       	rcall	.+102    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3e6:	0e 2e       	mov	r0, r30
 3e8:	3a f0       	brmi	.+14     	; 0x3f8 <__divsf3_pse+0x3a>
 3ea:	e0 e8       	ldi	r30, 0x80	; 128
 3ec:	30 d0       	rcall	.+96     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3ee:	91 50       	subi	r25, 0x01	; 1
 3f0:	50 40       	sbci	r21, 0x00	; 0
 3f2:	e6 95       	lsr	r30
 3f4:	00 1c       	adc	r0, r0
 3f6:	ca f7       	brpl	.-14     	; 0x3ea <__divsf3_pse+0x2c>
 3f8:	29 d0       	rcall	.+82     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3fa:	fe 2f       	mov	r31, r30
 3fc:	27 d0       	rcall	.+78     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	bb 1f       	adc	r27, r27
 406:	26 17       	cp	r18, r22
 408:	37 07       	cpc	r19, r23
 40a:	48 07       	cpc	r20, r24
 40c:	ab 07       	cpc	r26, r27
 40e:	b0 e8       	ldi	r27, 0x80	; 128
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	bb 0b       	sbc	r27, r27
 414:	80 2d       	mov	r24, r0
 416:	bf 01       	movw	r22, r30
 418:	ff 27       	eor	r31, r31
 41a:	93 58       	subi	r25, 0x83	; 131
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	2a f0       	brmi	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 420:	9e 3f       	cpi	r25, 0xFE	; 254
 422:	51 05       	cpc	r21, r1
 424:	68 f0       	brcs	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 426:	79 c0       	rjmp	.+242    	; 0x51a <__fp_inf>
 428:	c3 c0       	rjmp	.+390    	; 0x5b0 <__fp_szero>
 42a:	5f 3f       	cpi	r21, 0xFF	; 255
 42c:	ec f3       	brlt	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42e:	98 3e       	cpi	r25, 0xE8	; 232
 430:	dc f3       	brlt	.-10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 432:	86 95       	lsr	r24
 434:	77 95       	ror	r23
 436:	67 95       	ror	r22
 438:	b7 95       	ror	r27
 43a:	f7 95       	ror	r31
 43c:	9f 5f       	subi	r25, 0xFF	; 255
 43e:	c9 f7       	brne	.-14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 440:	88 0f       	add	r24, r24
 442:	91 1d       	adc	r25, r1
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	97 f9       	bld	r25, 7
 44a:	08 95       	ret
 44c:	e1 e0       	ldi	r30, 0x01	; 1
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	88 1f       	adc	r24, r24
 454:	bb 1f       	adc	r27, r27
 456:	62 17       	cp	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	84 07       	cpc	r24, r20
 45c:	ba 07       	cpc	r27, r26
 45e:	20 f0       	brcs	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 460:	62 1b       	sub	r22, r18
 462:	73 0b       	sbc	r23, r19
 464:	84 0b       	sbc	r24, r20
 466:	ba 0b       	sbc	r27, r26
 468:	ee 1f       	adc	r30, r30
 46a:	88 f7       	brcc	.-30     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 46c:	e0 95       	com	r30
 46e:	08 95       	ret

00000470 <__fixsfsi>:
 470:	04 d0       	rcall	.+8      	; 0x47a <__fixunssfsi>
 472:	68 94       	set
 474:	b1 11       	cpse	r27, r1
 476:	9c c0       	rjmp	.+312    	; 0x5b0 <__fp_szero>
 478:	08 95       	ret

0000047a <__fixunssfsi>:
 47a:	7f d0       	rcall	.+254    	; 0x57a <__fp_splitA>
 47c:	88 f0       	brcs	.+34     	; 0x4a0 <__fixunssfsi+0x26>
 47e:	9f 57       	subi	r25, 0x7F	; 127
 480:	90 f0       	brcs	.+36     	; 0x4a6 <__fixunssfsi+0x2c>
 482:	b9 2f       	mov	r27, r25
 484:	99 27       	eor	r25, r25
 486:	b7 51       	subi	r27, 0x17	; 23
 488:	a0 f0       	brcs	.+40     	; 0x4b2 <__fixunssfsi+0x38>
 48a:	d1 f0       	breq	.+52     	; 0x4c0 <__fixunssfsi+0x46>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	1a f0       	brmi	.+6      	; 0x49c <__fixunssfsi+0x22>
 496:	ba 95       	dec	r27
 498:	c9 f7       	brne	.-14     	; 0x48c <__fixunssfsi+0x12>
 49a:	12 c0       	rjmp	.+36     	; 0x4c0 <__fixunssfsi+0x46>
 49c:	b1 30       	cpi	r27, 0x01	; 1
 49e:	81 f0       	breq	.+32     	; 0x4c0 <__fixunssfsi+0x46>
 4a0:	86 d0       	rcall	.+268    	; 0x5ae <__fp_zero>
 4a2:	b1 e0       	ldi	r27, 0x01	; 1
 4a4:	08 95       	ret
 4a6:	83 c0       	rjmp	.+262    	; 0x5ae <__fp_zero>
 4a8:	67 2f       	mov	r22, r23
 4aa:	78 2f       	mov	r23, r24
 4ac:	88 27       	eor	r24, r24
 4ae:	b8 5f       	subi	r27, 0xF8	; 248
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <__fixunssfsi+0x46>
 4b2:	b9 3f       	cpi	r27, 0xF9	; 249
 4b4:	cc f3       	brlt	.-14     	; 0x4a8 <__fixunssfsi+0x2e>
 4b6:	86 95       	lsr	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b3 95       	inc	r27
 4be:	d9 f7       	brne	.-10     	; 0x4b6 <__fixunssfsi+0x3c>
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__fixunssfsi+0x56>
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__fp_cmp>:
 4d2:	99 0f       	add	r25, r25
 4d4:	00 08       	sbc	r0, r0
 4d6:	55 0f       	add	r21, r21
 4d8:	aa 0b       	sbc	r26, r26
 4da:	e0 e8       	ldi	r30, 0x80	; 128
 4dc:	fe ef       	ldi	r31, 0xFE	; 254
 4de:	16 16       	cp	r1, r22
 4e0:	17 06       	cpc	r1, r23
 4e2:	e8 07       	cpc	r30, r24
 4e4:	f9 07       	cpc	r31, r25
 4e6:	c0 f0       	brcs	.+48     	; 0x518 <__fp_cmp+0x46>
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	e4 07       	cpc	r30, r20
 4ee:	f5 07       	cpc	r31, r21
 4f0:	98 f0       	brcs	.+38     	; 0x518 <__fp_cmp+0x46>
 4f2:	62 1b       	sub	r22, r18
 4f4:	73 0b       	sbc	r23, r19
 4f6:	84 0b       	sbc	r24, r20
 4f8:	95 0b       	sbc	r25, r21
 4fa:	39 f4       	brne	.+14     	; 0x50a <__fp_cmp+0x38>
 4fc:	0a 26       	eor	r0, r26
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_cmp+0x46>
 500:	23 2b       	or	r18, r19
 502:	24 2b       	or	r18, r20
 504:	25 2b       	or	r18, r21
 506:	21 f4       	brne	.+8      	; 0x510 <__fp_cmp+0x3e>
 508:	08 95       	ret
 50a:	0a 26       	eor	r0, r26
 50c:	09 f4       	brne	.+2      	; 0x510 <__fp_cmp+0x3e>
 50e:	a1 40       	sbci	r26, 0x01	; 1
 510:	a6 95       	lsr	r26
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	81 1d       	adc	r24, r1
 516:	81 1d       	adc	r24, r1
 518:	08 95       	ret

0000051a <__fp_inf>:
 51a:	97 f9       	bld	r25, 7
 51c:	9f 67       	ori	r25, 0x7F	; 127
 51e:	80 e8       	ldi	r24, 0x80	; 128
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	08 95       	ret

00000526 <__fp_nan>:
 526:	9f ef       	ldi	r25, 0xFF	; 255
 528:	80 ec       	ldi	r24, 0xC0	; 192
 52a:	08 95       	ret

0000052c <__fp_pscA>:
 52c:	00 24       	eor	r0, r0
 52e:	0a 94       	dec	r0
 530:	16 16       	cp	r1, r22
 532:	17 06       	cpc	r1, r23
 534:	18 06       	cpc	r1, r24
 536:	09 06       	cpc	r0, r25
 538:	08 95       	ret

0000053a <__fp_pscB>:
 53a:	00 24       	eor	r0, r0
 53c:	0a 94       	dec	r0
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	05 06       	cpc	r0, r21
 546:	08 95       	ret

00000548 <__fp_round>:
 548:	09 2e       	mov	r0, r25
 54a:	03 94       	inc	r0
 54c:	00 0c       	add	r0, r0
 54e:	11 f4       	brne	.+4      	; 0x554 <__fp_round+0xc>
 550:	88 23       	and	r24, r24
 552:	52 f0       	brmi	.+20     	; 0x568 <__fp_round+0x20>
 554:	bb 0f       	add	r27, r27
 556:	40 f4       	brcc	.+16     	; 0x568 <__fp_round+0x20>
 558:	bf 2b       	or	r27, r31
 55a:	11 f4       	brne	.+4      	; 0x560 <__fp_round+0x18>
 55c:	60 ff       	sbrs	r22, 0
 55e:	04 c0       	rjmp	.+8      	; 0x568 <__fp_round+0x20>
 560:	6f 5f       	subi	r22, 0xFF	; 255
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	8f 4f       	sbci	r24, 0xFF	; 255
 566:	9f 4f       	sbci	r25, 0xFF	; 255
 568:	08 95       	ret

0000056a <__fp_split3>:
 56a:	57 fd       	sbrc	r21, 7
 56c:	90 58       	subi	r25, 0x80	; 128
 56e:	44 0f       	add	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	59 f0       	breq	.+22     	; 0x58a <__fp_splitA+0x10>
 574:	5f 3f       	cpi	r21, 0xFF	; 255
 576:	71 f0       	breq	.+28     	; 0x594 <__fp_splitA+0x1a>
 578:	47 95       	ror	r20

0000057a <__fp_splitA>:
 57a:	88 0f       	add	r24, r24
 57c:	97 fb       	bst	r25, 7
 57e:	99 1f       	adc	r25, r25
 580:	61 f0       	breq	.+24     	; 0x59a <__fp_splitA+0x20>
 582:	9f 3f       	cpi	r25, 0xFF	; 255
 584:	79 f0       	breq	.+30     	; 0x5a4 <__fp_splitA+0x2a>
 586:	87 95       	ror	r24
 588:	08 95       	ret
 58a:	12 16       	cp	r1, r18
 58c:	13 06       	cpc	r1, r19
 58e:	14 06       	cpc	r1, r20
 590:	55 1f       	adc	r21, r21
 592:	f2 cf       	rjmp	.-28     	; 0x578 <__fp_split3+0xe>
 594:	46 95       	lsr	r20
 596:	f1 df       	rcall	.-30     	; 0x57a <__fp_splitA>
 598:	08 c0       	rjmp	.+16     	; 0x5aa <__fp_splitA+0x30>
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	f1 cf       	rjmp	.-30     	; 0x586 <__fp_splitA+0xc>
 5a4:	86 95       	lsr	r24
 5a6:	71 05       	cpc	r23, r1
 5a8:	61 05       	cpc	r22, r1
 5aa:	08 94       	sec
 5ac:	08 95       	ret

000005ae <__fp_zero>:
 5ae:	e8 94       	clt

000005b0 <__fp_szero>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	66 27       	eor	r22, r22
 5b4:	77 27       	eor	r23, r23
 5b6:	cb 01       	movw	r24, r22
 5b8:	97 f9       	bld	r25, 7
 5ba:	08 95       	ret

000005bc <__gesf2>:
 5bc:	8a df       	rcall	.-236    	; 0x4d2 <__fp_cmp>
 5be:	08 f4       	brcc	.+2      	; 0x5c2 <__gesf2+0x6>
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__mulsf3>:
 5c4:	0b d0       	rcall	.+22     	; 0x5dc <__mulsf3x>
 5c6:	c0 cf       	rjmp	.-128    	; 0x548 <__fp_round>
 5c8:	b1 df       	rcall	.-158    	; 0x52c <__fp_pscA>
 5ca:	28 f0       	brcs	.+10     	; 0x5d6 <__mulsf3+0x12>
 5cc:	b6 df       	rcall	.-148    	; 0x53a <__fp_pscB>
 5ce:	18 f0       	brcs	.+6      	; 0x5d6 <__mulsf3+0x12>
 5d0:	95 23       	and	r25, r21
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <__mulsf3+0x12>
 5d4:	a2 cf       	rjmp	.-188    	; 0x51a <__fp_inf>
 5d6:	a7 cf       	rjmp	.-178    	; 0x526 <__fp_nan>
 5d8:	11 24       	eor	r1, r1
 5da:	ea cf       	rjmp	.-44     	; 0x5b0 <__fp_szero>

000005dc <__mulsf3x>:
 5dc:	c6 df       	rcall	.-116    	; 0x56a <__fp_split3>
 5de:	a0 f3       	brcs	.-24     	; 0x5c8 <__mulsf3+0x4>

000005e0 <__mulsf3_pse>:
 5e0:	95 9f       	mul	r25, r21
 5e2:	d1 f3       	breq	.-12     	; 0x5d8 <__mulsf3+0x14>
 5e4:	95 0f       	add	r25, r21
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	55 1f       	adc	r21, r21
 5ea:	62 9f       	mul	r22, r18
 5ec:	f0 01       	movw	r30, r0
 5ee:	72 9f       	mul	r23, r18
 5f0:	bb 27       	eor	r27, r27
 5f2:	f0 0d       	add	r31, r0
 5f4:	b1 1d       	adc	r27, r1
 5f6:	63 9f       	mul	r22, r19
 5f8:	aa 27       	eor	r26, r26
 5fa:	f0 0d       	add	r31, r0
 5fc:	b1 1d       	adc	r27, r1
 5fe:	aa 1f       	adc	r26, r26
 600:	64 9f       	mul	r22, r20
 602:	66 27       	eor	r22, r22
 604:	b0 0d       	add	r27, r0
 606:	a1 1d       	adc	r26, r1
 608:	66 1f       	adc	r22, r22
 60a:	82 9f       	mul	r24, r18
 60c:	22 27       	eor	r18, r18
 60e:	b0 0d       	add	r27, r0
 610:	a1 1d       	adc	r26, r1
 612:	62 1f       	adc	r22, r18
 614:	73 9f       	mul	r23, r19
 616:	b0 0d       	add	r27, r0
 618:	a1 1d       	adc	r26, r1
 61a:	62 1f       	adc	r22, r18
 61c:	83 9f       	mul	r24, r19
 61e:	a0 0d       	add	r26, r0
 620:	61 1d       	adc	r22, r1
 622:	22 1f       	adc	r18, r18
 624:	74 9f       	mul	r23, r20
 626:	33 27       	eor	r19, r19
 628:	a0 0d       	add	r26, r0
 62a:	61 1d       	adc	r22, r1
 62c:	23 1f       	adc	r18, r19
 62e:	84 9f       	mul	r24, r20
 630:	60 0d       	add	r22, r0
 632:	21 1d       	adc	r18, r1
 634:	82 2f       	mov	r24, r18
 636:	76 2f       	mov	r23, r22
 638:	6a 2f       	mov	r22, r26
 63a:	11 24       	eor	r1, r1
 63c:	9f 57       	subi	r25, 0x7F	; 127
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	8a f0       	brmi	.+34     	; 0x664 <__mulsf3_pse+0x84>
 642:	e1 f0       	breq	.+56     	; 0x67c <__mulsf3_pse+0x9c>
 644:	88 23       	and	r24, r24
 646:	4a f0       	brmi	.+18     	; 0x65a <__mulsf3_pse+0x7a>
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	bb 1f       	adc	r27, r27
 64e:	66 1f       	adc	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	91 50       	subi	r25, 0x01	; 1
 656:	50 40       	sbci	r21, 0x00	; 0
 658:	a9 f7       	brne	.-22     	; 0x644 <__mulsf3_pse+0x64>
 65a:	9e 3f       	cpi	r25, 0xFE	; 254
 65c:	51 05       	cpc	r21, r1
 65e:	70 f0       	brcs	.+28     	; 0x67c <__mulsf3_pse+0x9c>
 660:	5c cf       	rjmp	.-328    	; 0x51a <__fp_inf>
 662:	a6 cf       	rjmp	.-180    	; 0x5b0 <__fp_szero>
 664:	5f 3f       	cpi	r21, 0xFF	; 255
 666:	ec f3       	brlt	.-6      	; 0x662 <__mulsf3_pse+0x82>
 668:	98 3e       	cpi	r25, 0xE8	; 232
 66a:	dc f3       	brlt	.-10     	; 0x662 <__mulsf3_pse+0x82>
 66c:	86 95       	lsr	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	f7 95       	ror	r31
 676:	e7 95       	ror	r30
 678:	9f 5f       	subi	r25, 0xFF	; 255
 67a:	c1 f7       	brne	.-16     	; 0x66c <__mulsf3_pse+0x8c>
 67c:	fe 2b       	or	r31, r30
 67e:	88 0f       	add	r24, r24
 680:	91 1d       	adc	r25, r1
 682:	96 95       	lsr	r25
 684:	87 95       	ror	r24
 686:	97 f9       	bld	r25, 7
 688:	08 95       	ret

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
