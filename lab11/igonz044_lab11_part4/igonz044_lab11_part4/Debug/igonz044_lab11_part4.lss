
igonz044_lab11_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000052a  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800116  00800116  000005d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2a  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a7  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000798  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d3  00000000  00000000  00002d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000335a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	c3 c0       	rjmp	.+390    	; 0x1bc <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d0 01       	movw	r26, r0
  8e:	23 02       	muls	r18, r19
  90:	23 02       	muls	r18, r19
  92:	23 02       	muls	r18, r19
  94:	23 02       	muls	r18, r19
  96:	23 02       	muls	r18, r19
  98:	23 02       	muls	r18, r19
  9a:	23 02       	muls	r18, r19
  9c:	23 02       	muls	r18, r19
  9e:	23 02       	muls	r18, r19
  a0:	23 02       	muls	r18, r19
  a2:	23 02       	muls	r18, r19
  a4:	23 02       	muls	r18, r19
  a6:	23 02       	muls	r18, r19
  a8:	23 02       	muls	r18, r19
  aa:	23 02       	muls	r18, r19
  ac:	23 02       	muls	r18, r19
  ae:	23 02       	muls	r18, r19
  b0:	23 02       	muls	r18, r19
  b2:	23 02       	muls	r18, r19
  b4:	23 02       	muls	r18, r19
  b6:	23 02       	muls	r18, r19
  b8:	23 02       	muls	r18, r19
  ba:	23 02       	muls	r18, r19
  bc:	23 02       	muls	r18, r19
  be:	23 02       	muls	r18, r19
  c0:	23 02       	muls	r18, r19
  c2:	23 02       	muls	r18, r19
  c4:	23 02       	muls	r18, r19
  c6:	23 02       	muls	r18, r19
  c8:	23 02       	muls	r18, r19
  ca:	23 02       	muls	r18, r19
  cc:	23 02       	muls	r18, r19
  ce:	23 02       	muls	r18, r19
  d0:	23 02       	muls	r18, r19
  d2:	1f 02       	muls	r17, r31
  d4:	23 02       	muls	r18, r19
  d6:	23 02       	muls	r18, r19
  d8:	23 02       	muls	r18, r19
  da:	23 02       	muls	r18, r19
  dc:	23 02       	muls	r18, r19
  de:	23 02       	muls	r18, r19
  e0:	18 02       	muls	r17, r24
  e2:	23 02       	muls	r18, r19
  e4:	23 02       	muls	r18, r19
  e6:	23 02       	muls	r18, r19
  e8:	23 02       	muls	r18, r19
  ea:	23 02       	muls	r18, r19
  ec:	1c 02       	muls	r17, r28
  ee:	e4 01       	movw	r28, r8
  f0:	e8 01       	movw	r28, r16
  f2:	ec 01       	movw	r28, r24
  f4:	f0 01       	movw	r30, r0
  f6:	f4 01       	movw	r30, r8
  f8:	f8 01       	movw	r30, r16
  fa:	fc 01       	movw	r30, r24
  fc:	00 02       	muls	r16, r16
  fe:	04 02       	muls	r16, r20
 100:	23 02       	muls	r18, r19
 102:	23 02       	muls	r18, r19
 104:	23 02       	muls	r18, r19
 106:	23 02       	muls	r18, r19
 108:	23 02       	muls	r18, r19
 10a:	23 02       	muls	r18, r19
 10c:	23 02       	muls	r18, r19
 10e:	08 02       	muls	r16, r24
 110:	0c 02       	muls	r16, r28
 112:	10 02       	muls	r17, r16
 114:	14 02       	muls	r17, r20

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	ea e2       	ldi	r30, 0x2A	; 42
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a6 31       	cpi	r26, 0x16	; 22
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a6 e1       	ldi	r26, 0x16	; 22
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a6 32       	cpi	r26, 0x26	; 38
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	8d d1       	rcall	.+794    	; 0x468 <main>
 14e:	eb c1       	rjmp	.+982    	; 0x526 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <TimerSet>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
 152:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 156:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 15a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 15e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
 162:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <_avr_timer_cntcurr>
 166:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <_avr_timer_cntcurr+0x1>
 16a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_cntcurr+0x2>
 16e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_cntcurr+0x3>
 172:	08 95       	ret

00000174 <TimerOn>:
 174:	8b e0       	ldi	r24, 0x0B	; 11
 176:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17a:	8d e7       	ldi	r24, 0x7D	; 125
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 18c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 190:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 194:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 198:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 19c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 1a0:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 1a4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 1a8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 1ac:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 1b0:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 1b4:	8f b7       	in	r24, 0x3f	; 63
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8f bf       	out	0x3f, r24	; 63
 1ba:	08 95       	ret

000001bc <__vector_13>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <_avr_timer_cntcurr>
 1d2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <_avr_timer_cntcurr+0x1>
 1d6:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <_avr_timer_cntcurr+0x2>
 1da:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <_avr_timer_cntcurr+0x3>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1
 1e4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 1e8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 1ec:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 1f0:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 1f4:	89 2b       	or	r24, r25
 1f6:	8a 2b       	or	r24, r26
 1f8:	8b 2b       	or	r24, r27
 1fa:	99 f4       	brne	.+38     	; 0x222 <__vector_13+0x66>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <TimerFlag>
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 20a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 20e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 212:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <_avr_timer_cntcurr>
 216:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <_avr_timer_cntcurr+0x1>
 21a:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <_avr_timer_cntcurr+0x2>
 21e:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <_avr_timer_cntcurr+0x3>
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <delay_ms>:
 234:	18 16       	cp	r1, r24
 236:	19 06       	cpc	r1, r25
 238:	5c f0       	brlt	.+22     	; 0x250 <delay_ms+0x1c>
 23a:	08 95       	ret
 23c:	00 00       	nop
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	31 09       	sbc	r19, r1
 242:	e1 f7       	brne	.-8      	; 0x23c <delay_ms+0x8>
 244:	4f 5f       	subi	r20, 0xFF	; 255
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	84 17       	cp	r24, r20
 24a:	95 07       	cpc	r25, r21
 24c:	19 f4       	brne	.+6      	; 0x254 <delay_ms+0x20>
 24e:	08 95       	ret
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	27 e0       	ldi	r18, 0x07	; 7
 256:	33 e0       	ldi	r19, 0x03	; 3
 258:	f1 cf       	rjmp	.-30     	; 0x23c <delay_ms+0x8>

0000025a <LCD_WriteCommand>:
 25a:	10 98       	cbi	0x02, 0	; 2
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	11 9a       	sbi	0x02, 1	; 2
 260:	00 00       	nop
 262:	11 98       	cbi	0x02, 1	; 2
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	e5 cf       	rjmp	.-54     	; 0x234 <delay_ms>
 26a:	08 95       	ret

0000026c <LCD_ClearScreen>:
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	f5 cf       	rjmp	.-22     	; 0x25a <LCD_WriteCommand>
 270:	08 95       	ret

00000272 <LCD_Cursor>:
 272:	81 31       	cpi	r24, 0x11	; 17
 274:	18 f4       	brcc	.+6      	; 0x27c <LCD_Cursor+0xa>
 276:	81 58       	subi	r24, 0x81	; 129
 278:	f0 cf       	rjmp	.-32     	; 0x25a <LCD_WriteCommand>
 27a:	08 95       	ret
 27c:	81 55       	subi	r24, 0x51	; 81
 27e:	ed cf       	rjmp	.-38     	; 0x25a <LCD_WriteCommand>
 280:	08 95       	ret

00000282 <LCD_init>:
 282:	84 e6       	ldi	r24, 0x64	; 100
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	d6 df       	rcall	.-84     	; 0x234 <delay_ms>
 288:	88 e3       	ldi	r24, 0x38	; 56
 28a:	e7 df       	rcall	.-50     	; 0x25a <LCD_WriteCommand>
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	e5 df       	rcall	.-54     	; 0x25a <LCD_WriteCommand>
 290:	8f e0       	ldi	r24, 0x0F	; 15
 292:	e3 df       	rcall	.-58     	; 0x25a <LCD_WriteCommand>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	e1 df       	rcall	.-62     	; 0x25a <LCD_WriteCommand>
 298:	8a e0       	ldi	r24, 0x0A	; 10
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	cb cf       	rjmp	.-106    	; 0x234 <delay_ms>
 29e:	08 95       	ret

000002a0 <LCD_WriteData>:
 2a0:	10 9a       	sbi	0x02, 0	; 2
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	11 9a       	sbi	0x02, 1	; 2
 2a6:	00 00       	nop
 2a8:	11 98       	cbi	0x02, 1	; 2
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	c2 cf       	rjmp	.-124    	; 0x234 <delay_ms>
 2b0:	08 95       	ret

000002b2 <LCD_DisplayString>:
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	18 2f       	mov	r17, r24
 2bc:	eb 01       	movw	r28, r22
 2be:	d6 df       	rcall	.-84     	; 0x26c <LCD_ClearScreen>
 2c0:	88 81       	ld	r24, Y
 2c2:	88 23       	and	r24, r24
 2c4:	51 f0       	breq	.+20     	; 0x2da <LCD_DisplayString+0x28>
 2c6:	01 e0       	ldi	r16, 0x01	; 1
 2c8:	01 0f       	add	r16, r17
 2ca:	81 2f       	mov	r24, r17
 2cc:	d2 df       	rcall	.-92     	; 0x272 <LCD_Cursor>
 2ce:	89 91       	ld	r24, Y+
 2d0:	e7 df       	rcall	.-50     	; 0x2a0 <LCD_WriteData>
 2d2:	10 2f       	mov	r17, r16
 2d4:	88 81       	ld	r24, Y
 2d6:	81 11       	cpse	r24, r1
 2d8:	f6 cf       	rjmp	.-20     	; 0x2c6 <LCD_DisplayString+0x14>
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <GetKeypadKey>:
 2e4:	8f ee       	ldi	r24, 0xEF	; 239
 2e6:	88 b9       	out	0x08, r24	; 8
 2e8:	00 00       	nop
 2ea:	30 9b       	sbis	0x06, 0	; 6
 2ec:	29 c0       	rjmp	.+82     	; 0x340 <GetKeypadKey+0x5c>
 2ee:	31 9b       	sbis	0x06, 1	; 6
 2f0:	29 c0       	rjmp	.+82     	; 0x344 <GetKeypadKey+0x60>
 2f2:	32 9b       	sbis	0x06, 2	; 6
 2f4:	29 c0       	rjmp	.+82     	; 0x348 <GetKeypadKey+0x64>
 2f6:	33 9b       	sbis	0x06, 3	; 6
 2f8:	29 c0       	rjmp	.+82     	; 0x34c <GetKeypadKey+0x68>
 2fa:	8f ed       	ldi	r24, 0xDF	; 223
 2fc:	88 b9       	out	0x08, r24	; 8
 2fe:	00 00       	nop
 300:	30 9b       	sbis	0x06, 0	; 6
 302:	26 c0       	rjmp	.+76     	; 0x350 <GetKeypadKey+0x6c>
 304:	31 9b       	sbis	0x06, 1	; 6
 306:	26 c0       	rjmp	.+76     	; 0x354 <GetKeypadKey+0x70>
 308:	32 9b       	sbis	0x06, 2	; 6
 30a:	26 c0       	rjmp	.+76     	; 0x358 <GetKeypadKey+0x74>
 30c:	33 9b       	sbis	0x06, 3	; 6
 30e:	26 c0       	rjmp	.+76     	; 0x35c <GetKeypadKey+0x78>
 310:	8f eb       	ldi	r24, 0xBF	; 191
 312:	88 b9       	out	0x08, r24	; 8
 314:	00 00       	nop
 316:	30 9b       	sbis	0x06, 0	; 6
 318:	23 c0       	rjmp	.+70     	; 0x360 <GetKeypadKey+0x7c>
 31a:	31 9b       	sbis	0x06, 1	; 6
 31c:	23 c0       	rjmp	.+70     	; 0x364 <GetKeypadKey+0x80>
 31e:	32 9b       	sbis	0x06, 2	; 6
 320:	23 c0       	rjmp	.+70     	; 0x368 <GetKeypadKey+0x84>
 322:	33 9b       	sbis	0x06, 3	; 6
 324:	23 c0       	rjmp	.+70     	; 0x36c <GetKeypadKey+0x88>
 326:	8f e7       	ldi	r24, 0x7F	; 127
 328:	88 b9       	out	0x08, r24	; 8
 32a:	00 00       	nop
 32c:	30 9b       	sbis	0x06, 0	; 6
 32e:	20 c0       	rjmp	.+64     	; 0x370 <GetKeypadKey+0x8c>
 330:	31 9b       	sbis	0x06, 1	; 6
 332:	20 c0       	rjmp	.+64     	; 0x374 <GetKeypadKey+0x90>
 334:	32 9b       	sbis	0x06, 2	; 6
 336:	20 c0       	rjmp	.+64     	; 0x378 <GetKeypadKey+0x94>
 338:	33 9b       	sbis	0x06, 3	; 6
 33a:	20 c0       	rjmp	.+64     	; 0x37c <GetKeypadKey+0x98>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	81 e3       	ldi	r24, 0x31	; 49
 342:	08 95       	ret
 344:	84 e3       	ldi	r24, 0x34	; 52
 346:	08 95       	ret
 348:	87 e3       	ldi	r24, 0x37	; 55
 34a:	08 95       	ret
 34c:	8a e2       	ldi	r24, 0x2A	; 42
 34e:	08 95       	ret
 350:	82 e3       	ldi	r24, 0x32	; 50
 352:	08 95       	ret
 354:	85 e3       	ldi	r24, 0x35	; 53
 356:	08 95       	ret
 358:	88 e3       	ldi	r24, 0x38	; 56
 35a:	08 95       	ret
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	08 95       	ret
 360:	83 e3       	ldi	r24, 0x33	; 51
 362:	08 95       	ret
 364:	86 e3       	ldi	r24, 0x36	; 54
 366:	08 95       	ret
 368:	89 e3       	ldi	r24, 0x39	; 57
 36a:	08 95       	ret
 36c:	83 e2       	ldi	r24, 0x23	; 35
 36e:	08 95       	ret
 370:	81 e4       	ldi	r24, 0x41	; 65
 372:	08 95       	ret
 374:	82 e4       	ldi	r24, 0x42	; 66
 376:	08 95       	ret
 378:	83 e4       	ldi	r24, 0x43	; 67
 37a:	08 95       	ret
 37c:	84 e4       	ldi	r24, 0x44	; 68
 37e:	08 95       	ret

00000380 <KeyPad_LCD_SM2>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	ae df       	rcall	.-164    	; 0x2e4 <GetKeypadKey>
 388:	20 97       	sbiw	r28, 0x00	; 0
 38a:	09 f0       	breq	.+2      	; 0x38e <KeyPad_LCD_SM2+0xe>
 38c:	69 c0       	rjmp	.+210    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	85 34       	cpi	r24, 0x45	; 69
 392:	91 05       	cpc	r25, r1
 394:	08 f0       	brcs	.+2      	; 0x398 <KeyPad_LCD_SM2+0x18>
 396:	57 c0       	rjmp	.+174    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 398:	fc 01       	movw	r30, r24
 39a:	ea 5b       	subi	r30, 0xBA	; 186
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	ba c0       	rjmp	.+372    	; 0x514 <__tablejump2__>
 3a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempB>
 3a4:	8f 31       	cpi	r24, 0x1F	; 31
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <KeyPad_LCD_SM2+0x40>
 3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ac:	62 df       	rcall	.-316    	; 0x272 <LCD_Cursor>
 3ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempB>
 3b2:	80 5d       	subi	r24, 0xD0	; 208
 3b4:	75 df       	rcall	.-278    	; 0x2a0 <LCD_WriteData>
 3b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3c0:	8f e1       	ldi	r24, 0x1F	; 31
 3c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3c6:	42 c0       	rjmp	.+132    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3ce:	3e c0       	rjmp	.+124    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3d6:	3a c0       	rjmp	.+116    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3de:	36 c0       	rjmp	.+108    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3e6:	32 c0       	rjmp	.+100    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3e8:	85 e0       	ldi	r24, 0x05	; 5
 3ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3ee:	2e c0       	rjmp	.+92     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3f0:	86 e0       	ldi	r24, 0x06	; 6
 3f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3f6:	2a c0       	rjmp	.+84     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 3f8:	87 e0       	ldi	r24, 0x07	; 7
 3fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 3fe:	26 c0       	rjmp	.+76     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 400:	88 e0       	ldi	r24, 0x08	; 8
 402:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 406:	22 c0       	rjmp	.+68     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 408:	89 e0       	ldi	r24, 0x09	; 9
 40a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 40e:	1e c0       	rjmp	.+60     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 410:	81 e1       	ldi	r24, 0x11	; 17
 412:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 416:	1a c0       	rjmp	.+52     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 418:	82 e1       	ldi	r24, 0x12	; 18
 41a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 41e:	16 c0       	rjmp	.+44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 420:	83 e1       	ldi	r24, 0x13	; 19
 422:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 426:	12 c0       	rjmp	.+36     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 428:	84 e1       	ldi	r24, 0x14	; 20
 42a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 42e:	0e c0       	rjmp	.+28     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 430:	8a ef       	ldi	r24, 0xFA	; 250
 432:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 436:	0a c0       	rjmp	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 438:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tempB>
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43e:	83 ef       	ldi	r24, 0xF3	; 243
 440:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 444:	03 c0       	rjmp	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	8b e1       	ldi	r24, 0x1B	; 27
 448:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
 44c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 450:	81 31       	cpi	r24, 0x11	; 17
 452:	19 f4       	brne	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 45a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempB>
 45e:	85 b9       	out	0x05, r24	; 5
 460:	ce 01       	movw	r24, r28
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <main>:

int main()
{
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	81 b9       	out	0x01, r24	; 1
 46c:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 46e:	84 b9       	out	0x04, r24	; 4
 470:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 472:	90 ef       	ldi	r25, 0xF0	; 240
 474:	97 b9       	out	0x07, r25	; 7
 476:	9f e0       	ldi	r25, 0x0F	; 15
 478:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 47a:	8a b9       	out	0x0a, r24	; 10
 47c:	1b b8       	out	0x0b, r1	; 11
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	//There was only one task to do so the size = 1;
	task1.state = 0; 
 47e:	e6 e1       	ldi	r30, 0x16	; 22
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	10 82       	st	Z, r1
	task1.period = SM_Period; //Task Period.
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a0 e0       	ldi	r26, 0x00	; 0
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	81 83       	std	Z+1, r24	; 0x01
 48e:	92 83       	std	Z+2, r25	; 0x02
 490:	a3 83       	std	Z+3, r26	; 0x03
 492:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime =task1.period;
 494:	85 83       	std	Z+5, r24	; 0x05
 496:	96 83       	std	Z+6, r25	; 0x06
 498:	a7 83       	std	Z+7, r26	; 0x07
 49a:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &KeyPad_LCD_SM2;
 49c:	80 ec       	ldi	r24, 0xC0	; 192
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	92 87       	std	Z+10, r25	; 0x0a
 4a2:	81 87       	std	Z+9, r24	; 0x09

	// Set the timer and turn it on
	TimerSet(SM_Period);
 4a4:	65 e0       	ldi	r22, 0x05	; 5
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	52 de       	rcall	.-860    	; 0x152 <TimerSet>
	TimerOn();
 4ae:	62 de       	rcall	.-828    	; 0x174 <TimerOn>
	LCD_init();
 4b0:	e8 de       	rcall	.-560    	; 0x282 <LCD_init>
 4b2:	66 e0       	ldi	r22, 0x06	; 6
	LCD_DisplayString(1,"Congratulations");
 4b4:	71 e0       	ldi	r23, 0x01	; 1
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	fc de       	rcall	.-520    	; 0x2b2 <LCD_DisplayString>
 4ba:	c6 e1       	ldi	r28, 0x16	; 22

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			if ( tasks[i]->elapsedTime >= tasks[i]->period ) {
 4bc:	d1 e0       	ldi	r29, 0x01	; 1
 4be:	4d 81       	ldd	r20, Y+5	; 0x05
 4c0:	5e 81       	ldd	r21, Y+6	; 0x06
 4c2:	6f 81       	ldd	r22, Y+7	; 0x07
 4c4:	78 85       	ldd	r23, Y+8	; 0x08
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ca:	ab 81       	ldd	r26, Y+3	; 0x03
 4cc:	bc 81       	ldd	r27, Y+4	; 0x04
 4ce:	48 17       	cp	r20, r24
 4d0:	59 07       	cpc	r21, r25
 4d2:	6a 07       	cpc	r22, r26
 4d4:	7b 07       	cpc	r23, r27
 4d6:	60 f0       	brcs	.+24     	; 0x4f0 <main+0x88>
 4d8:	88 81       	ld	r24, Y
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 4da:	e9 85       	ldd	r30, Y+9	; 0x09
 4dc:	fa 85       	ldd	r31, Y+10	; 0x0a
 4de:	08 2e       	mov	r0, r24
 4e0:	00 0c       	add	r0, r0
 4e2:	99 0b       	sbc	r25, r25
 4e4:	09 95       	icall
 4e6:	88 83       	st	Y, r24
 4e8:	1d 82       	std	Y+5, r1	; 0x05
				tasks[i]->elapsedTime = 0;
 4ea:	1e 82       	std	Y+6, r1	; 0x06
 4ec:	1f 82       	std	Y+7, r1	; 0x07
 4ee:	18 86       	std	Y+8, r1	; 0x08
 4f0:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 4f2:	9e 81       	ldd	r25, Y+6	; 0x06
 4f4:	af 81       	ldd	r26, Y+7	; 0x07
 4f6:	b8 85       	ldd	r27, Y+8	; 0x08
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	a1 1d       	adc	r26, r1
 4fc:	b1 1d       	adc	r27, r1
 4fe:	8d 83       	std	Y+5, r24	; 0x05
 500:	9e 83       	std	Y+6, r25	; 0x06
 502:	af 83       	std	Y+7, r26	; 0x07
 504:	b8 87       	std	Y+8, r27	; 0x08
 506:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <TimerFlag>
		}
		while(!TimerFlag);
 50a:	88 23       	and	r24, r24
 50c:	e1 f3       	breq	.-8      	; 0x506 <main+0x9e>
 50e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <TimerFlag>
		TimerFlag = 0;
 512:	d5 cf       	rjmp	.-86     	; 0x4be <main+0x56>

00000514 <__tablejump2__>:
	}
 514:	ee 0f       	add	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	00 24       	eor	r0, r0
 51a:	00 1c       	adc	r0, r0
 51c:	0b be       	out	0x3b, r0	; 59
 51e:	07 90       	elpm	r0, Z+
 520:	f6 91       	elpm	r31, Z
 522:	e0 2d       	mov	r30, r0
 524:	09 94       	ijmp

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
