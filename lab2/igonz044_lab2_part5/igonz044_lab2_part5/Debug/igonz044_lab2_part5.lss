
igonz044_lab2_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fc  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dc  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	30 d0       	rcall	.+96     	; 0xfa <main>
  9a:	a6 c0       	rjmp	.+332    	; 0x1e8 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <SetBit>:
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}
unsigned char botNibl(unsigned char num){return (0x0F & num);}
unsigned char topNibl(unsigned char num){return (0xF0 & num);}
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <SetBit+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	88 23       	and	r24, r24
  b4:	71 f0       	breq	.+28     	; 0xd2 <SetBit+0x34>
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	28 2f       	mov	r18, r24
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SetBit+0x28>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SetBit+0x24>
  ca:	98 2f       	mov	r25, r24
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	89 2b       	or	r24, r25
  d0:	0e c0       	rjmp	.+28     	; 0xee <SetBit+0x50>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <SetBit+0x44>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <SetBit+0x40>
  e6:	98 2f       	mov	r25, r24
  e8:	90 95       	com	r25
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	89 23       	and	r24, r25
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0x00; PORTD = 0xFF;//input
 108:	8a e2       	ldi	r24, 0x2A	; 42
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	10 82       	st	Z, r1
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	DDRB = 0xFE; PORTB = 0x01;//input on high nibble & output on low nibble
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2e ef       	ldi	r18, 0xFE	; 254
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	
	unsigned char tmpA = 0x00;
 12e:	19 82       	std	Y+1, r1	; 0x01
	
	
    /* Replace with your application code */
    while (1) 
    {
		tmpA = PIND;
 130:	89 e2       	ldi	r24, 0x29	; 41
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	89 83       	std	Y+1, r24	; 0x01
		tmpA = tmpA << 1;
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	88 0f       	add	r24, r24
 13e:	89 83       	std	Y+1, r24	; 0x01
		tmpA = tmpA | (PINB & 0x01);
 140:	83 e2       	ldi	r24, 0x23	; 35
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	98 2f       	mov	r25, r24
 14a:	91 70       	andi	r25, 0x01	; 1
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	89 2b       	or	r24, r25
 150:	89 83       	std	Y+1, r24	; 0x01

		if (tmpA > 70){
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	87 34       	cpi	r24, 0x47	; 71
 156:	b8 f0       	brcs	.+46     	; 0x186 <main+0x8c>
			PORTB = SetBit(PORTB, 1, 1);
 158:	05 e2       	ldi	r16, 0x25	; 37
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	85 e2       	ldi	r24, 0x25	; 37
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	9a df       	rcall	.-204    	; 0x9e <SetBit>
 16a:	f8 01       	movw	r30, r16
 16c:	80 83       	st	Z, r24
			PORTB = SetBit(PORTB, 2, 0);
 16e:	05 e2       	ldi	r16, 0x25	; 37
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	8f df       	rcall	.-226    	; 0x9e <SetBit>
 180:	f8 01       	movw	r30, r16
 182:	80 83       	st	Z, r24
 184:	d5 cf       	rjmp	.-86     	; 0x130 <main+0x36>
		} 
		else if (tmpA > 5){
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	86 30       	cpi	r24, 0x06	; 6
 18a:	b8 f0       	brcs	.+46     	; 0x1ba <main+0xc0>
			PORTB = SetBit(PORTB, 1, 0);
 18c:	05 e2       	ldi	r16, 0x25	; 37
 18e:	10 e0       	ldi	r17, 0x00	; 0
 190:	85 e2       	ldi	r24, 0x25	; 37
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	80 df       	rcall	.-256    	; 0x9e <SetBit>
 19e:	f8 01       	movw	r30, r16
 1a0:	80 83       	st	Z, r24
			PORTB = SetBit(PORTB, 2, 1);
 1a2:	05 e2       	ldi	r16, 0x25	; 37
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	75 df       	rcall	.-278    	; 0x9e <SetBit>
 1b4:	f8 01       	movw	r30, r16
 1b6:	80 83       	st	Z, r24
 1b8:	bb cf       	rjmp	.-138    	; 0x130 <main+0x36>
		} 
		else {
			PORTB = SetBit(PORTB, 1, 0);
 1ba:	05 e2       	ldi	r16, 0x25	; 37
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	85 e2       	ldi	r24, 0x25	; 37
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	69 df       	rcall	.-302    	; 0x9e <SetBit>
 1cc:	f8 01       	movw	r30, r16
 1ce:	80 83       	st	Z, r24
			PORTB = SetBit(PORTB, 2, 0);
 1d0:	05 e2       	ldi	r16, 0x25	; 37
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	5e df       	rcall	.-324    	; 0x9e <SetBit>
 1e2:	f8 01       	movw	r30, r16
 1e4:	80 83       	st	Z, r24
		}

		if (tmpA == 511) {PORTB = SetBit(PORTB, 7, 0);}
    }
 1e6:	a4 cf       	rjmp	.-184    	; 0x130 <main+0x36>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
