
igonz044_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cf  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034e  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013a  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	5a d0       	rcall	.+180    	; 0x14e <main>
  9a:	f1 c0       	rjmp	.+482    	; 0x27e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <SetBit>:
 */ 

#include <avr/io.h>

//Bit access functions
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <SetBit+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	88 23       	and	r24, r24
  b4:	71 f0       	breq	.+28     	; 0xd2 <SetBit+0x34>
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	28 2f       	mov	r18, r24
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SetBit+0x28>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SetBit+0x24>
  ca:	98 2f       	mov	r25, r24
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	89 2b       	or	r24, r25
  d0:	0e c0       	rjmp	.+28     	; 0xee <SetBit+0x50>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <SetBit+0x44>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <SetBit+0x40>
  e6:	98 2f       	mov	r25, r24
  e8:	90 95       	com	r25
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	89 23       	and	r24, r25
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <GetBit+0x6>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6a 83       	std	Y+2, r22	; 0x02
    return ((x & (0x01 << k)) != 0);
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	22 2f       	mov	r18, r18
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GetBit+0x20>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GetBit+0x1c>
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	99 27       	eor	r25, r25
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	89 2b       	or	r24, r25
 126:	09 f4       	brne	.+2      	; 0x12a <GetBit+0x30>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	82 2f       	mov	r24, r18
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <botNibl>:
unsigned char botNibl(unsigned char num)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	1f 92       	push	r1
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	89 83       	std	Y+1, r24	; 0x01
	return (0x0F & num);
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	8f 70       	andi	r24, 0x0F	; 15
}
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:

int main(void)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 15c:	81 e2       	ldi	r24, 0x21	; 33
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1
 164:	82 e2       	ldi	r24, 0x22	; 34
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	//DDRB = 0x00; PORTB = 0xFF;
	DDRC = 0xFF; PORTC = 0x00;
 16e:	87 e2       	ldi	r24, 0x27	; 39
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	10 82       	st	Z, r1
	unsigned char tmp = 0x00;
 180:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		tmp = PINA;
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fc 01       	movw	r30, r24
 188:	80 81       	ld	r24, Z
 18a:	89 83       	std	Y+1, r24	; 0x01
		
		if ( botNibl(tmp) >= 1 && (botNibl(tmp))<= 2)//low fuel, 1-2
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	d3 df       	rcall	.-90     	; 0x136 <botNibl>
 190:	88 23       	and	r24, r24
 192:	49 f0       	breq	.+18     	; 0x1a6 <main+0x58>
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	cf df       	rcall	.-98     	; 0x136 <botNibl>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	28 f4       	brcc	.+10     	; 0x1a6 <main+0x58>
		{
			PORTC = 0x60;
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	20 e6       	ldi	r18, 0x60	; 96
 1a2:	fc 01       	movw	r30, r24
		} 
		if (botNibl(tmp) >= 3 && botNibl(tmp) <= 4)//3 to 4
 1a4:	20 83       	st	Z, r18
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	c6 df       	rcall	.-116    	; 0x136 <botNibl>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	48 f0       	brcs	.+18     	; 0x1c0 <main+0x72>
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	c2 df       	rcall	.-124    	; 0x136 <botNibl>
 1b2:	85 30       	cpi	r24, 0x05	; 5
 1b4:	28 f4       	brcc	.+10     	; 0x1c0 <main+0x72>
		{
			PORTC = 0x70; 
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	20 e7       	ldi	r18, 0x70	; 112
 1bc:	fc 01       	movw	r30, r24
		} 
		if (botNibl(tmp) >= 5 && botNibl(tmp) <= 6)//5 to 6
 1be:	20 83       	st	Z, r18
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	b9 df       	rcall	.-142    	; 0x136 <botNibl>
 1c4:	85 30       	cpi	r24, 0x05	; 5
 1c6:	48 f0       	brcs	.+18     	; 0x1da <main+0x8c>
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	b5 df       	rcall	.-150    	; 0x136 <botNibl>
 1cc:	87 30       	cpi	r24, 0x07	; 7
 1ce:	28 f4       	brcc	.+10     	; 0x1da <main+0x8c>
		{
			PORTC = 0x38; 
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	28 e3       	ldi	r18, 0x38	; 56
 1d6:	fc 01       	movw	r30, r24
		} 
		if (botNibl(tmp) >= 7 && botNibl(tmp) <= 9)//7 to 9 
 1d8:	20 83       	st	Z, r18
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	ac df       	rcall	.-168    	; 0x136 <botNibl>
 1de:	87 30       	cpi	r24, 0x07	; 7
 1e0:	48 f0       	brcs	.+18     	; 0x1f4 <main+0xa6>
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	a8 df       	rcall	.-176    	; 0x136 <botNibl>
 1e6:	8a 30       	cpi	r24, 0x0A	; 10
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <main+0xa6>
		{
			PORTC = 0x3C;  
 1ea:	88 e2       	ldi	r24, 0x28	; 40
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	2c e3       	ldi	r18, 0x3C	; 60
 1f0:	fc 01       	movw	r30, r24
		} 
		if(botNibl(tmp) >= 10 && botNibl(tmp) <= 12)//10 to 12 
 1f2:	20 83       	st	Z, r18
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9f df       	rcall	.-194    	; 0x136 <botNibl>
 1f8:	8a 30       	cpi	r24, 0x0A	; 10
 1fa:	48 f0       	brcs	.+18     	; 0x20e <main+0xc0>
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	9b df       	rcall	.-202    	; 0x136 <botNibl>
 200:	8d 30       	cpi	r24, 0x0D	; 13
 202:	28 f4       	brcc	.+10     	; 0x20e <main+0xc0>
		{
			PORTC = 0x3E; 
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	2e e3       	ldi	r18, 0x3E	; 62
 20a:	fc 01       	movw	r30, r24
		} 
		if (botNibl(tmp) >= 13 && botNibl(tmp) <= 15)//13 to 15 
 20c:	20 83       	st	Z, r18
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	92 df       	rcall	.-220    	; 0x136 <botNibl>
 212:	8d 30       	cpi	r24, 0x0D	; 13
 214:	48 f0       	brcs	.+18     	; 0x228 <main+0xda>
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	8e df       	rcall	.-228    	; 0x136 <botNibl>
 21a:	80 31       	cpi	r24, 0x10	; 16
 21c:	28 f4       	brcc	.+10     	; 0x228 <main+0xda>
		{
			PORTC = 0x3F; 
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	2f e3       	ldi	r18, 0x3F	; 63
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
		}
		if(botNibl(tmp) <= 4)//low fuel icon connected to PC6 is displayed
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	85 df       	rcall	.-246    	; 0x136 <botNibl>
 22c:	85 30       	cpi	r24, 0x05	; 5
 22e:	58 f4       	brcc	.+22     	; 0x246 <main+0xf8>
		{
			//PORTC = 0x40;
			PORTC = SetBit(PORTC, 6, 1);
 230:	08 e2       	ldi	r16, 0x28	; 40
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	88 e2       	ldi	r24, 0x28	; 40
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	66 e0       	ldi	r22, 0x06	; 6
 240:	2e df       	rcall	.-420    	; 0x9e <SetBit>
 242:	f8 01       	movw	r30, r16
		}
		////////////////////////////////////////////////////////////////////
		//Fasten Seat belt
		 if (GetBit(tmp, 4) && GetBit(tmp, 5) && !GetBit(tmp, 6))//Fasten seatbelt warning
 244:	80 83       	st	Z, r24
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	57 df       	rcall	.-338    	; 0xfa <GetBit>
 24c:	88 23       	and	r24, r24
 24e:	09 f4       	brne	.+2      	; 0x252 <main+0x104>
 250:	98 cf       	rjmp	.-208    	; 0x182 <main+0x34>
 252:	65 e0       	ldi	r22, 0x05	; 5
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	51 df       	rcall	.-350    	; 0xfa <GetBit>
 258:	88 23       	and	r24, r24
 25a:	09 f4       	brne	.+2      	; 0x25e <main+0x110>
 25c:	92 cf       	rjmp	.-220    	; 0x182 <main+0x34>
 25e:	66 e0       	ldi	r22, 0x06	; 6
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	4b df       	rcall	.-362    	; 0xfa <GetBit>
 264:	88 23       	and	r24, r24
 266:	09 f0       	breq	.+2      	; 0x26a <main+0x11c>
 268:	8c cf       	rjmp	.-232    	; 0x182 <main+0x34>
 26a:	88 e2       	ldi	r24, 0x28	; 40
		{
			PORTC = (PORTC | 0x80);
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	28 e2       	ldi	r18, 0x28	; 40
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	20 81       	ld	r18, Z
 276:	20 68       	ori	r18, 0x80	; 128
 278:	fc 01       	movw	r30, r24
 27a:	20 83       	st	Z, r18
 27c:	82 cf       	rjmp	.-252    	; 0x182 <main+0x34>

0000027e <_exit>:
		}
		if (GetBit(tmp, 6))//seat belt is fastened?
		{
			//PORTC = SetBit(tmp, 6,1);
		}*/
	}
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
