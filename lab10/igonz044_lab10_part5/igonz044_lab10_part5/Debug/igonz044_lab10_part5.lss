
igonz044_lab10_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003a6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a04  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085e  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c8  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000021ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	45 c1       	rjmp	.+650    	; 0x2c0 <__vector_13>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7e 00       	.word	0x007e	; ????
  8e:	82 00       	.word	0x0082	; ????
  90:	9a 00       	.word	0x009a	; ????
  92:	be 00       	.word	0x00be	; ????
  94:	ac 00       	.word	0x00ac	; ????
  96:	c2 00       	.word	0x00c2	; ????
  98:	c6 00       	.word	0x00c6	; ????
  9a:	d6 00       	.word	0x00d6	; ????
  9c:	37 01       	movw	r6, r14
  9e:	db 00       	.word	0x00db	; ????
  a0:	fa 00       	.word	0x00fa	; ????
  a2:	07 01       	movw	r0, r14
  a4:	24 01       	movw	r4, r8
  a6:	30 01       	movw	r6, r0

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e4       	ldi	r29, 0x40	; 64
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 ea       	ldi	r30, 0xA6	; 166
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 31       	cpi	r26, 0x11	; 17
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	3d d1       	rcall	.+634    	; 0x35a <main>
  e0:	60 c1       	rjmp	.+704    	; 0x3a2 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <IncrDecr>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  e4:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <state>
  e8:	8e 2f       	mov	r24, r30
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	87 30       	cpi	r24, 0x07	; 7
  ee:	91 05       	cpc	r25, r1
  f0:	08 f0       	brcs	.+2      	; 0xf4 <IncrDecr+0x10>
  f2:	50 c0       	rjmp	.+160    	; 0x194 <IncrDecr+0xb0>
  f4:	fc 01       	movw	r30, r24
  f6:	ea 5b       	subi	r30, 0xBA	; 186
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	4a c1       	rjmp	.+660    	; 0x390 <__tablejump2__>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 102:	54 c0       	rjmp	.+168    	; 0x1ac <IncrDecr+0xc8>
 104:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PINAtmp>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	21 f4       	brne	.+8      	; 0x114 <IncrDecr+0x30>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 112:	ad c0       	rjmp	.+346    	; 0x26e <IncrDecr+0x18a>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	21 f4       	brne	.+8      	; 0x120 <IncrDecr+0x3c>
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 11e:	a7 c0       	rjmp	.+334    	; 0x26e <IncrDecr+0x18a>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	21 f4       	brne	.+8      	; 0x12c <IncrDecr+0x48>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 12a:	a1 c0       	rjmp	.+322    	; 0x26e <IncrDecr+0x18a>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 132:	9d c0       	rjmp	.+314    	; 0x26e <IncrDecr+0x18a>
 134:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PINAtmp>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	21 f4       	brne	.+8      	; 0x144 <IncrDecr+0x60>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 142:	39 c0       	rjmp	.+114    	; 0x1b6 <IncrDecr+0xd2>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	21 f4       	brne	.+8      	; 0x150 <IncrDecr+0x6c>
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 14e:	33 c0       	rjmp	.+102    	; 0x1b6 <IncrDecr+0xd2>
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 156:	2f c0       	rjmp	.+94     	; 0x1b6 <IncrDecr+0xd2>
 158:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PINAtmp>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	21 f4       	brne	.+8      	; 0x168 <IncrDecr+0x84>
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 166:	53 c0       	rjmp	.+166    	; 0x20e <IncrDecr+0x12a>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	21 f4       	brne	.+8      	; 0x174 <IncrDecr+0x90>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 172:	4d c0       	rjmp	.+154    	; 0x20e <IncrDecr+0x12a>
 174:	85 e0       	ldi	r24, 0x05	; 5
 176:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 17a:	49 c0       	rjmp	.+146    	; 0x20e <IncrDecr+0x12a>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 182:	38 c0       	rjmp	.+112    	; 0x1f4 <IncrDecr+0x110>
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 18a:	5e c0       	rjmp	.+188    	; 0x248 <IncrDecr+0x164>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 192:	66 c0       	rjmp	.+204    	; 0x260 <IncrDecr+0x17c>
 194:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <next_state>
 198:	8e 2f       	mov	r24, r30
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	87 30       	cpi	r24, 0x07	; 7
 19e:	91 05       	cpc	r25, r1
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <IncrDecr+0xc0>
 1a2:	61 c0       	rjmp	.+194    	; 0x266 <IncrDecr+0x182>
 1a4:	fc 01       	movw	r30, r24
 1a6:	e3 5b       	subi	r30, 0xB3	; 179
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	f2 c0       	rjmp	.+484    	; 0x390 <__tablejump2__>
 1ac:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <PORTCout>
 1b0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
 1b4:	5c c0       	rjmp	.+184    	; 0x26e <IncrDecr+0x18a>
 1b6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 1ba:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <TEMP2>
 1be:	89 17       	cp	r24, r25
 1c0:	a8 f0       	brcs	.+42     	; 0x1ec <IncrDecr+0x108>
 1c2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PORTCout>
 1c6:	89 30       	cpi	r24, 0x09	; 9
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <IncrDecr+0xe8>
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PORTCout>
 1d0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
 1d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	08 f4       	brcc	.+2      	; 0x1e4 <IncrDecr+0x100>
 1e2:	45 c0       	rjmp	.+138    	; 0x26e <IncrDecr+0x18a>
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TEMP2>
 1ea:	41 c0       	rjmp	.+130    	; 0x26e <IncrDecr+0x18a>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <counter>
 1f2:	3d c0       	rjmp	.+122    	; 0x26e <IncrDecr+0x18a>
 1f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PORTCout>
 1f8:	89 30       	cpi	r24, 0x09	; 9
 1fa:	08 f4       	brcc	.+2      	; 0x1fe <IncrDecr+0x11a>
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PORTCout>
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TEMP2>
 208:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 20c:	30 c0       	rjmp	.+96     	; 0x26e <IncrDecr+0x18a>
 20e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
 212:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <TEMP2>
 216:	89 17       	cp	r24, r25
 218:	98 f0       	brcs	.+38     	; 0x240 <IncrDecr+0x15c>
 21a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PORTCout>
 21e:	81 11       	cpse	r24, r1
 220:	81 50       	subi	r24, 0x01	; 1
 222:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PORTCout>
 226:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	d8 f0       	brcs	.+54     	; 0x26e <IncrDecr+0x18a>
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TEMP2>
 23e:	17 c0       	rjmp	.+46     	; 0x26e <IncrDecr+0x18a>
 240:	8f 5f       	subi	r24, 0xFF	; 255
 242:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <counter>
 246:	13 c0       	rjmp	.+38     	; 0x26e <IncrDecr+0x18a>
 248:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PORTCout>
 24c:	81 11       	cpse	r24, r1
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PORTCout>
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TEMP2>
 25a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 25e:	07 c0       	rjmp	.+14     	; 0x26e <IncrDecr+0x18a>
 260:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <PORTCout>
 264:	04 c0       	rjmp	.+8      	; 0x26e <IncrDecr+0x18a>
 266:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <PORTCout>
 26a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter>
 26e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <next_state>
 272:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 276:	08 95       	ret

00000278 <TimerOn>:
 278:	8b e0       	ldi	r24, 0x0B	; 11
 27a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 27e:	8d e7       	ldi	r24, 0x7D	; 125
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 286:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 290:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 294:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 298:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 29c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 2a0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 2a4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 2a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 2ac:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 2b0:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 2b4:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 2b8:	8f b7       	in	r24, 0x3f	; 63
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	8f bf       	out	0x3f, r24	; 63
 2be:	08 95       	ret

000002c0 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	af 93       	push	r26
 2d0:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 2d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 2d6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 2da:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 2de:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	a1 09       	sbc	r26, r1
 2e6:	b1 09       	sbc	r27, r1
 2e8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 2ec:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 2f0:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 2f4:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 2f8:	89 2b       	or	r24, r25
 2fa:	8a 2b       	or	r24, r26
 2fc:	8b 2b       	or	r24, r27
 2fe:	99 f4       	brne	.+38     	; 0x326 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 306:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 30a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 30e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 312:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 316:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 31a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 31e:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 322:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 338:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 33c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 340:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 344:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 348:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 34c:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 350:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 354:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 358:	08 95       	ret

0000035a <main>:
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //input
 35a:	11 b8       	out	0x01, r1	; 1
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //output
 360:	84 b9       	out	0x04, r24	; 4
 362:	15 b8       	out	0x05, r1	; 5
	
	TimerSet(100);
 364:	64 e6       	ldi	r22, 0x64	; 100
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	e5 df       	rcall	.-54     	; 0x338 <TimerSet>
	TimerOn();
 36e:	84 df       	rcall	.-248    	; 0x278 <TimerOn>
 370:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PORTCout>
	
	while(1) {
		PORTB = PORTCout;
 374:	85 b9       	out	0x05, r24	; 5
 376:	80 b1       	in	r24, 0x00	; 0
		PINAtmp = ~PINA & 0x03;
 378:	80 95       	com	r24
 37a:	83 70       	andi	r24, 0x03	; 3
 37c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PINAtmp>
		IncrDecr();
 380:	b1 de       	rcall	.-670    	; 0xe4 <IncrDecr>
 382:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		while(!TimerFlag);
 386:	88 23       	and	r24, r24
 388:	e1 f3       	breq	.-8      	; 0x382 <main+0x28>
 38a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TimerFlag>
		TimerFlag = 0;
 38e:	f0 cf       	rjmp	.-32     	; 0x370 <main+0x16>

00000390 <__tablejump2__>:
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 390:	ee 0f       	add	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	00 24       	eor	r0, r0
 396:	00 1c       	adc	r0, r0
 398:	0b be       	out	0x3b, r0	; 59
 39a:	07 90       	elpm	r0, Z+
 39c:	f6 91       	elpm	r31, Z
 39e:	e0 2d       	mov	r30, r0
 3a0:	09 94       	ijmp

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
