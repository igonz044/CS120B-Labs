
igonz044_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000053c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000901  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f1  00000000  00000000  00000ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e1  00000000  00000000  000016d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  0000207e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ed d1       	rcall	.+986    	; 0x484 <main>
  aa:	0c c2       	rjmp	.+1048   	; 0x4c4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
	return ((x & (0x01 << k)) != 0);
}


void tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
 	switch (state) { //Transitions
  b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <tick+0x18>
  c4:	b6 c0       	rjmp	.+364    	; 0x232 <tick+0x184>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	91 05       	cpc	r25, r1
  ca:	34 f4       	brge	.+12     	; 0xd8 <tick+0x2a>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	81 f0       	breq	.+32     	; 0xf0 <tick+0x42>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	09 f4       	brne	.+2      	; 0xd6 <tick+0x28>
  d4:	5d c0       	rjmp	.+186    	; 0x190 <tick+0xe2>
		else
		{ state = Reset;}
        break;

	default:
	break;
  d6:	a4 c1       	rjmp	.+840    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
}


void tick()
{
 	switch (state) { //Transitions
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	91 05       	cpc	r25, r1
  dc:	09 f4       	brne	.+2      	; 0xe0 <tick+0x32>
  de:	fa c0       	rjmp	.+500    	; 0x2d4 <tick+0x226>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	91 05       	cpc	r25, r1
  e4:	0c f4       	brge	.+2      	; 0xe8 <tick+0x3a>
  e6:	63 c1       	rjmp	.+710    	; 0x3ae <tick+0x300>
  e8:	05 97       	sbiw	r24, 0x05	; 5
  ea:	09 f4       	brne	.+2      	; 0xee <tick+0x40>
  ec:	44 c1       	rjmp	.+648    	; 0x376 <tick+0x2c8>
		else
		{ state = Reset;}
        break;

	default:
	break;
  ee:	98 c1       	rjmp	.+816    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>

void tick()
{
 	switch (state) { //Transitions
	case Init:
		if(A0 && !A1 && count < 0x09)
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	99 27       	eor	r25, r25
 100:	89 2b       	or	r24, r25
 102:	91 f0       	breq	.+36     	; 0x128 <tick+0x7a>
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	82 70       	andi	r24, 0x02	; 2
 112:	99 27       	eor	r25, r25
 114:	89 2b       	or	r24, r25
 116:	41 f4       	brne	.+16     	; 0x128 <tick+0x7a>
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	89 30       	cpi	r24, 0x09	; 9
 11e:	20 f4       	brcc	.+8      	; 0x128 <tick+0x7a>
		{state = Inc;}
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 126:	33 c0       	rjmp	.+102    	; 0x18e <tick+0xe0>
			
		else if(!A0 && A1)
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	81 70       	andi	r24, 0x01	; 1
 136:	99 27       	eor	r25, r25
 138:	89 2b       	or	r24, r25
 13a:	71 f4       	brne	.+28     	; 0x158 <tick+0xaa>
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	82 70       	andi	r24, 0x02	; 2
 14a:	99 27       	eor	r25, r25
 14c:	89 2b       	or	r24, r25
 14e:	21 f0       	breq	.+8      	; 0x158 <tick+0xaa>
		{state = Dec;}
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 156:	1b c0       	rjmp	.+54     	; 0x18e <tick+0xe0>
			
		else if(A0 && A1)
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	81 70       	andi	r24, 0x01	; 1
 166:	99 27       	eor	r25, r25
 168:	89 2b       	or	r24, r25
 16a:	71 f0       	breq	.+28     	; 0x188 <tick+0xda>
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	82 70       	andi	r24, 0x02	; 2
 17a:	99 27       	eor	r25, r25
 17c:	89 2b       	or	r24, r25
 17e:	21 f0       	breq	.+8      	; 0x188 <tick+0xda>
		{state = Reset;}
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 186:	03 c0       	rjmp	.+6      	; 0x18e <tick+0xe0>
			
		else
		{ state = Init;}
 188:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
		break;
 18c:	49 c1       	rjmp	.+658    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 18e:	48 c1       	rjmp	.+656    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
        
    case Inc:
		if(A0 && !A1 && count < 0x09)
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	99 27       	eor	r25, r25
 1a0:	89 2b       	or	r24, r25
 1a2:	91 f0       	breq	.+36     	; 0x1c8 <tick+0x11a>
 1a4:	80 e2       	ldi	r24, 0x20	; 32
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	82 70       	andi	r24, 0x02	; 2
 1b2:	99 27       	eor	r25, r25
 1b4:	89 2b       	or	r24, r25
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <tick+0x11a>
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1bc:	89 30       	cpi	r24, 0x09	; 9
 1be:	20 f4       	brcc	.+8      	; 0x1c8 <tick+0x11a>
		{state = Wait2;}
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 1c6:	34 c0       	rjmp	.+104    	; 0x230 <tick+0x182>
			
		else if(!A0 && A1 && count >= 0x00)
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	81 70       	andi	r24, 0x01	; 1
 1d6:	99 27       	eor	r25, r25
 1d8:	89 2b       	or	r24, r25
 1da:	71 f4       	brne	.+28     	; 0x1f8 <tick+0x14a>
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	80 81       	ld	r24, Z
 1e4:	88 2f       	mov	r24, r24
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	82 70       	andi	r24, 0x02	; 2
 1ea:	99 27       	eor	r25, r25
 1ec:	89 2b       	or	r24, r25
 1ee:	21 f0       	breq	.+8      	; 0x1f8 <tick+0x14a>
		{state = Dec;}
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 1f6:	1c c0       	rjmp	.+56     	; 0x230 <tick+0x182>
			
		else if(A0 && A1)
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	81 70       	andi	r24, 0x01	; 1
 206:	99 27       	eor	r25, r25
 208:	89 2b       	or	r24, r25
 20a:	71 f0       	breq	.+28     	; 0x228 <tick+0x17a>
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	82 70       	andi	r24, 0x02	; 2
 21a:	99 27       	eor	r25, r25
 21c:	89 2b       	or	r24, r25
 21e:	21 f0       	breq	.+8      	; 0x228 <tick+0x17a>
		{state = Reset;}
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 226:	04 c0       	rjmp	.+8      	; 0x230 <tick+0x182>
			
		else
		{ state = Wait2;}
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
     break;
 22e:	f8 c0       	rjmp	.+496    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 230:	f7 c0       	rjmp	.+494    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
        
     case Dec:
		if(A0 && !A1 && count < 0x09)
 232:	80 e2       	ldi	r24, 0x20	; 32
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	88 2f       	mov	r24, r24
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	99 27       	eor	r25, r25
 242:	89 2b       	or	r24, r25
 244:	91 f0       	breq	.+36     	; 0x26a <tick+0x1bc>
 246:	80 e2       	ldi	r24, 0x20	; 32
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	82 70       	andi	r24, 0x02	; 2
 254:	99 27       	eor	r25, r25
 256:	89 2b       	or	r24, r25
 258:	41 f4       	brne	.+16     	; 0x26a <tick+0x1bc>
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25e:	89 30       	cpi	r24, 0x09	; 9
 260:	20 f4       	brcc	.+8      	; 0x26a <tick+0x1bc>
		{state = Inc;}
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 268:	34 c0       	rjmp	.+104    	; 0x2d2 <tick+0x224>
			
		else if(!A0 && A1 && count >= 0x00)
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	80 81       	ld	r24, Z
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	81 70       	andi	r24, 0x01	; 1
 278:	99 27       	eor	r25, r25
 27a:	89 2b       	or	r24, r25
 27c:	71 f4       	brne	.+28     	; 0x29a <tick+0x1ec>
 27e:	80 e2       	ldi	r24, 0x20	; 32
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	fc 01       	movw	r30, r24
 284:	80 81       	ld	r24, Z
 286:	88 2f       	mov	r24, r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	82 70       	andi	r24, 0x02	; 2
 28c:	99 27       	eor	r25, r25
 28e:	89 2b       	or	r24, r25
 290:	21 f0       	breq	.+8      	; 0x29a <tick+0x1ec>
		{state = Wait2;}
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 298:	1c c0       	rjmp	.+56     	; 0x2d2 <tick+0x224>
			
		else if(A0 && A1)
 29a:	80 e2       	ldi	r24, 0x20	; 32
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fc 01       	movw	r30, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	88 2f       	mov	r24, r24
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	99 27       	eor	r25, r25
 2aa:	89 2b       	or	r24, r25
 2ac:	71 f0       	breq	.+28     	; 0x2ca <tick+0x21c>
 2ae:	80 e2       	ldi	r24, 0x20	; 32
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	88 2f       	mov	r24, r24
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	82 70       	andi	r24, 0x02	; 2
 2bc:	99 27       	eor	r25, r25
 2be:	89 2b       	or	r24, r25
 2c0:	21 f0       	breq	.+8      	; 0x2ca <tick+0x21c>
		{state = Reset;}
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <tick+0x224>
			
		else
		{ state = Wait2;}
 2ca:	85 e0       	ldi	r24, 0x05	; 5
 2cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
	break;
 2d0:	a7 c0       	rjmp	.+334    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 2d2:	a6 c0       	rjmp	.+332    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
        
    case Wait://for inc
		if(A0 && !A1 && count < 0x09)
 2d4:	80 e2       	ldi	r24, 0x20	; 32
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	99 27       	eor	r25, r25
 2e4:	89 2b       	or	r24, r25
 2e6:	91 f0       	breq	.+36     	; 0x30c <tick+0x25e>
 2e8:	80 e2       	ldi	r24, 0x20	; 32
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 70       	andi	r24, 0x02	; 2
 2f6:	99 27       	eor	r25, r25
 2f8:	89 2b       	or	r24, r25
 2fa:	41 f4       	brne	.+16     	; 0x30c <tick+0x25e>
 2fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 300:	89 30       	cpi	r24, 0x09	; 9
 302:	20 f4       	brcc	.+8      	; 0x30c <tick+0x25e>
		{state = Inc;}
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 30a:	34 c0       	rjmp	.+104    	; 0x374 <tick+0x2c6>
			
		else if(!A0 && A1 && count >= 0x00)
 30c:	80 e2       	ldi	r24, 0x20	; 32
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	81 70       	andi	r24, 0x01	; 1
 31a:	99 27       	eor	r25, r25
 31c:	89 2b       	or	r24, r25
 31e:	71 f4       	brne	.+28     	; 0x33c <tick+0x28e>
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	fc 01       	movw	r30, r24
 326:	80 81       	ld	r24, Z
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	82 70       	andi	r24, 0x02	; 2
 32e:	99 27       	eor	r25, r25
 330:	89 2b       	or	r24, r25
 332:	21 f0       	breq	.+8      	; 0x33c <tick+0x28e>
		{state = Dec;}
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 33a:	1c c0       	rjmp	.+56     	; 0x374 <tick+0x2c6>
			
		else if(A0 && A1)
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	fc 01       	movw	r30, r24
 342:	80 81       	ld	r24, Z
 344:	88 2f       	mov	r24, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	99 27       	eor	r25, r25
 34c:	89 2b       	or	r24, r25
 34e:	71 f0       	breq	.+28     	; 0x36c <tick+0x2be>
 350:	80 e2       	ldi	r24, 0x20	; 32
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	82 70       	andi	r24, 0x02	; 2
 35e:	99 27       	eor	r25, r25
 360:	89 2b       	or	r24, r25
 362:	21 f0       	breq	.+8      	; 0x36c <tick+0x2be>
		{state = Reset;}
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 36a:	04 c0       	rjmp	.+8      	; 0x374 <tick+0x2c6>
			
		else
		{ state = Wait;}
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
    break;
 372:	56 c0       	rjmp	.+172    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 374:	55 c0       	rjmp	.+170    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		
	case Wait2: //for dec 
		if(!A0 && !A1 )
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	80 81       	ld	r24, Z
 37e:	88 2f       	mov	r24, r24
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	81 70       	andi	r24, 0x01	; 1
 384:	99 27       	eor	r25, r25
 386:	89 2b       	or	r24, r25
 388:	71 f4       	brne	.+28     	; 0x3a6 <tick+0x2f8>
 38a:	80 e2       	ldi	r24, 0x20	; 32
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	80 81       	ld	r24, Z
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	82 70       	andi	r24, 0x02	; 2
 398:	99 27       	eor	r25, r25
 39a:	89 2b       	or	r24, r25
 39c:	21 f4       	brne	.+8      	; 0x3a6 <tick+0x2f8>
		{state = Wait;}
 39e:	84 e0       	ldi	r24, 0x04	; 4
 3a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		else
		{ state = Wait2;}
        break;
 3a4:	3d c0       	rjmp	.+122    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		
	case Wait2: //for dec 
		if(!A0 && !A1 )
		{state = Wait;}
		else
		{ state = Wait2;}
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        break;
 3ac:	39 c0       	rjmp	.+114    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	
        case Reset:
		if(A0 && !A1 && count < 0x09)
 3ae:	80 e2       	ldi	r24, 0x20	; 32
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	88 2f       	mov	r24, r24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	81 70       	andi	r24, 0x01	; 1
 3bc:	99 27       	eor	r25, r25
 3be:	89 2b       	or	r24, r25
 3c0:	91 f0       	breq	.+36     	; 0x3e6 <tick+0x338>
 3c2:	80 e2       	ldi	r24, 0x20	; 32
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	fc 01       	movw	r30, r24
 3c8:	80 81       	ld	r24, Z
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	82 70       	andi	r24, 0x02	; 2
 3d0:	99 27       	eor	r25, r25
 3d2:	89 2b       	or	r24, r25
 3d4:	41 f4       	brne	.+16     	; 0x3e6 <tick+0x338>
 3d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3da:	89 30       	cpi	r24, 0x09	; 9
 3dc:	20 f4       	brcc	.+8      	; 0x3e6 <tick+0x338>
		{state = Inc;}
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 3e4:	1c c0       	rjmp	.+56     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			
		else if(!A0 && A1 && count >= 0x00)
 3e6:	80 e2       	ldi	r24, 0x20	; 32
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	81 70       	andi	r24, 0x01	; 1
 3f4:	99 27       	eor	r25, r25
 3f6:	89 2b       	or	r24, r25
 3f8:	71 f4       	brne	.+28     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	80 81       	ld	r24, Z
 402:	88 2f       	mov	r24, r24
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	82 70       	andi	r24, 0x02	; 2
 408:	99 27       	eor	r25, r25
 40a:	89 2b       	or	r24, r25
 40c:	21 f0       	breq	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{state = Dec;}
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
 414:	04 c0       	rjmp	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			
		else
		{ state = Reset;}
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
        break;
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop

	default:
	break;
	}
	//////////////////////////////////////////////////////
	switch (state) { //State Actions		
 420:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	91 05       	cpc	r25, r1
 42c:	d9 f0       	breq	.+54     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	91 05       	cpc	r25, r1
 432:	2c f4       	brge	.+10     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	61 f0       	breq	.+24     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	71 f0       	breq	.+28     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
	case Reset:
		count = 0x00; 
	break;

	default:
	break;	
 43c:	1f c0       	rjmp	.+62     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>

	default:
	break;
	}
	//////////////////////////////////////////////////////
	switch (state) { //State Actions		
 43e:	84 30       	cpi	r24, 0x04	; 4
 440:	91 05       	cpc	r25, r1
 442:	c9 f0       	breq	.+50     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	91 05       	cpc	r25, r1
 448:	9c f0       	brlt	.+38     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 44a:	05 97       	sbiw	r24, 0x05	; 5
 44c:	b1 f0       	breq	.+44     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	case Reset:
		count = 0x00; 
	break;

	default:
	break;	
 44e:	16 c0       	rjmp	.+44     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	break;
	}
	//////////////////////////////////////////////////////
	switch (state) { //State Actions		
	case Init:
		count = 0x07;
 450:	87 e0       	ldi	r24, 0x07	; 7
 452:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	break;
 456:	12 c0       	rjmp	.+36     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>

	case Inc:
        count = count+1; 
 458:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	break;
 462:	0c c0       	rjmp	.+24     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		
	case Dec:
        count = count-1; 
 464:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 468:	81 50       	subi	r24, 0x01	; 1
 46a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	break;
 46e:	06 c0       	rjmp	.+12     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	case Wait2://do not change count
		//count = count;
	break;

	case Reset:
		count = 0x00; 
 470:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	break;
 474:	03 c0       	rjmp	.+6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
        count = count-1; 
	break;

    case Wait://do not change count
		//count = count;
	break;
 476:	00 00       	nop
 478:	01 c0       	rjmp	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		
	case Wait2://do not change count
		//count = count;
	break;
 47a:	00 00       	nop
	break;

	default:
	break;	
	}
}
 47c:	00 00       	nop
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <main>:
int main(void)
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; //inputs, 2 buttons
 48c:	81 e2       	ldi	r24, 0x21	; 33
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	10 82       	st	Z, r1
 494:	82 e2       	ldi	r24, 0x22	; 34
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //outputs 
 49e:	84 e2       	ldi	r24, 0x24	; 36
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
 4a8:	85 e2       	ldi	r24, 0x25	; 37
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	10 82       	st	Z, r1
	
	state = Init;//initialize state
 4b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	
	while(1) { tick();  PORTB = count;}
 4b4:	fc dd       	rcall	.-1032   	; 0xae <tick>
 4b6:	85 e2       	ldi	r24, 0x25	; 37
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
 4c2:	f8 cf       	rjmp	.-16     	; 0x4b4 <main+0x30>

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
