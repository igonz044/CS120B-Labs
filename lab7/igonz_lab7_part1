#include <avr/io.h>
#include <avr/interrupt.h>
#include "io.c"


volatile unsigned char TimerFlag = 0;
// TimerISR() sets this to 1. C programmer should clear to 0.

enum States { Start, init, waitA0Not, incrementC, waitA1Not, decrementC, resetC} State;

// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

unsigned char PORTCout;
unsigned char PINAtmp;
unsigned char next_state;
unsigned char output;
unsigned char counter;

void IncrementDecrement()
{
	
	switch(State){
		
		case Start:
		next_state = init;
		break;
		
		case init:
		if(PINAtmp==1){
			next_state = waitA0Not;
		}
		else if (PINAtmp==2){
			next_state = waitA1Not;
		}
		else if(PINAtmp ==3){
			next_state = resetC;
		}
		else{
			next_state = init;
		}
		break;
		
		case waitA0Not:
		if(PINAtmp==1){
			next_state = waitA0Not;
		}
		else if(PINAtmp==3){
			next_state = resetC;
		}
		else{
			next_state = incrementC;
		}
		break;
		
		case waitA1Not:
		if(PINAtmp==2){
			next_state = waitA1Not;
		}
		else if(PINAtmp==3){
			next_state = resetC;
		}
		else{
			next_state = decrementC;
		}
		break;
		
		case incrementC:
		next_state = init;
		break;
		
		case decrementC:
		next_state = init;
		break;
		
		case resetC:
		next_state = init;
		break;
		
		default:
		next_state = Start;
		break;
	}
	
	
	switch(State){
		
		case Start:
		PORTCout = 0x30;
		counter =0;
		break;
		
		case init:
		PORTCout = PORTCout;
		break;
		
		case waitA0Not:
		if(counter == 10){
			PORTCout = (PORTCout>= 57) ? PORTCout: PORTCout+1;
			counter=0;
		}
		else {
			counter++;
		}
		
		break;
		
		
		case incrementC:
		PORTCout = (PORTCout>= 57) ? PORTCout: PORTCout+1;
		break;
		
		
		case waitA1Not:
		if(counter == 10){
			PORTCout = (PORTCout<= 48) ? PORTCout: PORTCout-1;
			counter =0;
		}
		else{
			counter++;
		}
		break;
		
		
		case decrementC:
		PORTCout = (PORTCout<= 48) ? PORTCout: PORTCout-1;
		break;
		
		
		case resetC:
		PORTCout = 0x30;
		break;
		
		default:
		PORTCout = 0x37;
		counter =0;
		break;
	}
	State = next_state;
	output = PORTCout | 0x30;
	LCD_Cursor(1);
	LCD_WriteData( output); // will display 9 on the LCD
}
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B = 0x0B;// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A = 125;	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK1 = 0x02; // bit1: OCIE1A -- enables compare match interrupt

	//Initialize avr counter
	TCNT1=0;

	_avr_timer_cntcurr = _avr_timer_M;
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // LCD input button
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
	DDRD = 0xFF; PORTD = 0x00; // LCD control
	TimerSet(100);
	TimerOn();
	// Initializes the LCD display
	LCD_init();
	// Starting at position 1 on the LCD screen, writes Hello World
	
	while(1) {
		
		PINAtmp = PINA & 0x03;
		IncrementDecrement();
		while(!TimerFlag);
		TimerFlag = 0;
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
		
	}
}
