
itzel_lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000066e  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  00000706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad4  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000863  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000730  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  0000299a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c2       	rjmp	.+1176   	; 0x4ce <__vector_13>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	45 01       	movw	r8, r10
  8e:	49 01       	movw	r8, r18
  90:	65 01       	movw	r12, r10
  92:	8d 01       	movw	r16, r26
  94:	79 01       	movw	r14, r18
  96:	91 01       	movw	r18, r2
  98:	95 01       	movw	r18, r10
  9a:	b2 01       	movw	r22, r4
  9c:	b8 01       	movw	r22, r16
  9e:	bd 01       	movw	r22, r26
  a0:	d6 01       	movw	r26, r12
  a2:	e3 01       	movw	r28, r6
  a4:	fc 01       	movw	r30, r24
  a6:	09 02       	muls	r16, r25

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e4       	ldi	r29, 0x40	; 64
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	ee e6       	ldi	r30, 0x6E	; 110
  bc:	f6 e0       	ldi	r31, 0x06	; 6
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a4 e0       	ldi	r26, 0x04	; 4
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	af 30       	cpi	r26, 0x0F	; 15
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	86 d2       	rcall	.+1292   	; 0x5ec <main>
  e0:	c4 c2       	rjmp	.+1416   	; 0x66a <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <LCD_init>:
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	84 e6       	ldi	r24, 0x64	; 100
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	82 d0       	rcall	.+260    	; 0x1f6 <delay_ms>
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	0d d0       	rcall	.+26     	; 0x110 <LCD_WriteCommand>
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0b d0       	rcall	.+22     	; 0x110 <LCD_WriteCommand>
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	09 d0       	rcall	.+18     	; 0x110 <LCD_WriteCommand>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	07 d0       	rcall	.+14     	; 0x110 <LCD_WriteCommand>
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	77 d0       	rcall	.+238    	; 0x1f6 <delay_ms>
 108:	00 00       	nop
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD_WriteCommand>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	8b e2       	ldi	r24, 0x2B	; 43
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2b e2       	ldi	r18, 0x2B	; 43
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	2f 7b       	andi	r18, 0xBF	; 191
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2b e2       	ldi	r18, 0x2B	; 43
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	20 68       	ori	r18, 0x80	; 128
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
 14a:	00 00       	nop
 14c:	8b e2       	ldi	r24, 0x2B	; 43
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2b e2       	ldi	r18, 0x2B	; 43
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	20 81       	ld	r18, Z
 158:	2f 77       	andi	r18, 0x7F	; 127
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	49 d0       	rcall	.+146    	; 0x1f6 <delay_ms>
 164:	00 00       	nop
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <LCD_WriteData>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	1f 92       	push	r1
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	2b e2       	ldi	r18, 0x2B	; 43
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	20 64       	ori	r18, 0x40	; 64
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
 196:	8b e2       	ldi	r24, 0x2B	; 43
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	2b e2       	ldi	r18, 0x2B	; 43
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	20 68       	ori	r18, 0x80	; 128
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
 1a8:	00 00       	nop
 1aa:	8b e2       	ldi	r24, 0x2B	; 43
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	2b e2       	ldi	r18, 0x2B	; 43
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	20 81       	ld	r18, Z
 1b6:	2f 77       	andi	r18, 0x7F	; 127
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	1a d0       	rcall	.+52     	; 0x1f6 <delay_ms>
 1c2:	00 00       	nop
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <LCD_Cursor>:
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	1f 92       	push	r1
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	81 31       	cpi	r24, 0x11	; 17
 1dc:	20 f4       	brcc	.+8      	; 0x1e6 <LCD_Cursor+0x1a>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	81 58       	subi	r24, 0x81	; 129
 1e2:	96 df       	rcall	.-212    	; 0x110 <LCD_WriteCommand>
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <LCD_Cursor+0x20>
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	81 55       	subi	r24, 0x51	; 81
 1ea:	92 df       	rcall	.-220    	; 0x110 <LCD_WriteCommand>
 1ec:	00 00       	nop
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <delay_ms>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <delay_ms+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <delay_ms+0x8>
 1fe:	00 d0       	rcall	.+0      	; 0x200 <delay_ms+0xa>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	9e 83       	std	Y+6, r25	; 0x06
 206:	8d 83       	std	Y+5, r24	; 0x05
 208:	1a 82       	std	Y+2, r1	; 0x02
 20a:	19 82       	std	Y+1, r1	; 0x01
 20c:	13 c0       	rjmp	.+38     	; 0x234 <delay_ms+0x3e>
 20e:	1c 82       	std	Y+4, r1	; 0x04
 210:	1b 82       	std	Y+3, r1	; 0x03
 212:	06 c0       	rjmp	.+12     	; 0x220 <delay_ms+0x2a>
 214:	00 00       	nop
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	9c 83       	std	Y+4, r25	; 0x04
 21e:	8b 83       	std	Y+3, r24	; 0x03
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	9c 81       	ldd	r25, Y+4	; 0x04
 224:	87 30       	cpi	r24, 0x07	; 7
 226:	93 40       	sbci	r25, 0x03	; 3
 228:	ac f3       	brlt	.-22     	; 0x214 <delay_ms+0x1e>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	29 81       	ldd	r18, Y+1	; 0x01
 236:	3a 81       	ldd	r19, Y+2	; 0x02
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	9e 81       	ldd	r25, Y+6	; 0x06
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	34 f3       	brlt	.-52     	; 0x20e <delay_ms+0x18>
 242:	00 00       	nop
 244:	26 96       	adiw	r28, 0x06	; 6
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <IncrDecr>:
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
 25e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 262:	88 2f       	mov	r24, r24
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	09 2e       	mov	r0, r25
 268:	00 0c       	add	r0, r0
 26a:	aa 0b       	sbc	r26, r26
 26c:	bb 0b       	sbc	r27, r27
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	26 e0       	ldi	r18, 0x06	; 6
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	84 1b       	sub	r24, r20
 278:	95 0b       	sbc	r25, r21
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	08 f4       	brcc	.+2      	; 0x282 <IncrDecr+0x2c>
 280:	58 c0       	rjmp	.+176    	; 0x332 <IncrDecr+0xdc>
 282:	8a 5b       	subi	r24, 0xBA	; 186
 284:	9f 4f       	sbci	r25, 0xFF	; 255
 286:	fc 01       	movw	r30, r24
 288:	e7 c1       	rjmp	.+974    	; 0x658 <__tablejump2__>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 290:	53 c0       	rjmp	.+166    	; 0x338 <IncrDecr+0xe2>
 292:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	21 f4       	brne	.+8      	; 0x2a2 <IncrDecr+0x4c>
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2a0:	4b c0       	rjmp	.+150    	; 0x338 <IncrDecr+0xe2>
 2a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	21 f4       	brne	.+8      	; 0x2b2 <IncrDecr+0x5c>
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2b0:	43 c0       	rjmp	.+134    	; 0x338 <IncrDecr+0xe2>
 2b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <IncrDecr+0x6c>
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2c0:	3b c0       	rjmp	.+118    	; 0x338 <IncrDecr+0xe2>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2c8:	37 c0       	rjmp	.+110    	; 0x338 <IncrDecr+0xe2>
 2ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	21 f4       	brne	.+8      	; 0x2da <IncrDecr+0x84>
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2d8:	2f c0       	rjmp	.+94     	; 0x338 <IncrDecr+0xe2>
 2da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	21 f4       	brne	.+8      	; 0x2ea <IncrDecr+0x94>
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2e8:	27 c0       	rjmp	.+78     	; 0x338 <IncrDecr+0xe2>
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 2f0:	23 c0       	rjmp	.+70     	; 0x338 <IncrDecr+0xe2>
 2f2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	21 f4       	brne	.+8      	; 0x302 <IncrDecr+0xac>
 2fa:	84 e0       	ldi	r24, 0x04	; 4
 2fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 300:	1b c0       	rjmp	.+54     	; 0x338 <IncrDecr+0xe2>
 302:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PINAtmp>
 306:	83 30       	cpi	r24, 0x03	; 3
 308:	21 f4       	brne	.+8      	; 0x312 <IncrDecr+0xbc>
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 310:	13 c0       	rjmp	.+38     	; 0x338 <IncrDecr+0xe2>
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 318:	0f c0       	rjmp	.+30     	; 0x338 <IncrDecr+0xe2>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 320:	0b c0       	rjmp	.+22     	; 0x338 <IncrDecr+0xe2>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 328:	07 c0       	rjmp	.+14     	; 0x338 <IncrDecr+0xe2>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <next_state>
 330:	03 c0       	rjmp	.+6      	; 0x338 <IncrDecr+0xe2>
 332:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <next_state>
 336:	00 00       	nop
 338:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	09 2e       	mov	r0, r25
 342:	00 0c       	add	r0, r0
 344:	aa 0b       	sbc	r26, r26
 346:	bb 0b       	sbc	r27, r27
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	26 e0       	ldi	r18, 0x06	; 6
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	84 1b       	sub	r24, r20
 352:	95 0b       	sbc	r25, r21
 354:	28 17       	cp	r18, r24
 356:	39 07       	cpc	r19, r25
 358:	08 f4       	brcc	.+2      	; 0x35c <IncrDecr+0x106>
 35a:	5f c0       	rjmp	.+190    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 35c:	83 5b       	subi	r24, 0xB3	; 179
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	fc 01       	movw	r30, r24
 362:	7a c1       	rjmp	.+756    	; 0x658 <__tablejump2__>
 364:	80 e3       	ldi	r24, 0x30	; 48
 366:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 36a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
 36e:	5b c0       	rjmp	.+182    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 370:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 374:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 378:	56 c0       	rjmp	.+172    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 37a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	79 f4       	brne	.+30     	; 0x3a0 <IncrDecr+0x14a>
 382:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 386:	89 33       	cpi	r24, 0x39	; 57
 388:	20 f4       	brcc	.+8      	; 0x392 <IncrDecr+0x13c>
 38a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	02 c0       	rjmp	.+4      	; 0x396 <IncrDecr+0x140>
 392:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 396:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 39a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
 39e:	43 c0       	rjmp	.+134    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3a0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3b0:	89 33       	cpi	r24, 0x39	; 57
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <IncrDecr+0x166>
 3b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <IncrDecr+0x16a>
 3bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 3c4:	30 c0       	rjmp	.+96     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 3ca:	8a 30       	cpi	r24, 0x0A	; 10
 3cc:	79 f4       	brne	.+30     	; 0x3ec <IncrDecr+0x196>
 3ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3d2:	81 33       	cpi	r24, 0x31	; 49
 3d4:	20 f0       	brcs	.+8      	; 0x3de <IncrDecr+0x188>
 3d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3da:	81 50       	subi	r24, 0x01	; 1
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <IncrDecr+0x18c>
 3de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 3e6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
 3ea:	1d c0       	rjmp	.+58     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter>
 3f6:	17 c0       	rjmp	.+46     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 3fc:	81 33       	cpi	r24, 0x31	; 49
 3fe:	20 f0       	brcs	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 404:	81 50       	subi	r24, 0x01	; 1
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 40c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 410:	0a c0       	rjmp	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 412:	80 e3       	ldi	r24, 0x30	; 48
 414:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 418:	06 c0       	rjmp	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41a:	87 e3       	ldi	r24, 0x37	; 55
 41c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <PORTCout>
 420:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter>
 424:	00 00       	nop
 426:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <next_state>
 42a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 42e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PORTCout>
 432:	80 63       	ori	r24, 0x30	; 48
 434:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <output>
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	c8 de       	rcall	.-624    	; 0x1cc <LCD_Cursor>
 43c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <output>
 440:	96 de       	rcall	.-724    	; 0x16e <LCD_WriteData>
 442:	00 00       	nop
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <TimerOn>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	81 e8       	ldi	r24, 0x81	; 129
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	2b e0       	ldi	r18, 0x0B	; 11
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
 45c:	88 e8       	ldi	r24, 0x88	; 136
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	2d e7       	ldi	r18, 0x7D	; 125
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	31 83       	std	Z+1, r19	; 0x01
 468:	20 83       	st	Z, r18
 46a:	8f e6       	ldi	r24, 0x6F	; 111
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	22 e0       	ldi	r18, 0x02	; 2
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
 474:	84 e8       	ldi	r24, 0x84	; 132
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	fc 01       	movw	r30, r24
 47a:	11 82       	std	Z+1, r1	; 0x01
 47c:	10 82       	st	Z, r1
 47e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 482:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 486:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 48a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 48e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 492:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 496:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 49a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 49e:	8f e5       	ldi	r24, 0x5F	; 95
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	2f e5       	ldi	r18, 0x5F	; 95
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	f9 01       	movw	r30, r18
 4a8:	20 81       	ld	r18, Z
 4aa:	20 68       	ori	r18, 0x80	; 128
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
 4b0:	00 00       	nop
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <TimerISR>:

void TimerISR() {
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 4c6:	00 00       	nop
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 4de:	0f 92       	push	r0
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 500:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 504:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 508:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 50c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	a1 09       	sbc	r26, r1
 514:	b1 09       	sbc	r27, r1
 516:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 51a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 51e:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 522:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 526:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 52a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 52e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 532:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 536:	89 2b       	or	r24, r25
 538:	8a 2b       	or	r24, r26
 53a:	8b 2b       	or	r24, r27
 53c:	89 f4       	brne	.+34     	; 0x560 <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 53e:	bc df       	rcall	.-136    	; 0x4b8 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 540:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 544:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 548:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 54c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 550:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 554:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 558:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 55c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 560:	00 00       	nop
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 584:	0f 90       	pop	r0
 586:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	00 d0       	rcall	.+0      	; 0x596 <TimerSet+0x6>
 596:	00 d0       	rcall	.+0      	; 0x598 <TimerSet+0x8>
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	69 83       	std	Y+1, r22	; 0x01
 59e:	7a 83       	std	Y+2, r23	; 0x02
 5a0:	8b 83       	std	Y+3, r24	; 0x03
 5a2:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	9a 81       	ldd	r25, Y+2	; 0x02
 5a8:	ab 81       	ldd	r26, Y+3	; 0x03
 5aa:	bc 81       	ldd	r27, Y+4	; 0x04
 5ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 5b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 5b4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 5b8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 5bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5c4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 5c8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 5cc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 5d0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 5d4:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 5d8:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 5dc:	00 00       	nop
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <main>:

int main(void)
{
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // LCD input button
 5f4:	81 e2       	ldi	r24, 0x21	; 33
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	fc 01       	movw	r30, r24
 5fa:	10 82       	st	Z, r1
 5fc:	82 e2       	ldi	r24, 0x22	; 34
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	2f ef       	ldi	r18, 0xFF	; 255
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 606:	87 e2       	ldi	r24, 0x27	; 39
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	2f ef       	ldi	r18, 0xFF	; 255
 60c:	fc 01       	movw	r30, r24
 60e:	20 83       	st	Z, r18
 610:	88 e2       	ldi	r24, 0x28	; 40
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	fc 01       	movw	r30, r24
 616:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control
 618:	8a e2       	ldi	r24, 0x2A	; 42
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	fc 01       	movw	r30, r24
 620:	20 83       	st	Z, r18
 622:	8b e2       	ldi	r24, 0x2B	; 43
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	fc 01       	movw	r30, r24
 628:	10 82       	st	Z, r1
	TimerSet(100);
 62a:	64 e6       	ldi	r22, 0x64	; 100
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	ae df       	rcall	.-164    	; 0x590 <TimerSet>
	TimerOn();
 634:	0a df       	rcall	.-492    	; 0x44a <TimerOn>
	// Initializes the LCD display
	LCD_init();
 636:	56 dd       	rcall	.-1364   	; 0xe4 <LCD_init>
 638:	80 e2       	ldi	r24, 0x20	; 32
	// Starting at position 1 on the LCD screen, writes Hello World
	
	while(1) {
		
		PINAtmp = PINA & 0x03;
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	fc 01       	movw	r30, r24
 63e:	80 81       	ld	r24, Z
 640:	83 70       	andi	r24, 0x03	; 3
 642:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <PINAtmp>
		IncrDecr();
 646:	07 de       	rcall	.-1010   	; 0x256 <IncrDecr>
 648:	00 00       	nop
		while(!TimerFlag);
 64a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 64e:	88 23       	and	r24, r24
 650:	e1 f3       	breq	.-8      	; 0x64a <main+0x5e>
 652:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		TimerFlag = 0;
 656:	f0 cf       	rjmp	.-32     	; 0x638 <main+0x4c>

00000658 <__tablejump2__>:
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
		
	}
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	00 24       	eor	r0, r0
 65e:	00 1c       	adc	r0, r0
 660:	0b be       	out	0x3b, r0	; 59
 662:	07 90       	elpm	r0, Z+
 664:	f6 91       	elpm	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	09 94       	ijmp

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
