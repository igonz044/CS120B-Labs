
itzel_lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000532  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000532  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a9  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000805  00000000  00000000  00001035  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ae  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000499  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  000023b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c1       	rjmp	.+868    	; 0x39a <__vector_13>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8b 00       	.word	0x008b	; ????
  8e:	8f 00       	.word	0x008f	; ????
  90:	ab 00       	.word	0x00ab	; ????
  92:	d3 00       	.word	0x00d3	; ????
  94:	bf 00       	.word	0x00bf	; ????
  96:	d7 00       	.word	0x00d7	; ????
  98:	db 00       	.word	0x00db	; ????
  9a:	f7 00       	.word	0x00f7	; ????
  9c:	fc 00       	.word	0x00fc	; ????
  9e:	01 01       	movw	r0, r2
  a0:	29 01       	movw	r4, r18
  a2:	3b 01       	movw	r6, r22
  a4:	62 01       	movw	r12, r4
  a6:	74 01       	movw	r14, r8

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e4       	ldi	r29, 0x40	; 64
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e2 e3       	ldi	r30, 0x32	; 50
  bc:	f5 e0       	ldi	r31, 0x05	; 5
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a2 31       	cpi	r26, 0x12	; 18
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	ec d1       	rcall	.+984    	; 0x4b8 <main>
  e0:	26 c2       	rjmp	.+1100   	; 0x52e <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <IncrDecr>:
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
  f0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <state+0x1>
  f4:	cc 01       	movw	r24, r24
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	26 e0       	ldi	r18, 0x06	; 6
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	84 1b       	sub	r24, r20
 104:	95 0b       	sbc	r25, r21
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	08 f4       	brcc	.+2      	; 0x10e <IncrDecr+0x2a>
 10c:	58 c0       	rjmp	.+176    	; 0x1be <IncrDecr+0xda>
 10e:	8a 5b       	subi	r24, 0xBA	; 186
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	fc 01       	movw	r30, r24
 114:	03 c2       	rjmp	.+1030   	; 0x51c <__tablejump2__>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 11c:	53 c0       	rjmp	.+166    	; 0x1c4 <IncrDecr+0xe0>
 11e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	21 f4       	brne	.+8      	; 0x12e <IncrDecr+0x4a>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 12c:	4b c0       	rjmp	.+150    	; 0x1c4 <IncrDecr+0xe0>
 12e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	21 f4       	brne	.+8      	; 0x13e <IncrDecr+0x5a>
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 13c:	43 c0       	rjmp	.+134    	; 0x1c4 <IncrDecr+0xe0>
 13e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	21 f4       	brne	.+8      	; 0x14e <IncrDecr+0x6a>
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 14c:	3b c0       	rjmp	.+118    	; 0x1c4 <IncrDecr+0xe0>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 154:	37 c0       	rjmp	.+110    	; 0x1c4 <IncrDecr+0xe0>
 156:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	21 f4       	brne	.+8      	; 0x166 <IncrDecr+0x82>
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 164:	2f c0       	rjmp	.+94     	; 0x1c4 <IncrDecr+0xe0>
 166:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	21 f4       	brne	.+8      	; 0x176 <IncrDecr+0x92>
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 174:	27 c0       	rjmp	.+78     	; 0x1c4 <IncrDecr+0xe0>
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <IncrDecr+0xe0>
 17e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	21 f4       	brne	.+8      	; 0x18e <IncrDecr+0xaa>
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 18c:	1b c0       	rjmp	.+54     	; 0x1c4 <IncrDecr+0xe0>
 18e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PINAtmp>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	21 f4       	brne	.+8      	; 0x19e <IncrDecr+0xba>
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 19c:	13 c0       	rjmp	.+38     	; 0x1c4 <IncrDecr+0xe0>
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <IncrDecr+0xe0>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <IncrDecr+0xe0>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <IncrDecr+0xe0>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <next_state>
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <IncrDecr+0xe0>
 1be:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <next_state>
 1c2:	00 00       	nop
 1c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state>
 1c8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <state+0x1>
 1cc:	cc 01       	movw	r24, r24
 1ce:	a0 e0       	ldi	r26, 0x00	; 0
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	26 e0       	ldi	r18, 0x06	; 6
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	84 1b       	sub	r24, r20
 1dc:	95 0b       	sbc	r25, r21
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	08 f4       	brcc	.+2      	; 0x1e6 <IncrDecr+0x102>
 1e4:	84 c0       	rjmp	.+264    	; 0x2ee <IncrDecr+0x20a>
 1e6:	83 5b       	subi	r24, 0xB3	; 179
 1e8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ea:	fc 01       	movw	r30, r24
 1ec:	97 c1       	rjmp	.+814    	; 0x51c <__tablejump2__>
 1ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <PORTCout>
 1f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 1f6:	83 c0       	rjmp	.+262    	; 0x2fe <IncrDecr+0x21a>
 1f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 1fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PORTCout>
 200:	7e c0       	rjmp	.+252    	; 0x2fe <IncrDecr+0x21a>
 202:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <counter>
 206:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TEMP2>
 20a:	98 17       	cp	r25, r24
 20c:	e0 f0       	brcs	.+56     	; 0x246 <IncrDecr+0x162>
 20e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 212:	89 30       	cpi	r24, 0x09	; 9
 214:	20 f4       	brcc	.+8      	; 0x21e <IncrDecr+0x13a>
 216:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	02 c0       	rjmp	.+4      	; 0x222 <IncrDecr+0x13e>
 21e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 222:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PORTCout>
 226:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 22a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TEMP>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TEMP>
 234:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TEMP>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	08 f4       	brcc	.+2      	; 0x23e <IncrDecr+0x15a>
 23c:	5d c0       	rjmp	.+186    	; 0x2f8 <IncrDecr+0x214>
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TEMP2>
 244:	59 c0       	rjmp	.+178    	; 0x2f8 <IncrDecr+0x214>
 246:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <counter>
 250:	53 c0       	rjmp	.+166    	; 0x2f8 <IncrDecr+0x214>
 252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 256:	89 30       	cpi	r24, 0x09	; 9
 258:	20 f4       	brcc	.+8      	; 0x262 <IncrDecr+0x17e>
 25a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	02 c0       	rjmp	.+4      	; 0x266 <IncrDecr+0x182>
 262:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 266:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PORTCout>
 26a:	8a e0       	ldi	r24, 0x0A	; 10
 26c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TEMP2>
 270:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TEMP>
 274:	44 c0       	rjmp	.+136    	; 0x2fe <IncrDecr+0x21a>
 276:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <counter>
 27a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <TEMP2>
 27e:	98 17       	cp	r25, r24
 280:	d8 f0       	brcs	.+54     	; 0x2b8 <IncrDecr+0x1d4>
 282:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 286:	88 23       	and	r24, r24
 288:	21 f0       	breq	.+8      	; 0x292 <IncrDecr+0x1ae>
 28a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	02 c0       	rjmp	.+4      	; 0x296 <IncrDecr+0x1b2>
 292:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 296:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PORTCout>
 29a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 29e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TEMP>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TEMP>
 2a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TEMP>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	30 f1       	brcs	.+76     	; 0x2fc <IncrDecr+0x218>
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TEMP2>
 2b6:	22 c0       	rjmp	.+68     	; 0x2fc <IncrDecr+0x218>
 2b8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <counter>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <counter>
 2c2:	1c c0       	rjmp	.+56     	; 0x2fc <IncrDecr+0x218>
 2c4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 2c8:	88 23       	and	r24, r24
 2ca:	21 f0       	breq	.+8      	; 0x2d4 <IncrDecr+0x1f0>
 2cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 2d0:	81 50       	subi	r24, 0x01	; 1
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <IncrDecr+0x1f4>
 2d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PORTCout>
 2d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PORTCout>
 2dc:	8a e0       	ldi	r24, 0x0A	; 10
 2de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <TEMP2>
 2e2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TEMP>
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <IncrDecr+0x21a>
 2e8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <PORTCout>
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <IncrDecr+0x21a>
 2ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <PORTCout>
 2f2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter>
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <IncrDecr+0x21a>
 2f8:	00 00       	nop
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <IncrDecr+0x21a>
 2fc:	00 00       	nop
 2fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <next_state>
 302:	88 2f       	mov	r24, r24
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state+0x1>
 30a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state>
 30e:	00 00       	nop
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <TimerOn>:
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	81 e8       	ldi	r24, 0x81	; 129
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	2b e0       	ldi	r18, 0x0B	; 11
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
 328:	88 e8       	ldi	r24, 0x88	; 136
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	2d e7       	ldi	r18, 0x7D	; 125
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	fc 01       	movw	r30, r24
 332:	31 83       	std	Z+1, r19	; 0x01
 334:	20 83       	st	Z, r18
 336:	8f e6       	ldi	r24, 0x6F	; 111
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	22 e0       	ldi	r18, 0x02	; 2
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
 340:	84 e8       	ldi	r24, 0x84	; 132
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	11 82       	std	Z+1, r1	; 0x01
 348:	10 82       	st	Z, r1
 34a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 352:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 356:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 35a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 35e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 362:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 366:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 36a:	8f e5       	ldi	r24, 0x5F	; 95
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	2f e5       	ldi	r18, 0x5F	; 95
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	20 68       	ori	r18, 0x80	; 128
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	00 00       	nop
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <TimerISR>:

void TimerISR() {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
 392:	00 00       	nop
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3aa:	0f 92       	push	r0
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 3cc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 3d0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 3d4:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 3d8:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	a1 09       	sbc	r26, r1
 3e0:	b1 09       	sbc	r27, r1
 3e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 3e6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 3ea:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 3ee:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 3f2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <_avr_timer_cntcurr>
 3f6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x1>
 3fa:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x2>
 3fe:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x3>
 402:	89 2b       	or	r24, r25
 404:	8a 2b       	or	r24, r26
 406:	8b 2b       	or	r24, r27
 408:	89 f4       	brne	.+34     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		TimerISR(); // Call the ISR that the user uses
 40a:	bc df       	rcall	.-136    	; 0x384 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 40c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 410:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 414:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 418:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 41c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 420:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 424:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 428:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
	}
}
 42c:	00 00       	nop
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 450:	0f 90       	pop	r0
 452:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <TimerSet+0x6>
 462:	00 d0       	rcall	.+0      	; 0x464 <TimerSet+0x8>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	69 83       	std	Y+1, r22	; 0x01
 46a:	7a 83       	std	Y+2, r23	; 0x02
 46c:	8b 83       	std	Y+3, r24	; 0x03
 46e:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	9a 81       	ldd	r25, Y+2	; 0x02
 474:	ab 81       	ldd	r26, Y+3	; 0x03
 476:	bc 81       	ldd	r27, Y+4	; 0x04
 478:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 47c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 480:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 484:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 488:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 48c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 490:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 494:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 498:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
 49c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 4a0:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 4a4:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
}
 4a8:	00 00       	nop
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <main>:

int main(void)
{
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; //input 
 4c0:	81 e2       	ldi	r24, 0x21	; 33
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	10 82       	st	Z, r1
 4c8:	82 e2       	ldi	r24, 0x22	; 34
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //output
 4d2:	84 e2       	ldi	r24, 0x24	; 36
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
 4dc:	85 e2       	ldi	r24, 0x25	; 37
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	fc 01       	movw	r30, r24
 4e2:	10 82       	st	Z, r1
	
	TimerSet(100);
 4e4:	64 e6       	ldi	r22, 0x64	; 100
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	b7 df       	rcall	.-146    	; 0x45c <TimerSet>
	TimerOn();
 4ee:	13 df       	rcall	.-474    	; 0x316 <TimerOn>
 4f0:	85 e2       	ldi	r24, 0x25	; 37
	
	while(1) {
		PORTB = PORTCout;
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <PORTCout>
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 83       	st	Z, r18
 4fc:	80 e2       	ldi	r24, 0x20	; 32
		PINAtmp = PINA & 0x03;
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	80 81       	ld	r24, Z
 504:	83 70       	andi	r24, 0x03	; 3
 506:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <PINAtmp>
		IncrDecr();
 50a:	ec dd       	rcall	.-1064   	; 0xe4 <IncrDecr>
 50c:	00 00       	nop
		while(!TimerFlag);
 50e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 512:	88 23       	and	r24, r24
 514:	e1 f3       	breq	.-8      	; 0x50e <main+0x56>
 516:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		TimerFlag = 0;
 51a:	ea cf       	rjmp	.-44     	; 0x4f0 <main+0x38>

0000051c <__tablejump2__>:
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	00 24       	eor	r0, r0
 522:	00 1c       	adc	r0, r0
 524:	0b be       	out	0x3b, r0	; 59
 526:	07 90       	elpm	r0, Z+
 528:	f6 91       	elpm	r31, Z
 52a:	e0 2d       	mov	r30, r0
 52c:	09 94       	ijmp

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
